{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dakku documentation This is the documentation of dakku renderer. Updated on 2022-04-05 at 16:20:06 +0000","title":"dakku documentation"},{"location":"#dakku-documentation","text":"This is the documentation of dakku renderer. Updated on 2022-04-05 at 16:20:06 +0000","title":"dakku documentation"},{"location":"Classes/","text":"Classes namespace dakku dakku namespace class Logger logger class class VectorBase vector base class Updated on 2022-04-05 at 16:20:06 +0000","title":"Classes"},{"location":"Classes/#classes","text":"namespace dakku dakku namespace class Logger logger class class VectorBase vector base class Updated on 2022-04-05 at 16:20:06 +0000","title":"Classes"},{"location":"Classes/classdakku_1_1Logger/","text":"dakku::Logger logger class #include <logger.h> Public Functions Name const Logger & get () get logger instance spdlog::logger * handle () const get raw spdlog::logger handle Public Functions Documentation function get static const Logger & get () get logger instance Return : the logger instance function handle inline spdlog :: logger * handle () const get raw spdlog::logger handle Return : the corresponding spdlog::logger Updated on 2022-04-05 at 16:20:06 +0000","title":"dakku::Logger"},{"location":"Classes/classdakku_1_1Logger/#dakkulogger","text":"logger class #include <logger.h>","title":"dakku::Logger"},{"location":"Classes/classdakku_1_1Logger/#public-functions","text":"Name const Logger & get () get logger instance spdlog::logger * handle () const get raw spdlog::logger handle","title":"Public Functions"},{"location":"Classes/classdakku_1_1Logger/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classdakku_1_1Logger/#function-get","text":"static const Logger & get () get logger instance Return : the logger instance","title":"function get"},{"location":"Classes/classdakku_1_1Logger/#function-handle","text":"inline spdlog :: logger * handle () const get raw spdlog::logger handle Return : the corresponding spdlog::logger Updated on 2022-04-05 at 16:20:06 +0000","title":"function handle"},{"location":"Classes/classdakku_1_1VectorBase/","text":"dakku::VectorBase vector base class More... #include <vector_base.h> Public Functions Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args Protected Attributes Name T _data vector base data Detailed Description template < ArithmeticType T , size_t size , typename Derived > class dakku :: VectorBase ; vector base class Template Parameters : T type size dimension of the vector Derived derived class type Public Functions Documentation function VectorBase inline explicit VectorBase () Construct a new Vector Base object with all components initialized to zero. function VectorBase template < ArithmeticType Arg > inline explicit VectorBase ( Arg value ) Construct a new Vector Base object with all components initialized to value Parameters : value init value Template Parameters : Arg value type function VectorBase template < ArithmeticType ... Args > inline explicit VectorBase ( Args && ... args ) Construct a new Vector Base object with given values. Parameters : args init values Template Parameters : Args value types function set template < ArithmeticType Arg > inline void set ( Arg value ) set all components to value Parameters : value the given value Template Parameters : Arg value type function setByIndex template < ArithmeticType Arg > inline void setByIndex ( size_t index , Arg value ) set data[index] to value Parameters : index the index of the component value the given value Template Parameters : Arg value type function set template < ArithmeticType ... Args , size_t ... Is > inline void set ( std :: index_sequence < Is ... > , Args && ... args ) set data to args Parameters : args values Template Parameters : Args value types Is indices (generated by std::index_sequence_for) function set template < ArithmeticType ... Args > inline void set ( Args && ... args ) set data to args Parameters : args values Template Parameters : Args value typs Protected Attributes Documentation variable _data T _data ; vector base data Updated on 2022-04-05 at 16:20:06 +0000","title":"dakku::VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#dakkuvectorbase","text":"vector base class More... #include <vector_base.h>","title":"dakku::VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#public-functions","text":"Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args","title":"Public Functions"},{"location":"Classes/classdakku_1_1VectorBase/#protected-attributes","text":"Name T _data vector base data","title":"Protected Attributes"},{"location":"Classes/classdakku_1_1VectorBase/#detailed-description","text":"template < ArithmeticType T , size_t size , typename Derived > class dakku :: VectorBase ; vector base class Template Parameters : T type size dimension of the vector Derived derived class type","title":"Detailed Description"},{"location":"Classes/classdakku_1_1VectorBase/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase","text":"inline explicit VectorBase () Construct a new Vector Base object with all components initialized to zero.","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase_1","text":"template < ArithmeticType Arg > inline explicit VectorBase ( Arg value ) Construct a new Vector Base object with all components initialized to value Parameters : value init value Template Parameters : Arg value type","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase_2","text":"template < ArithmeticType ... Args > inline explicit VectorBase ( Args && ... args ) Construct a new Vector Base object with given values. Parameters : args init values Template Parameters : Args value types","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-set","text":"template < ArithmeticType Arg > inline void set ( Arg value ) set all components to value Parameters : value the given value Template Parameters : Arg value type","title":"function set"},{"location":"Classes/classdakku_1_1VectorBase/#function-setbyindex","text":"template < ArithmeticType Arg > inline void setByIndex ( size_t index , Arg value ) set data[index] to value Parameters : index the index of the component value the given value Template Parameters : Arg value type","title":"function setByIndex"},{"location":"Classes/classdakku_1_1VectorBase/#function-set_1","text":"template < ArithmeticType ... Args , size_t ... Is > inline void set ( std :: index_sequence < Is ... > , Args && ... args ) set data to args Parameters : args values Template Parameters : Args value types Is indices (generated by std::index_sequence_for)","title":"function set"},{"location":"Classes/classdakku_1_1VectorBase/#function-set_2","text":"template < ArithmeticType ... Args > inline void set ( Args && ... args ) set data to args Parameters : args values Template Parameters : Args value typs","title":"function set"},{"location":"Classes/classdakku_1_1VectorBase/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classdakku_1_1VectorBase/#variable-_data","text":"T _data ; vector base data Updated on 2022-04-05 at 16:20:06 +0000","title":"variable _data"},{"location":"Examples/","text":"Examples Updated on 2022-04-05 at 16:20:06 +0000","title":"Examples"},{"location":"Examples/#examples","text":"Updated on 2022-04-05 at 16:20:06 +0000","title":"Examples"},{"location":"Files/","text":"Files dir src file src/platform.h dir src/core file src/core/fwd.h dir src/logger file src/logger/fwd.h file src/logger/logger.h dir src/math file src/math/fwd.h file src/math/vector_base.h Updated on 2022-04-05 at 16:20:06 +0000","title":"Files"},{"location":"Files/#files","text":"dir src file src/platform.h dir src/core file src/core/fwd.h dir src/logger file src/logger/fwd.h file src/logger/logger.h dir src/math file src/math/fwd.h file src/math/vector_base.h Updated on 2022-04-05 at 16:20:06 +0000","title":"Files"},{"location":"Files/core_2fwd_8h/","text":"src/core/fwd.h Functions Name DAKKU_EXPORT_CORE void test () Defines Name DAKKU_EXPORT_CORE Functions Documentation function test DAKKU_EXPORT_CORE void test () Macros Documentation define DAKKU_EXPORT_CORE #define DAKKU_EXPORT_CORE DAKKU_EXPORT Source code #ifndef DAKKU_CORE_FWD_H_ #define DAKKU_CORE_FWD_H_ #include <platform.h> #if DAKKU_BUILD_MODULE != DAKKU_CORE_MODULE #define DAKKU_EXPORT_CORE DAKKU_IMPORT #else #define DAKKU_EXPORT_CORE DAKKU_EXPORT #endif DAKKU_EXPORT_CORE void test (); #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"src/core/fwd.h"},{"location":"Files/core_2fwd_8h/#srccorefwdh","text":"","title":"src/core/fwd.h"},{"location":"Files/core_2fwd_8h/#functions","text":"Name DAKKU_EXPORT_CORE void test ()","title":"Functions"},{"location":"Files/core_2fwd_8h/#defines","text":"Name DAKKU_EXPORT_CORE","title":"Defines"},{"location":"Files/core_2fwd_8h/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Files/core_2fwd_8h/#function-test","text":"DAKKU_EXPORT_CORE void test ()","title":"function test"},{"location":"Files/core_2fwd_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/core_2fwd_8h/#define-dakku_export_core","text":"#define DAKKU_EXPORT_CORE DAKKU_EXPORT","title":"define DAKKU_EXPORT_CORE"},{"location":"Files/core_2fwd_8h/#source-code","text":"#ifndef DAKKU_CORE_FWD_H_ #define DAKKU_CORE_FWD_H_ #include <platform.h> #if DAKKU_BUILD_MODULE != DAKKU_CORE_MODULE #define DAKKU_EXPORT_CORE DAKKU_IMPORT #else #define DAKKU_EXPORT_CORE DAKKU_EXPORT #endif DAKKU_EXPORT_CORE void test (); #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"Source code"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/","text":"src Directories Name src/core src/logger src/math Files Name src/platform.h Updated on 2022-04-05 at 16:20:06 +0000","title":"src"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#src","text":"","title":"src"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#directories","text":"Name src/core src/logger src/math","title":"Directories"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","text":"Name src/platform.h Updated on 2022-04-05 at 16:20:06 +0000","title":"Files"},{"location":"Files/dir_ae9a93452e2a84339148a16bcf2eb561/","text":"src/math Files Name src/math/fwd.h src/math/vector_base.h Updated on 2022-04-05 at 16:20:06 +0000","title":"src/math"},{"location":"Files/dir_ae9a93452e2a84339148a16bcf2eb561/#srcmath","text":"","title":"src/math"},{"location":"Files/dir_ae9a93452e2a84339148a16bcf2eb561/#files","text":"Name src/math/fwd.h src/math/vector_base.h Updated on 2022-04-05 at 16:20:06 +0000","title":"Files"},{"location":"Files/dir_aebb8dcc11953d78e620bbef0b9e2183/","text":"src/core Files Name src/core/fwd.h Updated on 2022-04-05 at 16:20:06 +0000","title":"src/core"},{"location":"Files/dir_aebb8dcc11953d78e620bbef0b9e2183/#srccore","text":"","title":"src/core"},{"location":"Files/dir_aebb8dcc11953d78e620bbef0b9e2183/#files","text":"Name src/core/fwd.h Updated on 2022-04-05 at 16:20:06 +0000","title":"Files"},{"location":"Files/dir_ffde1fbcaa8d6b0d34e29c3bddf7a801/","text":"src/logger Files Name src/logger/fwd.h src/logger/logger.h Updated on 2022-04-05 at 16:20:06 +0000","title":"src/logger"},{"location":"Files/dir_ffde1fbcaa8d6b0d34e29c3bddf7a801/#srclogger","text":"","title":"src/logger"},{"location":"Files/dir_ffde1fbcaa8d6b0d34e29c3bddf7a801/#files","text":"Name src/logger/fwd.h src/logger/logger.h Updated on 2022-04-05 at 16:20:06 +0000","title":"Files"},{"location":"Files/logger_2fwd_8h/","text":"src/logger/fwd.h Namespaces Name dakku dakku namespace Defines Name DAKKU_EXPORT_LOGGER Macros Documentation define DAKKU_EXPORT_LOGGER #define DAKKU_EXPORT_LOGGER DAKKU_EXPORT Source code #ifndef DAKKU_LOGGER_FWD_H_ #define DAKKU_LOGGER_FWD_H_ #include <platform.h> namespace dakku { #if DAKKU_BUILD_MODULE != DAKKU_LOGGER_MODULE #define DAKKU_EXPORT_LOGGER DAKKU_IMPORT #else #define DAKKU_EXPORT_LOGGER DAKKU_EXPORT #endif class DAKKU_EXPORT_LOGGER Logger ; } #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"src/logger/fwd.h"},{"location":"Files/logger_2fwd_8h/#srcloggerfwdh","text":"","title":"src/logger/fwd.h"},{"location":"Files/logger_2fwd_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/logger_2fwd_8h/#defines","text":"Name DAKKU_EXPORT_LOGGER","title":"Defines"},{"location":"Files/logger_2fwd_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/logger_2fwd_8h/#define-dakku_export_logger","text":"#define DAKKU_EXPORT_LOGGER DAKKU_EXPORT","title":"define DAKKU_EXPORT_LOGGER"},{"location":"Files/logger_2fwd_8h/#source-code","text":"#ifndef DAKKU_LOGGER_FWD_H_ #define DAKKU_LOGGER_FWD_H_ #include <platform.h> namespace dakku { #if DAKKU_BUILD_MODULE != DAKKU_LOGGER_MODULE #define DAKKU_EXPORT_LOGGER DAKKU_IMPORT #else #define DAKKU_EXPORT_LOGGER DAKKU_EXPORT #endif class DAKKU_EXPORT_LOGGER Logger ; } #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"Source code"},{"location":"Files/logger_8h/","text":"src/logger/logger.h Namespaces Name dakku dakku namespace Classes Name class dakku::Logger logger class Defines Name DAKKU_ERR (...) log error message DAKKU_INFO (...) log info message DAKKU_WARN (...) log warning message DAKKU_DEBUG (...) log debug message DAKKU_CHECK (...) check whether the condition val is true, if not log error messages Macros Documentation define DAKKU_ERR #define DAKKU_ERR( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: err , __VA_ARGS__ ) log error message define DAKKU_INFO #define DAKKU_INFO( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: info , __VA_ARGS__ ) log info message define DAKKU_WARN #define DAKKU_WARN( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: warn , __VA_ARGS__ ) log warning message define DAKKU_DEBUG #define DAKKU_DEBUG( ... ) static_cast < void > ( 0 ) log debug message define DAKKU_CHECK #define DAKKU_CHECK( ... ) static_cast < void > ( 0 ) check whether the condition val is true, if not log error messages Source code #ifndef DAKKU_LOGGER_LOGGER_H_ #define DAKKU_LOGGER_LOGGER_H_ #include <logger/fwd.h> #include <spdlog/spdlog.h> #include <cstdlib> namespace dakku { class DAKKU_EXPORT_LOGGER Logger { public : static const Logger & get (); spdlog :: logger * handle () const { return _logger . get (); } private : explicit Logger ( std :: shared_ptr < spdlog :: logger > _logger ); std :: shared_ptr < spdlog :: logger > _logger ; }; #define DAKKU_ERR(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::err, __VA_ARGS__) #define DAKKU_INFO(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::info, __VA_ARGS__) #define DAKKU_WARN(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::warn, __VA_ARGS__) #ifdef DAKKU_BUILD_DEBUG #define DAKKU_DEBUG(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::debug, __VA_ARGS__) #else #define DAKKU_DEBUG(...) static_cast<void>(0) #endif #ifdef DAKKU_BUILD_CHECK #define DAKKU_CHECK(val, ...) \\ do { \\ if (!(val)) { \\ DAKKU_ERR(__VA_ARGS__); \\ std::exit(-1); \\ } \\ } while (0) #else #define DAKKU_CHECK(...) static_cast<void>(0) #endif } // namespace dakku #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"src/logger/logger.h"},{"location":"Files/logger_8h/#srcloggerloggerh","text":"","title":"src/logger/logger.h"},{"location":"Files/logger_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/logger_8h/#classes","text":"Name class dakku::Logger logger class","title":"Classes"},{"location":"Files/logger_8h/#defines","text":"Name DAKKU_ERR (...) log error message DAKKU_INFO (...) log info message DAKKU_WARN (...) log warning message DAKKU_DEBUG (...) log debug message DAKKU_CHECK (...) check whether the condition val is true, if not log error messages","title":"Defines"},{"location":"Files/logger_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/logger_8h/#define-dakku_err","text":"#define DAKKU_ERR( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: err , __VA_ARGS__ ) log error message","title":"define DAKKU_ERR"},{"location":"Files/logger_8h/#define-dakku_info","text":"#define DAKKU_INFO( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: info , __VA_ARGS__ ) log info message","title":"define DAKKU_INFO"},{"location":"Files/logger_8h/#define-dakku_warn","text":"#define DAKKU_WARN( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: warn , __VA_ARGS__ ) log warning message","title":"define DAKKU_WARN"},{"location":"Files/logger_8h/#define-dakku_debug","text":"#define DAKKU_DEBUG( ... ) static_cast < void > ( 0 ) log debug message","title":"define DAKKU_DEBUG"},{"location":"Files/logger_8h/#define-dakku_check","text":"#define DAKKU_CHECK( ... ) static_cast < void > ( 0 ) check whether the condition val is true, if not log error messages","title":"define DAKKU_CHECK"},{"location":"Files/logger_8h/#source-code","text":"#ifndef DAKKU_LOGGER_LOGGER_H_ #define DAKKU_LOGGER_LOGGER_H_ #include <logger/fwd.h> #include <spdlog/spdlog.h> #include <cstdlib> namespace dakku { class DAKKU_EXPORT_LOGGER Logger { public : static const Logger & get (); spdlog :: logger * handle () const { return _logger . get (); } private : explicit Logger ( std :: shared_ptr < spdlog :: logger > _logger ); std :: shared_ptr < spdlog :: logger > _logger ; }; #define DAKKU_ERR(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::err, __VA_ARGS__) #define DAKKU_INFO(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::info, __VA_ARGS__) #define DAKKU_WARN(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::warn, __VA_ARGS__) #ifdef DAKKU_BUILD_DEBUG #define DAKKU_DEBUG(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::debug, __VA_ARGS__) #else #define DAKKU_DEBUG(...) static_cast<void>(0) #endif #ifdef DAKKU_BUILD_CHECK #define DAKKU_CHECK(val, ...) \\ do { \\ if (!(val)) { \\ DAKKU_ERR(__VA_ARGS__); \\ std::exit(-1); \\ } \\ } while (0) #else #define DAKKU_CHECK(...) static_cast<void>(0) #endif } // namespace dakku #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"Source code"},{"location":"Files/math_2fwd_8h/","text":"src/math/fwd.h Namespaces Name dakku dakku namespace Defines Name DAKKU_EXPORT_MATH Macros Documentation define DAKKU_EXPORT_MATH #define DAKKU_EXPORT_MATH DAKKU_EXPORT Source code #ifndef DAKKU_MATH_FWD_H_ #define DAKKU_MATH_FWD_H_ #include <platform.h> #include <type_traits> #include <limits> #include <numbers> namespace dakku { #if DAKKU_BUILD_MODULE != DAKKU_MATH_MODULE #define DAKKU_EXPORT_MATH DAKKU_IMPORT #else #define DAKKU_EXPORT_MATH DAKKU_EXPORT #endif static constexpr float INF = std :: numeric_limits < float >:: infinity (); template < typename T > concept ArithmeticType = std :: is_arithmetic_v < std :: decay_t < T >> ; DAKKU_EXPORT_MATH void testMath (); } // namespace dakku #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"src/math/fwd.h"},{"location":"Files/math_2fwd_8h/#srcmathfwdh","text":"","title":"src/math/fwd.h"},{"location":"Files/math_2fwd_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/math_2fwd_8h/#defines","text":"Name DAKKU_EXPORT_MATH","title":"Defines"},{"location":"Files/math_2fwd_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/math_2fwd_8h/#define-dakku_export_math","text":"#define DAKKU_EXPORT_MATH DAKKU_EXPORT","title":"define DAKKU_EXPORT_MATH"},{"location":"Files/math_2fwd_8h/#source-code","text":"#ifndef DAKKU_MATH_FWD_H_ #define DAKKU_MATH_FWD_H_ #include <platform.h> #include <type_traits> #include <limits> #include <numbers> namespace dakku { #if DAKKU_BUILD_MODULE != DAKKU_MATH_MODULE #define DAKKU_EXPORT_MATH DAKKU_IMPORT #else #define DAKKU_EXPORT_MATH DAKKU_EXPORT #endif static constexpr float INF = std :: numeric_limits < float >:: infinity (); template < typename T > concept ArithmeticType = std :: is_arithmetic_v < std :: decay_t < T >> ; DAKKU_EXPORT_MATH void testMath (); } // namespace dakku #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"Source code"},{"location":"Files/platform_8h/","text":"src/platform.h Namespaces Name dakku dakku namespace Defines Name DAKKU_INLINE DAKKU_EXPORT DAKKU_IMPORT DAKKU_LOGGER_MODULE dakku logger module DAKKU_MATH_MODULE dakku math module DAKKU_CORE_MODULE dakku core module DAKKU_MAIN_MODULE dakku main module Macros Documentation define DAKKU_INLINE #define DAKKU_INLINE __attribute__((always_inline)) inline define DAKKU_EXPORT #define DAKKU_EXPORT __attribute__((visibility(\"default\"))) define DAKKU_IMPORT #define DAKKU_IMPORT define DAKKU_LOGGER_MODULE #define DAKKU_LOGGER_MODULE 1 dakku logger module define DAKKU_MATH_MODULE #define DAKKU_MATH_MODULE 2 dakku math module define DAKKU_CORE_MODULE #define DAKKU_CORE_MODULE 3 dakku core module define DAKKU_MAIN_MODULE #define DAKKU_MAIN_MODULE 10 dakku main module Source code #ifndef DAKKU_PLATFORM_H_ #define DAKKU_PLATFORM_H_ #if defined(_MSC_VER) #if !defined(_USE_MATH_DEFINES) #define _USE_MATH_DEFINES #endif #endif namespace dakku { #if defined(_MSC_VER) #define DAKKU_INLINE __forceinline #define DAKKU_EXPORT __declspec(dllexport) #define DAKKU_IMPORT __declspec(dllimport) #else #define DAKKU_INLINE __attribute__((always_inline)) inline #define DAKKU_EXPORT __attribute__((visibility(\"default\"))) #define DAKKU_IMPORT #endif #define DAKKU_LOGGER_MODULE 1 #define DAKKU_MATH_MODULE 2 #define DAKKU_CORE_MODULE 3 #define DAKKU_MAIN_MODULE 10 } // namespace dakku #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"src/platform.h"},{"location":"Files/platform_8h/#srcplatformh","text":"","title":"src/platform.h"},{"location":"Files/platform_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/platform_8h/#defines","text":"Name DAKKU_INLINE DAKKU_EXPORT DAKKU_IMPORT DAKKU_LOGGER_MODULE dakku logger module DAKKU_MATH_MODULE dakku math module DAKKU_CORE_MODULE dakku core module DAKKU_MAIN_MODULE dakku main module","title":"Defines"},{"location":"Files/platform_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/platform_8h/#define-dakku_inline","text":"#define DAKKU_INLINE __attribute__((always_inline)) inline","title":"define DAKKU_INLINE"},{"location":"Files/platform_8h/#define-dakku_export","text":"#define DAKKU_EXPORT __attribute__((visibility(\"default\")))","title":"define DAKKU_EXPORT"},{"location":"Files/platform_8h/#define-dakku_import","text":"#define DAKKU_IMPORT","title":"define DAKKU_IMPORT"},{"location":"Files/platform_8h/#define-dakku_logger_module","text":"#define DAKKU_LOGGER_MODULE 1 dakku logger module","title":"define DAKKU_LOGGER_MODULE"},{"location":"Files/platform_8h/#define-dakku_math_module","text":"#define DAKKU_MATH_MODULE 2 dakku math module","title":"define DAKKU_MATH_MODULE"},{"location":"Files/platform_8h/#define-dakku_core_module","text":"#define DAKKU_CORE_MODULE 3 dakku core module","title":"define DAKKU_CORE_MODULE"},{"location":"Files/platform_8h/#define-dakku_main_module","text":"#define DAKKU_MAIN_MODULE 10 dakku main module","title":"define DAKKU_MAIN_MODULE"},{"location":"Files/platform_8h/#source-code","text":"#ifndef DAKKU_PLATFORM_H_ #define DAKKU_PLATFORM_H_ #if defined(_MSC_VER) #if !defined(_USE_MATH_DEFINES) #define _USE_MATH_DEFINES #endif #endif namespace dakku { #if defined(_MSC_VER) #define DAKKU_INLINE __forceinline #define DAKKU_EXPORT __declspec(dllexport) #define DAKKU_IMPORT __declspec(dllimport) #else #define DAKKU_INLINE __attribute__((always_inline)) inline #define DAKKU_EXPORT __attribute__((visibility(\"default\"))) #define DAKKU_IMPORT #endif #define DAKKU_LOGGER_MODULE 1 #define DAKKU_MATH_MODULE 2 #define DAKKU_CORE_MODULE 3 #define DAKKU_MAIN_MODULE 10 } // namespace dakku #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"Source code"},{"location":"Files/vector__base_8h/","text":"src/math/vector_base.h Namespaces Name dakku dakku namespace Classes Name class dakku::VectorBase vector base class Source code #ifndef DAKKU_MATH_VECTOR_BASE_H_ #define DAKKU_MATH_VECTOR_BASE_H_ #include <math/fwd.h> #include <logger/logger.h> namespace dakku { template < ArithmeticType T , size_t size , typename Derived > class VectorBase { public : explicit VectorBase () : _data () {} template < ArithmeticType Arg > explicit VectorBase ( Arg value ) { set ( value ); } template < ArithmeticType ... Args > requires ( sizeof ...( Args ) == size ) explicit VectorBase ( Args && ... args ) { set ( std :: forward < Args > ( args )...); } template < ArithmeticType Arg > void set ( Arg value ) { for ( size_t i = 0 ; i < size ; ++ i ) _data [ i ] = value ; } template < ArithmeticType Arg > void setByIndex ( size_t index , Arg value ) { DAKKU_CHECK ( 0 <= index && index < size , \"index out of range: {} >= {}\" , index , size ); _data [ index ] = value ; } template < ArithmeticType ... Args , size_t ... Is > requires ( sizeof ...( Args ) == size ) void set ( std :: index_sequence < Is ... > , Args && ... args ) { ( setByIndex ( Is , std :: forward < Args > ( args )), ...); } template < ArithmeticType ... Args > requires ( sizeof ...( Args ) == size ) void set ( Args && ... args ) { set ( std :: index_sequence_for < Args ... > {}, std :: forward < Args > ( args )...); } protected : T _data [ size ]; }; } // namespace dakku #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"src/math/vector_base.h"},{"location":"Files/vector__base_8h/#srcmathvector_baseh","text":"","title":"src/math/vector_base.h"},{"location":"Files/vector__base_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/vector__base_8h/#classes","text":"Name class dakku::VectorBase vector base class","title":"Classes"},{"location":"Files/vector__base_8h/#source-code","text":"#ifndef DAKKU_MATH_VECTOR_BASE_H_ #define DAKKU_MATH_VECTOR_BASE_H_ #include <math/fwd.h> #include <logger/logger.h> namespace dakku { template < ArithmeticType T , size_t size , typename Derived > class VectorBase { public : explicit VectorBase () : _data () {} template < ArithmeticType Arg > explicit VectorBase ( Arg value ) { set ( value ); } template < ArithmeticType ... Args > requires ( sizeof ...( Args ) == size ) explicit VectorBase ( Args && ... args ) { set ( std :: forward < Args > ( args )...); } template < ArithmeticType Arg > void set ( Arg value ) { for ( size_t i = 0 ; i < size ; ++ i ) _data [ i ] = value ; } template < ArithmeticType Arg > void setByIndex ( size_t index , Arg value ) { DAKKU_CHECK ( 0 <= index && index < size , \"index out of range: {} >= {}\" , index , size ); _data [ index ] = value ; } template < ArithmeticType ... Args , size_t ... Is > requires ( sizeof ...( Args ) == size ) void set ( std :: index_sequence < Is ... > , Args && ... args ) { ( setByIndex ( Is , std :: forward < Args > ( args )), ...); } template < ArithmeticType ... Args > requires ( sizeof ...( Args ) == size ) void set ( Args && ... args ) { set ( std :: index_sequence_for < Args ... > {}, std :: forward < Args > ( args )...); } protected : T _data [ size ]; }; } // namespace dakku #endif Updated on 2022-04-05 at 16:20:06 +0000","title":"Source code"},{"location":"Modules/","text":"Modules Updated on 2022-04-05 at 16:20:06 +0000","title":"Modules"},{"location":"Modules/#modules","text":"Updated on 2022-04-05 at 16:20:06 +0000","title":"Modules"},{"location":"Namespaces/","text":"Namespaces namespace dakku dakku namespace Updated on 2022-04-05 at 16:20:06 +0000","title":"Namespaces"},{"location":"Namespaces/#namespaces","text":"namespace dakku dakku namespace Updated on 2022-04-05 at 16:20:06 +0000","title":"Namespaces"},{"location":"Namespaces/namespacedakku/","text":"dakku dakku namespace Classes Name class dakku::Logger logger class class dakku::VectorBase vector base class Functions Name DAKKU_EXPORT_MATH void testMath () Attributes Name class DAKKU_EXPORT_LOGGER Logger constexpr float INF infinity Functions Documentation function testMath DAKKU_EXPORT_MATH void testMath () Attributes Documentation variable Logger class DAKKU_EXPORT_LOGGER Logger ; variable INF static constexpr float INF = std :: numeric_limits < float >:: infinity (); infinity Updated on 2022-04-05 at 16:20:06 +0000","title":"dakku"},{"location":"Namespaces/namespacedakku/#dakku","text":"dakku namespace","title":"dakku"},{"location":"Namespaces/namespacedakku/#classes","text":"Name class dakku::Logger logger class class dakku::VectorBase vector base class","title":"Classes"},{"location":"Namespaces/namespacedakku/#functions","text":"Name DAKKU_EXPORT_MATH void testMath ()","title":"Functions"},{"location":"Namespaces/namespacedakku/#attributes","text":"Name class DAKKU_EXPORT_LOGGER Logger constexpr float INF infinity","title":"Attributes"},{"location":"Namespaces/namespacedakku/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespacedakku/#function-testmath","text":"DAKKU_EXPORT_MATH void testMath ()","title":"function testMath"},{"location":"Namespaces/namespacedakku/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"Namespaces/namespacedakku/#variable-logger","text":"class DAKKU_EXPORT_LOGGER Logger ;","title":"variable Logger"},{"location":"Namespaces/namespacedakku/#variable-inf","text":"static constexpr float INF = std :: numeric_limits < float >:: infinity (); infinity Updated on 2022-04-05 at 16:20:06 +0000","title":"variable INF"},{"location":"Pages/","text":"Pages page dakku documentation Updated on 2022-04-05 at 16:20:06 +0000","title":"Pages"},{"location":"Pages/#pages","text":"page dakku documentation Updated on 2022-04-05 at 16:20:06 +0000","title":"Pages"}]}