{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dakku documentation This is the documentation of dakku renderer. Vector Base Updated on 2022-04-06 at 09:38:39 +0000","title":"dakku documentation"},{"location":"#dakku-documentation","text":"This is the documentation of dakku renderer. Vector Base Updated on 2022-04-06 at 09:38:39 +0000","title":"dakku documentation"},{"location":"Classes/","text":"Classes namespace dakku dakku namespace class Logger logger class class Normal class Point class Vector class VectorBase vector base class Updated on 2022-04-06 at 09:38:39 +0000","title":"Classes"},{"location":"Classes/#classes","text":"namespace dakku dakku namespace class Logger logger class class Normal class Point class Vector class VectorBase vector base class Updated on 2022-04-06 at 09:38:39 +0000","title":"Classes"},{"location":"Classes/classdakku_1_1Logger/","text":"dakku::Logger logger class #include <logger.h> Public Functions Name const Logger & get () get logger instance spdlog::logger * handle () const get raw spdlog::logger handle Public Functions Documentation function get static const Logger & get () get logger instance Return : the logger instance function handle inline spdlog :: logger * handle () const get raw spdlog::logger handle Return : the corresponding spdlog::logger Updated on 2022-04-06 at 09:38:39 +0000","title":"dakku::Logger"},{"location":"Classes/classdakku_1_1Logger/#dakkulogger","text":"logger class #include <logger.h>","title":"dakku::Logger"},{"location":"Classes/classdakku_1_1Logger/#public-functions","text":"Name const Logger & get () get logger instance spdlog::logger * handle () const get raw spdlog::logger handle","title":"Public Functions"},{"location":"Classes/classdakku_1_1Logger/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classdakku_1_1Logger/#function-get","text":"static const Logger & get () get logger instance Return : the logger instance","title":"function get"},{"location":"Classes/classdakku_1_1Logger/#function-handle","text":"inline spdlog :: logger * handle () const get raw spdlog::logger handle Return : the corresponding spdlog::logger Updated on 2022-04-06 at 09:38:39 +0000","title":"function handle"},{"location":"Classes/classdakku_1_1Normal/","text":"dakku::Normal More... #include <vector.h> Inherits from dakku::VectorBase< T, S, Normal< T, S > > Additional inherited members Public Functions inherited from dakku::VectorBase< T, S, Normal< T, S > > Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType Other,typename OtherDerived > VectorBase (const VectorBase < Other, S, OtherDerived > & other) Construct a new Vector Base object with a vector expression. VectorBase (const VectorBase & other) VectorBase ( VectorBase && other) VectorBase & operator= (const VectorBase & other) VectorBase & operator= ( VectorBase && other) template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args template <ArithmeticType Other,typename OtherDerived > void set (const VectorBase < Other, S, OtherDerived > & rhs) set data by rhs 's data bool hasNaNs () const check whether there are nan components const T & get (size_t i) const get i'th component std::string toString () const convert vector to string size_t size () const size of the vector const T & operator[] (size_t i) const get i'th value T & operator[] (size_t i) get i'th value Derived operator- () const negation of the vector const Derived & derived () const get derived class Derived & derived () get derived class Derived & operator+= (const Derived & rhs) addition Protected Attributes inherited from dakku::VectorBase< T, S, Normal< T, S > > Name std::array< T, S > _data vector base data Friends inherited from dakku::VectorBase< T, S, Normal< T, S > > Name std::ostream & operator<< (std::ostream & os, const VectorBase & vec) output the vector Derived operator+ (const Derived & a, const Derived & b) addition Derived operator+ (const Derived & a, const U & b) addition Derived operator+ (const U & a, const Derived & b) addition Detailed Description template < ArithmeticType T , size_t S > class dakku :: Normal ; Updated on 2022-04-06 at 09:38:39 +0000","title":"dakku::Normal"},{"location":"Classes/classdakku_1_1Normal/#dakkunormal","text":"More... #include <vector.h> Inherits from dakku::VectorBase< T, S, Normal< T, S > >","title":"dakku::Normal"},{"location":"Classes/classdakku_1_1Normal/#additional-inherited-members","text":"Public Functions inherited from dakku::VectorBase< T, S, Normal< T, S > > Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType Other,typename OtherDerived > VectorBase (const VectorBase < Other, S, OtherDerived > & other) Construct a new Vector Base object with a vector expression. VectorBase (const VectorBase & other) VectorBase ( VectorBase && other) VectorBase & operator= (const VectorBase & other) VectorBase & operator= ( VectorBase && other) template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args template <ArithmeticType Other,typename OtherDerived > void set (const VectorBase < Other, S, OtherDerived > & rhs) set data by rhs 's data bool hasNaNs () const check whether there are nan components const T & get (size_t i) const get i'th component std::string toString () const convert vector to string size_t size () const size of the vector const T & operator[] (size_t i) const get i'th value T & operator[] (size_t i) get i'th value Derived operator- () const negation of the vector const Derived & derived () const get derived class Derived & derived () get derived class Derived & operator+= (const Derived & rhs) addition Protected Attributes inherited from dakku::VectorBase< T, S, Normal< T, S > > Name std::array< T, S > _data vector base data Friends inherited from dakku::VectorBase< T, S, Normal< T, S > > Name std::ostream & operator<< (std::ostream & os, const VectorBase & vec) output the vector Derived operator+ (const Derived & a, const Derived & b) addition Derived operator+ (const Derived & a, const U & b) addition Derived operator+ (const U & a, const Derived & b) addition","title":"Additional inherited members"},{"location":"Classes/classdakku_1_1Normal/#detailed-description","text":"template < ArithmeticType T , size_t S > class dakku :: Normal ; Updated on 2022-04-06 at 09:38:39 +0000","title":"Detailed Description"},{"location":"Classes/classdakku_1_1Point/","text":"dakku::Point More... #include <vector.h> Inherits from dakku::VectorBase< T, S, Point< T, S > > Additional inherited members Public Functions inherited from dakku::VectorBase< T, S, Point< T, S > > Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType Other,typename OtherDerived > VectorBase (const VectorBase < Other, S, OtherDerived > & other) Construct a new Vector Base object with a vector expression. VectorBase (const VectorBase & other) VectorBase ( VectorBase && other) VectorBase & operator= (const VectorBase & other) VectorBase & operator= ( VectorBase && other) template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args template <ArithmeticType Other,typename OtherDerived > void set (const VectorBase < Other, S, OtherDerived > & rhs) set data by rhs 's data bool hasNaNs () const check whether there are nan components const T & get (size_t i) const get i'th component std::string toString () const convert vector to string size_t size () const size of the vector const T & operator[] (size_t i) const get i'th value T & operator[] (size_t i) get i'th value Derived operator- () const negation of the vector const Derived & derived () const get derived class Derived & derived () get derived class Derived & operator+= (const Derived & rhs) addition Protected Attributes inherited from dakku::VectorBase< T, S, Point< T, S > > Name std::array< T, S > _data vector base data Friends inherited from dakku::VectorBase< T, S, Point< T, S > > Name std::ostream & operator<< (std::ostream & os, const VectorBase & vec) output the vector Derived operator+ (const Derived & a, const Derived & b) addition Derived operator+ (const Derived & a, const U & b) addition Derived operator+ (const U & a, const Derived & b) addition Detailed Description template < ArithmeticType T , size_t S > class dakku :: Point ; Updated on 2022-04-06 at 09:38:39 +0000","title":"dakku::Point"},{"location":"Classes/classdakku_1_1Point/#dakkupoint","text":"More... #include <vector.h> Inherits from dakku::VectorBase< T, S, Point< T, S > >","title":"dakku::Point"},{"location":"Classes/classdakku_1_1Point/#additional-inherited-members","text":"Public Functions inherited from dakku::VectorBase< T, S, Point< T, S > > Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType Other,typename OtherDerived > VectorBase (const VectorBase < Other, S, OtherDerived > & other) Construct a new Vector Base object with a vector expression. VectorBase (const VectorBase & other) VectorBase ( VectorBase && other) VectorBase & operator= (const VectorBase & other) VectorBase & operator= ( VectorBase && other) template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args template <ArithmeticType Other,typename OtherDerived > void set (const VectorBase < Other, S, OtherDerived > & rhs) set data by rhs 's data bool hasNaNs () const check whether there are nan components const T & get (size_t i) const get i'th component std::string toString () const convert vector to string size_t size () const size of the vector const T & operator[] (size_t i) const get i'th value T & operator[] (size_t i) get i'th value Derived operator- () const negation of the vector const Derived & derived () const get derived class Derived & derived () get derived class Derived & operator+= (const Derived & rhs) addition Protected Attributes inherited from dakku::VectorBase< T, S, Point< T, S > > Name std::array< T, S > _data vector base data Friends inherited from dakku::VectorBase< T, S, Point< T, S > > Name std::ostream & operator<< (std::ostream & os, const VectorBase & vec) output the vector Derived operator+ (const Derived & a, const Derived & b) addition Derived operator+ (const Derived & a, const U & b) addition Derived operator+ (const U & a, const Derived & b) addition","title":"Additional inherited members"},{"location":"Classes/classdakku_1_1Point/#detailed-description","text":"template < ArithmeticType T , size_t S > class dakku :: Point ; Updated on 2022-04-06 at 09:38:39 +0000","title":"Detailed Description"},{"location":"Classes/classdakku_1_1Vector/","text":"dakku::Vector More... #include <vector.h> Inherits from dakku::VectorBase< T, S, Vector< T, S > > Additional inherited members Public Functions inherited from dakku::VectorBase< T, S, Vector< T, S > > Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType Other,typename OtherDerived > VectorBase (const VectorBase < Other, S, OtherDerived > & other) Construct a new Vector Base object with a vector expression. VectorBase (const VectorBase & other) VectorBase ( VectorBase && other) VectorBase & operator= (const VectorBase & other) VectorBase & operator= ( VectorBase && other) template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args template <ArithmeticType Other,typename OtherDerived > void set (const VectorBase < Other, S, OtherDerived > & rhs) set data by rhs 's data bool hasNaNs () const check whether there are nan components const T & get (size_t i) const get i'th component std::string toString () const convert vector to string size_t size () const size of the vector const T & operator[] (size_t i) const get i'th value T & operator[] (size_t i) get i'th value Derived operator- () const negation of the vector const Derived & derived () const get derived class Derived & derived () get derived class Derived & operator+= (const Derived & rhs) addition Protected Attributes inherited from dakku::VectorBase< T, S, Vector< T, S > > Name std::array< T, S > _data vector base data Friends inherited from dakku::VectorBase< T, S, Vector< T, S > > Name std::ostream & operator<< (std::ostream & os, const VectorBase & vec) output the vector Derived operator+ (const Derived & a, const Derived & b) addition Derived operator+ (const Derived & a, const U & b) addition Derived operator+ (const U & a, const Derived & b) addition Detailed Description template < ArithmeticType T , size_t S > class dakku :: Vector ; Updated on 2022-04-06 at 09:38:39 +0000","title":"dakku::Vector"},{"location":"Classes/classdakku_1_1Vector/#dakkuvector","text":"More... #include <vector.h> Inherits from dakku::VectorBase< T, S, Vector< T, S > >","title":"dakku::Vector"},{"location":"Classes/classdakku_1_1Vector/#additional-inherited-members","text":"Public Functions inherited from dakku::VectorBase< T, S, Vector< T, S > > Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType Other,typename OtherDerived > VectorBase (const VectorBase < Other, S, OtherDerived > & other) Construct a new Vector Base object with a vector expression. VectorBase (const VectorBase & other) VectorBase ( VectorBase && other) VectorBase & operator= (const VectorBase & other) VectorBase & operator= ( VectorBase && other) template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args template <ArithmeticType Other,typename OtherDerived > void set (const VectorBase < Other, S, OtherDerived > & rhs) set data by rhs 's data bool hasNaNs () const check whether there are nan components const T & get (size_t i) const get i'th component std::string toString () const convert vector to string size_t size () const size of the vector const T & operator[] (size_t i) const get i'th value T & operator[] (size_t i) get i'th value Derived operator- () const negation of the vector const Derived & derived () const get derived class Derived & derived () get derived class Derived & operator+= (const Derived & rhs) addition Protected Attributes inherited from dakku::VectorBase< T, S, Vector< T, S > > Name std::array< T, S > _data vector base data Friends inherited from dakku::VectorBase< T, S, Vector< T, S > > Name std::ostream & operator<< (std::ostream & os, const VectorBase & vec) output the vector Derived operator+ (const Derived & a, const Derived & b) addition Derived operator+ (const Derived & a, const U & b) addition Derived operator+ (const U & a, const Derived & b) addition","title":"Additional inherited members"},{"location":"Classes/classdakku_1_1Vector/#detailed-description","text":"template < ArithmeticType T , size_t S > class dakku :: Vector ; Updated on 2022-04-06 at 09:38:39 +0000","title":"Detailed Description"},{"location":"Classes/classdakku_1_1VectorBase/","text":"dakku::VectorBase vector base class More... #include <vector_base.h> Public Functions Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType Other,typename OtherDerived > VectorBase (const VectorBase < Other, S, OtherDerived > & other) Construct a new Vector Base object with a vector expression. VectorBase (const VectorBase & other) VectorBase ( VectorBase && other) VectorBase & operator= (const VectorBase & other) VectorBase & operator= ( VectorBase && other) template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args template <ArithmeticType Other,typename OtherDerived > void set (const VectorBase < Other, S, OtherDerived > & rhs) set data by rhs 's data bool hasNaNs () const check whether there are nan components const T & get (size_t i) const get i'th component std::string toString () const convert vector to string size_t size () const size of the vector const T & operator[] (size_t i) const get i'th value T & operator[] (size_t i) get i'th value Derived operator- () const negation of the vector const Derived & derived () const get derived class Derived & derived () get derived class Derived & operator+= (const Derived & rhs) addition Protected Attributes Name std::array< T, S > _data vector base data Friends Name std::ostream & operator<< (std::ostream & os, const VectorBase & vec) output the vector Derived operator+ (const Derived & a, const Derived & b) addition Derived operator+ (const Derived & a, const U & b) addition Derived operator+ (const U & a, const Derived & b) addition Detailed Description template < ArithmeticType T , size_t S , typename Derived > class dakku :: VectorBase ; vector base class Template Parameters : T type size dimension of the vector Derived derived class type Public Functions Documentation function VectorBase inline explicit VectorBase () Construct a new Vector Base object with all components initialized to zero. function VectorBase template < ArithmeticType Arg > inline explicit VectorBase ( Arg value ) Construct a new Vector Base object with all components initialized to value Parameters : value init value Template Parameters : Arg value type function VectorBase template < ArithmeticType Other , typename OtherDerived > inline explicit VectorBase ( const VectorBase < Other , S , OtherDerived > & other ) Construct a new Vector Base object with a vector expression. Parameters : expr the given expression Template Parameters : Other OtherDerived Expr function VectorBase inline VectorBase ( const VectorBase & other ) function VectorBase inline VectorBase ( VectorBase && other ) function operator= inline VectorBase & operator = ( const VectorBase & other ) function operator= inline VectorBase & operator = ( VectorBase && other ) function VectorBase template < ArithmeticType ... Args > inline explicit VectorBase ( Args && ... args ) Construct a new Vector Base object with given values. Parameters : args init values Template Parameters : Args value types function set template < ArithmeticType Arg > inline void set ( Arg value ) set all components to value Parameters : value the given value Template Parameters : Arg value type function setByIndex template < ArithmeticType Arg > inline void setByIndex ( size_t index , Arg value ) set data[index] to value Parameters : index the index of the component value the given value Template Parameters : Arg value type function set template < ArithmeticType ... Args , size_t ... Is > inline void set ( std :: index_sequence < Is ... > , Args && ... args ) set data to args Parameters : args values Template Parameters : Args value types Is indices (generated by std::index_sequence_for) function set template < ArithmeticType ... Args > inline void set ( Args && ... args ) set data to args Parameters : args values Template Parameters : Args value types function set template < ArithmeticType Other , typename OtherDerived > inline void set ( const VectorBase < Other , S , OtherDerived > & rhs ) set data by rhs 's data Parameters : rhs the given vector Template Parameters : Other rhs type OtherDerived rhs derived type function hasNaNs inline bool hasNaNs () const check whether there are nan components Return : true vector contains nan false vector does not contain nans function get inline const T & get ( size_t i ) const get i'th component Parameters : i the index Return : the value function toString inline std :: string toString () const convert vector to string Return : the converted string function size inline size_t size () const size of the vector Return : size function operator[] inline const T & operator []( size_t i ) const get i'th value Parameters : i index Return : value function operator[] inline T & operator []( size_t i ) get i'th value Parameters : i index Return : value function operator- inline Derived operator - () const negation of the vector Return : \\(-\\vec v\\) function derived inline const Derived & derived () const get derived class function derived inline Derived & derived () get derived class function operator+= inline Derived & operator += ( const Derived & rhs ) addition Parameters : rhs another vector Return : this Protected Attributes Documentation variable _data std :: array < T , S > _data ; vector base data Friends friend operator<< friend std :: ostream & operator << ( std :: ostream & os , const VectorBase & vec ); output the vector Parameters : os ostream vec the vector to output Return : ostream friend operator+ friend Derived operator + ( const Derived & a , const Derived & b ); addition Parameters : a vector \\(\\vec a\\) b vector \\(\\vec b\\) Return : \\(\\vec a + \\vec b\\) friend operator+ friend Derived operator + ( const Derived & a , const U & b ); addition Parameters : a \\(\\vec a\\) b \\(bb\\) Return : elementwise add b friend operator+ friend Derived operator + ( const U & a , const Derived & b ); addition Parameters : a \\(aa\\) b \\(\\vec b\\) Return : elementwise add a Updated on 2022-04-06 at 09:38:39 +0000","title":"dakku::VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#dakkuvectorbase","text":"vector base class More... #include <vector_base.h>","title":"dakku::VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#public-functions","text":"Name VectorBase () Construct a new Vector Base object with all components initialized to zero. template <ArithmeticType Arg> VectorBase (Arg value) Construct a new Vector Base object with all components initialized to value template <ArithmeticType Other,typename OtherDerived > VectorBase (const VectorBase < Other, S, OtherDerived > & other) Construct a new Vector Base object with a vector expression. VectorBase (const VectorBase & other) VectorBase ( VectorBase && other) VectorBase & operator= (const VectorBase & other) VectorBase & operator= ( VectorBase && other) template <ArithmeticType... Args> VectorBase (Args &&... args) Construct a new Vector Base object with given values. template <ArithmeticType Arg> void set (Arg value) set all components to value template <ArithmeticType Arg> void setByIndex (size_t index, Arg value) set data[index] to value template <ArithmeticType... Args,size_t... Is> void set (std::index_sequence< Is... > , Args &&... args) set data to args template <ArithmeticType... Args> void set (Args &&... args) set data to args template <ArithmeticType Other,typename OtherDerived > void set (const VectorBase < Other, S, OtherDerived > & rhs) set data by rhs 's data bool hasNaNs () const check whether there are nan components const T & get (size_t i) const get i'th component std::string toString () const convert vector to string size_t size () const size of the vector const T & operator[] (size_t i) const get i'th value T & operator[] (size_t i) get i'th value Derived operator- () const negation of the vector const Derived & derived () const get derived class Derived & derived () get derived class Derived & operator+= (const Derived & rhs) addition","title":"Public Functions"},{"location":"Classes/classdakku_1_1VectorBase/#protected-attributes","text":"Name std::array< T, S > _data vector base data","title":"Protected Attributes"},{"location":"Classes/classdakku_1_1VectorBase/#friends","text":"Name std::ostream & operator<< (std::ostream & os, const VectorBase & vec) output the vector Derived operator+ (const Derived & a, const Derived & b) addition Derived operator+ (const Derived & a, const U & b) addition Derived operator+ (const U & a, const Derived & b) addition","title":"Friends"},{"location":"Classes/classdakku_1_1VectorBase/#detailed-description","text":"template < ArithmeticType T , size_t S , typename Derived > class dakku :: VectorBase ; vector base class Template Parameters : T type size dimension of the vector Derived derived class type","title":"Detailed Description"},{"location":"Classes/classdakku_1_1VectorBase/#public-functions-documentation","text":"","title":"Public Functions Documentation"},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase","text":"inline explicit VectorBase () Construct a new Vector Base object with all components initialized to zero.","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase_1","text":"template < ArithmeticType Arg > inline explicit VectorBase ( Arg value ) Construct a new Vector Base object with all components initialized to value Parameters : value init value Template Parameters : Arg value type","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase_2","text":"template < ArithmeticType Other , typename OtherDerived > inline explicit VectorBase ( const VectorBase < Other , S , OtherDerived > & other ) Construct a new Vector Base object with a vector expression. Parameters : expr the given expression Template Parameters : Other OtherDerived Expr","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase_3","text":"inline VectorBase ( const VectorBase & other )","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase_4","text":"inline VectorBase ( VectorBase && other )","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-operator","text":"inline VectorBase & operator = ( const VectorBase & other )","title":"function operator="},{"location":"Classes/classdakku_1_1VectorBase/#function-operator_1","text":"inline VectorBase & operator = ( VectorBase && other )","title":"function operator="},{"location":"Classes/classdakku_1_1VectorBase/#function-vectorbase_5","text":"template < ArithmeticType ... Args > inline explicit VectorBase ( Args && ... args ) Construct a new Vector Base object with given values. Parameters : args init values Template Parameters : Args value types","title":"function VectorBase"},{"location":"Classes/classdakku_1_1VectorBase/#function-set","text":"template < ArithmeticType Arg > inline void set ( Arg value ) set all components to value Parameters : value the given value Template Parameters : Arg value type","title":"function set"},{"location":"Classes/classdakku_1_1VectorBase/#function-setbyindex","text":"template < ArithmeticType Arg > inline void setByIndex ( size_t index , Arg value ) set data[index] to value Parameters : index the index of the component value the given value Template Parameters : Arg value type","title":"function setByIndex"},{"location":"Classes/classdakku_1_1VectorBase/#function-set_1","text":"template < ArithmeticType ... Args , size_t ... Is > inline void set ( std :: index_sequence < Is ... > , Args && ... args ) set data to args Parameters : args values Template Parameters : Args value types Is indices (generated by std::index_sequence_for)","title":"function set"},{"location":"Classes/classdakku_1_1VectorBase/#function-set_2","text":"template < ArithmeticType ... Args > inline void set ( Args && ... args ) set data to args Parameters : args values Template Parameters : Args value types","title":"function set"},{"location":"Classes/classdakku_1_1VectorBase/#function-set_3","text":"template < ArithmeticType Other , typename OtherDerived > inline void set ( const VectorBase < Other , S , OtherDerived > & rhs ) set data by rhs 's data Parameters : rhs the given vector Template Parameters : Other rhs type OtherDerived rhs derived type","title":"function set"},{"location":"Classes/classdakku_1_1VectorBase/#function-hasnans","text":"inline bool hasNaNs () const check whether there are nan components Return : true vector contains nan false vector does not contain nans","title":"function hasNaNs"},{"location":"Classes/classdakku_1_1VectorBase/#function-get","text":"inline const T & get ( size_t i ) const get i'th component Parameters : i the index Return : the value","title":"function get"},{"location":"Classes/classdakku_1_1VectorBase/#function-tostring","text":"inline std :: string toString () const convert vector to string Return : the converted string","title":"function toString"},{"location":"Classes/classdakku_1_1VectorBase/#function-size","text":"inline size_t size () const size of the vector Return : size","title":"function size"},{"location":"Classes/classdakku_1_1VectorBase/#function-operator_2","text":"inline const T & operator []( size_t i ) const get i'th value Parameters : i index Return : value","title":"function operator[]"},{"location":"Classes/classdakku_1_1VectorBase/#function-operator_3","text":"inline T & operator []( size_t i ) get i'th value Parameters : i index Return : value","title":"function operator[]"},{"location":"Classes/classdakku_1_1VectorBase/#function-operator-","text":"inline Derived operator - () const negation of the vector Return : \\(-\\vec v\\)","title":"function operator-"},{"location":"Classes/classdakku_1_1VectorBase/#function-derived","text":"inline const Derived & derived () const get derived class","title":"function derived"},{"location":"Classes/classdakku_1_1VectorBase/#function-derived_1","text":"inline Derived & derived () get derived class","title":"function derived"},{"location":"Classes/classdakku_1_1VectorBase/#function-operator_4","text":"inline Derived & operator += ( const Derived & rhs ) addition Parameters : rhs another vector Return : this","title":"function operator+="},{"location":"Classes/classdakku_1_1VectorBase/#protected-attributes-documentation","text":"","title":"Protected Attributes Documentation"},{"location":"Classes/classdakku_1_1VectorBase/#variable-_data","text":"std :: array < T , S > _data ; vector base data","title":"variable _data"},{"location":"Classes/classdakku_1_1VectorBase/#friends_1","text":"","title":"Friends"},{"location":"Classes/classdakku_1_1VectorBase/#friend-operator","text":"friend std :: ostream & operator << ( std :: ostream & os , const VectorBase & vec ); output the vector Parameters : os ostream vec the vector to output Return : ostream","title":"friend operator&lt;&lt;"},{"location":"Classes/classdakku_1_1VectorBase/#friend-operator_1","text":"friend Derived operator + ( const Derived & a , const Derived & b ); addition Parameters : a vector \\(\\vec a\\) b vector \\(\\vec b\\) Return : \\(\\vec a + \\vec b\\)","title":"friend operator+"},{"location":"Classes/classdakku_1_1VectorBase/#friend-operator_2","text":"friend Derived operator + ( const Derived & a , const U & b ); addition Parameters : a \\(\\vec a\\) b \\(bb\\) Return : elementwise add b","title":"friend operator+"},{"location":"Classes/classdakku_1_1VectorBase/#friend-operator_3","text":"friend Derived operator + ( const U & a , const Derived & b ); addition Parameters : a \\(aa\\) b \\(\\vec b\\) Return : elementwise add a Updated on 2022-04-06 at 09:38:39 +0000","title":"friend operator+"},{"location":"Examples/","text":"Examples Updated on 2022-04-06 at 09:38:39 +0000","title":"Examples"},{"location":"Examples/#examples","text":"Updated on 2022-04-06 at 09:38:39 +0000","title":"Examples"},{"location":"Files/","text":"Files dir src file src/platform.h dir src/core file src/core/fwd.h dir src/logger file src/logger/fwd.h file src/logger/logger.h dir src/math file src/math/fwd.h file src/math/vector.h file src/math/vector_base.h Updated on 2022-04-06 at 09:38:39 +0000","title":"Files"},{"location":"Files/#files","text":"dir src file src/platform.h dir src/core file src/core/fwd.h dir src/logger file src/logger/fwd.h file src/logger/logger.h dir src/math file src/math/fwd.h file src/math/vector.h file src/math/vector_base.h Updated on 2022-04-06 at 09:38:39 +0000","title":"Files"},{"location":"Files/core_2fwd_8h/","text":"src/core/fwd.h Functions Name DAKKU_EXPORT_CORE void test () Defines Name DAKKU_EXPORT_CORE Functions Documentation function test DAKKU_EXPORT_CORE void test () Macros Documentation define DAKKU_EXPORT_CORE #define DAKKU_EXPORT_CORE DAKKU_EXPORT Source code #ifndef DAKKU_CORE_FWD_H_ #define DAKKU_CORE_FWD_H_ #include <platform.h> #if DAKKU_BUILD_MODULE != DAKKU_CORE_MODULE #define DAKKU_EXPORT_CORE DAKKU_IMPORT #else #define DAKKU_EXPORT_CORE DAKKU_EXPORT #endif DAKKU_EXPORT_CORE void test (); #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"src/core/fwd.h"},{"location":"Files/core_2fwd_8h/#srccorefwdh","text":"","title":"src/core/fwd.h"},{"location":"Files/core_2fwd_8h/#functions","text":"Name DAKKU_EXPORT_CORE void test ()","title":"Functions"},{"location":"Files/core_2fwd_8h/#defines","text":"Name DAKKU_EXPORT_CORE","title":"Defines"},{"location":"Files/core_2fwd_8h/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Files/core_2fwd_8h/#function-test","text":"DAKKU_EXPORT_CORE void test ()","title":"function test"},{"location":"Files/core_2fwd_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/core_2fwd_8h/#define-dakku_export_core","text":"#define DAKKU_EXPORT_CORE DAKKU_EXPORT","title":"define DAKKU_EXPORT_CORE"},{"location":"Files/core_2fwd_8h/#source-code","text":"#ifndef DAKKU_CORE_FWD_H_ #define DAKKU_CORE_FWD_H_ #include <platform.h> #if DAKKU_BUILD_MODULE != DAKKU_CORE_MODULE #define DAKKU_EXPORT_CORE DAKKU_IMPORT #else #define DAKKU_EXPORT_CORE DAKKU_EXPORT #endif DAKKU_EXPORT_CORE void test (); #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"Source code"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/","text":"src Directories Name src/core src/logger src/math Files Name src/platform.h Updated on 2022-04-06 at 09:38:39 +0000","title":"src"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#src","text":"","title":"src"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#directories","text":"Name src/core src/logger src/math","title":"Directories"},{"location":"Files/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","text":"Name src/platform.h Updated on 2022-04-06 at 09:38:39 +0000","title":"Files"},{"location":"Files/dir_ae9a93452e2a84339148a16bcf2eb561/","text":"src/math Files Name src/math/fwd.h src/math/vector.h src/math/vector_base.h Updated on 2022-04-06 at 09:38:39 +0000","title":"src/math"},{"location":"Files/dir_ae9a93452e2a84339148a16bcf2eb561/#srcmath","text":"","title":"src/math"},{"location":"Files/dir_ae9a93452e2a84339148a16bcf2eb561/#files","text":"Name src/math/fwd.h src/math/vector.h src/math/vector_base.h Updated on 2022-04-06 at 09:38:39 +0000","title":"Files"},{"location":"Files/dir_aebb8dcc11953d78e620bbef0b9e2183/","text":"src/core Files Name src/core/fwd.h Updated on 2022-04-06 at 09:38:39 +0000","title":"src/core"},{"location":"Files/dir_aebb8dcc11953d78e620bbef0b9e2183/#srccore","text":"","title":"src/core"},{"location":"Files/dir_aebb8dcc11953d78e620bbef0b9e2183/#files","text":"Name src/core/fwd.h Updated on 2022-04-06 at 09:38:39 +0000","title":"Files"},{"location":"Files/dir_ffde1fbcaa8d6b0d34e29c3bddf7a801/","text":"src/logger Files Name src/logger/fwd.h src/logger/logger.h Updated on 2022-04-06 at 09:38:39 +0000","title":"src/logger"},{"location":"Files/dir_ffde1fbcaa8d6b0d34e29c3bddf7a801/#srclogger","text":"","title":"src/logger"},{"location":"Files/dir_ffde1fbcaa8d6b0d34e29c3bddf7a801/#files","text":"Name src/logger/fwd.h src/logger/logger.h Updated on 2022-04-06 at 09:38:39 +0000","title":"Files"},{"location":"Files/logger_2fwd_8h/","text":"src/logger/fwd.h Namespaces Name dakku dakku namespace Defines Name DAKKU_EXPORT_LOGGER Macros Documentation define DAKKU_EXPORT_LOGGER #define DAKKU_EXPORT_LOGGER DAKKU_EXPORT Source code #ifndef DAKKU_LOGGER_FWD_H_ #define DAKKU_LOGGER_FWD_H_ #include <platform.h> namespace dakku { #if DAKKU_BUILD_MODULE != DAKKU_LOGGER_MODULE #define DAKKU_EXPORT_LOGGER DAKKU_IMPORT #else #define DAKKU_EXPORT_LOGGER DAKKU_EXPORT #endif class DAKKU_EXPORT_LOGGER Logger ; } #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"src/logger/fwd.h"},{"location":"Files/logger_2fwd_8h/#srcloggerfwdh","text":"","title":"src/logger/fwd.h"},{"location":"Files/logger_2fwd_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/logger_2fwd_8h/#defines","text":"Name DAKKU_EXPORT_LOGGER","title":"Defines"},{"location":"Files/logger_2fwd_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/logger_2fwd_8h/#define-dakku_export_logger","text":"#define DAKKU_EXPORT_LOGGER DAKKU_EXPORT","title":"define DAKKU_EXPORT_LOGGER"},{"location":"Files/logger_2fwd_8h/#source-code","text":"#ifndef DAKKU_LOGGER_FWD_H_ #define DAKKU_LOGGER_FWD_H_ #include <platform.h> namespace dakku { #if DAKKU_BUILD_MODULE != DAKKU_LOGGER_MODULE #define DAKKU_EXPORT_LOGGER DAKKU_IMPORT #else #define DAKKU_EXPORT_LOGGER DAKKU_EXPORT #endif class DAKKU_EXPORT_LOGGER Logger ; } #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"Source code"},{"location":"Files/logger_8h/","text":"src/logger/logger.h Namespaces Name dakku dakku namespace Classes Name class dakku::Logger logger class Defines Name DAKKU_ERR (...) log error message DAKKU_INFO (...) log info message DAKKU_WARN (...) log warning message DAKKU_DEBUG (...) log debug message DAKKU_CHECK (...) check whether the condition val is true, if not log error messages Macros Documentation define DAKKU_ERR #define DAKKU_ERR( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: err , __VA_ARGS__ ) log error message define DAKKU_INFO #define DAKKU_INFO( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: info , __VA_ARGS__ ) log info message define DAKKU_WARN #define DAKKU_WARN( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: warn , __VA_ARGS__ ) log warning message define DAKKU_DEBUG #define DAKKU_DEBUG( ... ) static_cast < void > ( 0 ) log debug message define DAKKU_CHECK #define DAKKU_CHECK( ... ) static_cast < void > ( 0 ) check whether the condition val is true, if not log error messages Source code #ifndef DAKKU_LOGGER_LOGGER_H_ #define DAKKU_LOGGER_LOGGER_H_ #include <logger/fwd.h> #include <spdlog/spdlog.h> #include <spdlog/fmt/ostr.h> #include <cstdlib> namespace dakku { class DAKKU_EXPORT_LOGGER Logger { public : static const Logger & get (); [[ nodiscard ]] spdlog :: logger * handle () const { return _logger . get (); } private : explicit Logger ( std :: shared_ptr < spdlog :: logger > _logger ); std :: shared_ptr < spdlog :: logger > _logger ; }; #define DAKKU_ERR(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::err, __VA_ARGS__) #define DAKKU_INFO(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::info, __VA_ARGS__) #define DAKKU_WARN(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::warn, __VA_ARGS__) #ifdef DAKKU_BUILD_DEBUG #define DAKKU_DEBUG(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::debug, __VA_ARGS__) #else #define DAKKU_DEBUG(...) static_cast<void>(0) #endif #ifdef DAKKU_BUILD_CHECK #define DAKKU_CHECK(val, ...) \\ do { \\ if (!(val)) { \\ DAKKU_ERR(__VA_ARGS__); \\ std::exit(-1); \\ } \\ } while (0) #else #define DAKKU_CHECK(...) static_cast<void>(0) #endif } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"src/logger/logger.h"},{"location":"Files/logger_8h/#srcloggerloggerh","text":"","title":"src/logger/logger.h"},{"location":"Files/logger_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/logger_8h/#classes","text":"Name class dakku::Logger logger class","title":"Classes"},{"location":"Files/logger_8h/#defines","text":"Name DAKKU_ERR (...) log error message DAKKU_INFO (...) log info message DAKKU_WARN (...) log warning message DAKKU_DEBUG (...) log debug message DAKKU_CHECK (...) check whether the condition val is true, if not log error messages","title":"Defines"},{"location":"Files/logger_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/logger_8h/#define-dakku_err","text":"#define DAKKU_ERR( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: err , __VA_ARGS__ ) log error message","title":"define DAKKU_ERR"},{"location":"Files/logger_8h/#define-dakku_info","text":"#define DAKKU_INFO( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: info , __VA_ARGS__ ) log info message","title":"define DAKKU_INFO"},{"location":"Files/logger_8h/#define-dakku_warn","text":"#define DAKKU_WARN( ... ) SPDLOG_LOGGER_CALL ( Logger :: get (). handle (), spdlog :: level :: warn , __VA_ARGS__ ) log warning message","title":"define DAKKU_WARN"},{"location":"Files/logger_8h/#define-dakku_debug","text":"#define DAKKU_DEBUG( ... ) static_cast < void > ( 0 ) log debug message","title":"define DAKKU_DEBUG"},{"location":"Files/logger_8h/#define-dakku_check","text":"#define DAKKU_CHECK( ... ) static_cast < void > ( 0 ) check whether the condition val is true, if not log error messages","title":"define DAKKU_CHECK"},{"location":"Files/logger_8h/#source-code","text":"#ifndef DAKKU_LOGGER_LOGGER_H_ #define DAKKU_LOGGER_LOGGER_H_ #include <logger/fwd.h> #include <spdlog/spdlog.h> #include <spdlog/fmt/ostr.h> #include <cstdlib> namespace dakku { class DAKKU_EXPORT_LOGGER Logger { public : static const Logger & get (); [[ nodiscard ]] spdlog :: logger * handle () const { return _logger . get (); } private : explicit Logger ( std :: shared_ptr < spdlog :: logger > _logger ); std :: shared_ptr < spdlog :: logger > _logger ; }; #define DAKKU_ERR(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::err, __VA_ARGS__) #define DAKKU_INFO(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::info, __VA_ARGS__) #define DAKKU_WARN(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::warn, __VA_ARGS__) #ifdef DAKKU_BUILD_DEBUG #define DAKKU_DEBUG(...) \\ SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::debug, __VA_ARGS__) #else #define DAKKU_DEBUG(...) static_cast<void>(0) #endif #ifdef DAKKU_BUILD_CHECK #define DAKKU_CHECK(val, ...) \\ do { \\ if (!(val)) { \\ DAKKU_ERR(__VA_ARGS__); \\ std::exit(-1); \\ } \\ } while (0) #else #define DAKKU_CHECK(...) static_cast<void>(0) #endif } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"Source code"},{"location":"Files/math_2fwd_8h/","text":"src/math/fwd.h Namespaces Name dakku dakku namespace Defines Name DAKKU_EXPORT_MATH Macros Documentation define DAKKU_EXPORT_MATH #define DAKKU_EXPORT_MATH DAKKU_EXPORT Source code #ifndef DAKKU_MATH_FWD_H_ #define DAKKU_MATH_FWD_H_ #include <platform.h> #include <type_traits> #include <limits> #include <numbers> #include <cmath> namespace dakku { #if DAKKU_BUILD_MODULE != DAKKU_MATH_MODULE #define DAKKU_EXPORT_MATH DAKKU_IMPORT #else #define DAKKU_EXPORT_MATH DAKKU_EXPORT #endif static constexpr float INF = std :: numeric_limits < float >:: infinity (); template < typename T > concept ArithmeticType = std :: is_arithmetic_v < std :: decay_t < T >> ; template < typename T > requires std :: is_floating_point_v < T > DAKKU_INLINE bool isNaN ( T x ) { return std :: isnan ( x ); } template < typename T > requires std :: is_integral_v < T > DAKKU_INLINE bool isNaN ( T ) { return false ; } DAKKU_EXPORT_MATH void testMath (); } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"src/math/fwd.h"},{"location":"Files/math_2fwd_8h/#srcmathfwdh","text":"","title":"src/math/fwd.h"},{"location":"Files/math_2fwd_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/math_2fwd_8h/#defines","text":"Name DAKKU_EXPORT_MATH","title":"Defines"},{"location":"Files/math_2fwd_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/math_2fwd_8h/#define-dakku_export_math","text":"#define DAKKU_EXPORT_MATH DAKKU_EXPORT","title":"define DAKKU_EXPORT_MATH"},{"location":"Files/math_2fwd_8h/#source-code","text":"#ifndef DAKKU_MATH_FWD_H_ #define DAKKU_MATH_FWD_H_ #include <platform.h> #include <type_traits> #include <limits> #include <numbers> #include <cmath> namespace dakku { #if DAKKU_BUILD_MODULE != DAKKU_MATH_MODULE #define DAKKU_EXPORT_MATH DAKKU_IMPORT #else #define DAKKU_EXPORT_MATH DAKKU_EXPORT #endif static constexpr float INF = std :: numeric_limits < float >:: infinity (); template < typename T > concept ArithmeticType = std :: is_arithmetic_v < std :: decay_t < T >> ; template < typename T > requires std :: is_floating_point_v < T > DAKKU_INLINE bool isNaN ( T x ) { return std :: isnan ( x ); } template < typename T > requires std :: is_integral_v < T > DAKKU_INLINE bool isNaN ( T ) { return false ; } DAKKU_EXPORT_MATH void testMath (); } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"Source code"},{"location":"Files/platform_8h/","text":"src/platform.h Namespaces Name dakku dakku namespace Defines Name DAKKU_INLINE DAKKU_EXPORT DAKKU_IMPORT DAKKU_LOGGER_MODULE dakku logger module DAKKU_MATH_MODULE dakku math module DAKKU_CORE_MODULE dakku core module DAKKU_MAIN_MODULE dakku main module Macros Documentation define DAKKU_INLINE #define DAKKU_INLINE __attribute__((always_inline)) inline define DAKKU_EXPORT #define DAKKU_EXPORT __attribute__((visibility(\"default\"))) define DAKKU_IMPORT #define DAKKU_IMPORT define DAKKU_LOGGER_MODULE #define DAKKU_LOGGER_MODULE 1 dakku logger module define DAKKU_MATH_MODULE #define DAKKU_MATH_MODULE 2 dakku math module define DAKKU_CORE_MODULE #define DAKKU_CORE_MODULE 3 dakku core module define DAKKU_MAIN_MODULE #define DAKKU_MAIN_MODULE 10 dakku main module Source code #ifndef DAKKU_PLATFORM_H_ #define DAKKU_PLATFORM_H_ #if defined(_MSC_VER) #if !defined(_USE_MATH_DEFINES) #define _USE_MATH_DEFINES #endif #endif namespace dakku { #if defined(_MSC_VER) #define DAKKU_INLINE __forceinline #define DAKKU_EXPORT __declspec(dllexport) #define DAKKU_IMPORT __declspec(dllimport) #else #define DAKKU_INLINE __attribute__((always_inline)) inline #define DAKKU_EXPORT __attribute__((visibility(\"default\"))) #define DAKKU_IMPORT #endif #define DAKKU_LOGGER_MODULE 1 #define DAKKU_MATH_MODULE 2 #define DAKKU_CORE_MODULE 3 #define DAKKU_MAIN_MODULE 10 } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"src/platform.h"},{"location":"Files/platform_8h/#srcplatformh","text":"","title":"src/platform.h"},{"location":"Files/platform_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/platform_8h/#defines","text":"Name DAKKU_INLINE DAKKU_EXPORT DAKKU_IMPORT DAKKU_LOGGER_MODULE dakku logger module DAKKU_MATH_MODULE dakku math module DAKKU_CORE_MODULE dakku core module DAKKU_MAIN_MODULE dakku main module","title":"Defines"},{"location":"Files/platform_8h/#macros-documentation","text":"","title":"Macros Documentation"},{"location":"Files/platform_8h/#define-dakku_inline","text":"#define DAKKU_INLINE __attribute__((always_inline)) inline","title":"define DAKKU_INLINE"},{"location":"Files/platform_8h/#define-dakku_export","text":"#define DAKKU_EXPORT __attribute__((visibility(\"default\")))","title":"define DAKKU_EXPORT"},{"location":"Files/platform_8h/#define-dakku_import","text":"#define DAKKU_IMPORT","title":"define DAKKU_IMPORT"},{"location":"Files/platform_8h/#define-dakku_logger_module","text":"#define DAKKU_LOGGER_MODULE 1 dakku logger module","title":"define DAKKU_LOGGER_MODULE"},{"location":"Files/platform_8h/#define-dakku_math_module","text":"#define DAKKU_MATH_MODULE 2 dakku math module","title":"define DAKKU_MATH_MODULE"},{"location":"Files/platform_8h/#define-dakku_core_module","text":"#define DAKKU_CORE_MODULE 3 dakku core module","title":"define DAKKU_CORE_MODULE"},{"location":"Files/platform_8h/#define-dakku_main_module","text":"#define DAKKU_MAIN_MODULE 10 dakku main module","title":"define DAKKU_MAIN_MODULE"},{"location":"Files/platform_8h/#source-code","text":"#ifndef DAKKU_PLATFORM_H_ #define DAKKU_PLATFORM_H_ #if defined(_MSC_VER) #if !defined(_USE_MATH_DEFINES) #define _USE_MATH_DEFINES #endif #endif namespace dakku { #if defined(_MSC_VER) #define DAKKU_INLINE __forceinline #define DAKKU_EXPORT __declspec(dllexport) #define DAKKU_IMPORT __declspec(dllimport) #else #define DAKKU_INLINE __attribute__((always_inline)) inline #define DAKKU_EXPORT __attribute__((visibility(\"default\"))) #define DAKKU_IMPORT #endif #define DAKKU_LOGGER_MODULE 1 #define DAKKU_MATH_MODULE 2 #define DAKKU_CORE_MODULE 3 #define DAKKU_MAIN_MODULE 10 } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"Source code"},{"location":"Files/vector_8h/","text":"src/math/vector.h Namespaces Name dakku dakku namespace Classes Name class dakku::Vector class dakku::Point class dakku::Normal Source code #ifndef DAKKU_MATH_VECTOR_H_ #define DAKKU_MATH_VECTOR_H_ #include <math/vector_base.h> namespace dakku { template < ArithmeticType T , size_t S > class Vector : public VectorBase < T , S , Vector < T , S >> { public : using VectorBase < T , S , Vector < T , S >>:: VectorBase ; }; template < ArithmeticType T , size_t S > class Point : public VectorBase < T , S , Point < T , S >> { public : using VectorBase < T , S , Point < T , S >>:: VectorBase ; }; template < ArithmeticType T , size_t S > class Normal : public VectorBase < T , S , Normal < T , S >> { public : using VectorBase < T , S , Normal < T , S >>:: VectorBase ; }; template < ArithmeticType T > using Vector2 = Vector < T , 2 > ; template < ArithmeticType T > using Vector3 = Vector < T , 3 > ; using Vector2f = Vector2 < float > ; using Vector3f = Vector3 < float > ; template < ArithmeticType T > using Point2 = Point < T , 2 > ; template < ArithmeticType T > using Point3 = Point < T , 3 > ; using Point2f = Point2 < float > ; using Point3f = Point3 < float > ; template < ArithmeticType T > using Normal3 = Normal < T , 3 > ; using Normal3f = Normal3 < float > ; } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"src/math/vector.h"},{"location":"Files/vector_8h/#srcmathvectorh","text":"","title":"src/math/vector.h"},{"location":"Files/vector_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/vector_8h/#classes","text":"Name class dakku::Vector class dakku::Point class dakku::Normal","title":"Classes"},{"location":"Files/vector_8h/#source-code","text":"#ifndef DAKKU_MATH_VECTOR_H_ #define DAKKU_MATH_VECTOR_H_ #include <math/vector_base.h> namespace dakku { template < ArithmeticType T , size_t S > class Vector : public VectorBase < T , S , Vector < T , S >> { public : using VectorBase < T , S , Vector < T , S >>:: VectorBase ; }; template < ArithmeticType T , size_t S > class Point : public VectorBase < T , S , Point < T , S >> { public : using VectorBase < T , S , Point < T , S >>:: VectorBase ; }; template < ArithmeticType T , size_t S > class Normal : public VectorBase < T , S , Normal < T , S >> { public : using VectorBase < T , S , Normal < T , S >>:: VectorBase ; }; template < ArithmeticType T > using Vector2 = Vector < T , 2 > ; template < ArithmeticType T > using Vector3 = Vector < T , 3 > ; using Vector2f = Vector2 < float > ; using Vector3f = Vector3 < float > ; template < ArithmeticType T > using Point2 = Point < T , 2 > ; template < ArithmeticType T > using Point3 = Point < T , 3 > ; using Point2f = Point2 < float > ; using Point3f = Point3 < float > ; template < ArithmeticType T > using Normal3 = Normal < T , 3 > ; using Normal3f = Normal3 < float > ; } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"Source code"},{"location":"Files/vector__base_8h/","text":"src/math/vector_base.h Namespaces Name dakku dakku namespace Classes Name class dakku::VectorBase vector base class Source code #ifndef DAKKU_MATH_VECTOR_BASE_H_ #define DAKKU_MATH_VECTOR_BASE_H_ #include <math/fwd.h> #include <logger/logger.h> #include <array> #include <algorithm> #include <string> #include <ostream> namespace dakku { template < ArithmeticType T , size_t S , typename Derived > class VectorBase { public : explicit VectorBase () : _data () {} template < ArithmeticType Arg > explicit VectorBase ( Arg value ) { set ( value ); DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); } template < ArithmeticType Other , typename OtherDerived > explicit VectorBase ( const VectorBase < Other , S , OtherDerived > & other ) { set ( other ); DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); } VectorBase ( const VectorBase & other ) : _data ( other . _data ) { DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); } VectorBase ( VectorBase && other ) noexcept : _data ( std :: move ( other . _data )) { DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); } VectorBase & operator = ( const VectorBase & other ) { if ( this == & other ) return * this ; _data = other . _data ; DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); return * this ; } VectorBase & operator = ( VectorBase && other ) noexcept { if ( this == & other ) return * this ; _data = std :: move ( other . _data ); DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); return * this ; } template < ArithmeticType ... Args > requires ( sizeof ...( Args ) == S ) explicit VectorBase ( Args && ... args ) { set ( std :: forward < Args > ( args )...); } template < ArithmeticType Arg > void set ( Arg value ) { _data . fill ( static_cast < T > ( value )); } template < ArithmeticType Arg > void setByIndex ( size_t index , Arg value ) { DAKKU_CHECK ( 0 <= index && index < S , \"index out of range: {} >= {}\" , index , S ); _data [ index ] = static_cast < T > ( value ); } template < ArithmeticType ... Args , size_t ... Is > requires ( sizeof ...( Args ) == S ) void set ( std :: index_sequence < Is ... > , Args && ... args ) { ( setByIndex ( Is , std :: forward < Args > ( args )), ...); } template < ArithmeticType ... Args > requires ( sizeof ...( Args ) == S ) void set ( Args && ... args ) { set ( std :: index_sequence_for < Args ... > {}, std :: forward < Args > ( args )...); } template < ArithmeticType Other , typename OtherDerived > void set ( const VectorBase < Other , S , OtherDerived > & rhs ) { for ( size_t i = 0 ; i < S ; ++ i ) _data [ i ] = static_cast < T > ( rhs [ i ]); } [[ nodiscard ]] bool hasNaNs () const { return std :: any_of ( std :: begin ( _data ), std :: end ( _data ), []( T x ) { return isNaN ( x ); }); } const T & get ( size_t i ) const { return _data [ i ]; } [[ nodiscard ]] std :: string toString () const { std :: string ret { \"[\" }; for ( size_t i = 0 ; i < _data . size (); ++ i ) { ret += std :: to_string ( _data [ i ]); if ( i + 1 != _data . size ()) ret += \", \" ; } return ret + \"]\" ; } friend std :: ostream & operator << ( std :: ostream & os , const VectorBase & vec ) { return os << vec . toString (); } [[ nodiscard ]] size_t size () const { return S ; } const T & operator []( size_t i ) const { return _data [ i ]; } T & operator []( size_t i ) { return const_cast < T &> ( static_cast < const VectorBase &> ( * this )[ i ]); } Derived operator - () const { Derived ret = * this ; for ( size_t i = 0 ; i < S ; ++ i ) ret [ i ] = - ret [ i ]; return ret ; } const Derived & derived () const { return static_cast < const Derived &> ( * this ); } Derived & derived () { return const_cast < Derived &> ( static_cast < const VectorBase &> ( * this ). derived ()); } Derived & operator += ( const Derived & rhs ) { for ( size_t i = 0 ; i < S ; ++ i ) _data [ i ] += rhs [ i ]; return derived (); } friend Derived operator + ( const Derived & a , const Derived & b ) { Derived ret = a ; ret += b ; return ret ; } template < ArithmeticType U > friend Derived operator + ( const Derived & a , const U & b ) { return a + Derived ( b ); } template < ArithmeticType U > friend Derived operator + ( const U & a , const Derived & b ) { return Derived ( a ) + b ; } protected : std :: array < T , S > _data ; }; } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"src/math/vector_base.h"},{"location":"Files/vector__base_8h/#srcmathvector_baseh","text":"","title":"src/math/vector_base.h"},{"location":"Files/vector__base_8h/#namespaces","text":"Name dakku dakku namespace","title":"Namespaces"},{"location":"Files/vector__base_8h/#classes","text":"Name class dakku::VectorBase vector base class","title":"Classes"},{"location":"Files/vector__base_8h/#source-code","text":"#ifndef DAKKU_MATH_VECTOR_BASE_H_ #define DAKKU_MATH_VECTOR_BASE_H_ #include <math/fwd.h> #include <logger/logger.h> #include <array> #include <algorithm> #include <string> #include <ostream> namespace dakku { template < ArithmeticType T , size_t S , typename Derived > class VectorBase { public : explicit VectorBase () : _data () {} template < ArithmeticType Arg > explicit VectorBase ( Arg value ) { set ( value ); DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); } template < ArithmeticType Other , typename OtherDerived > explicit VectorBase ( const VectorBase < Other , S , OtherDerived > & other ) { set ( other ); DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); } VectorBase ( const VectorBase & other ) : _data ( other . _data ) { DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); } VectorBase ( VectorBase && other ) noexcept : _data ( std :: move ( other . _data )) { DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); } VectorBase & operator = ( const VectorBase & other ) { if ( this == & other ) return * this ; _data = other . _data ; DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); return * this ; } VectorBase & operator = ( VectorBase && other ) noexcept { if ( this == & other ) return * this ; _data = std :: move ( other . _data ); DAKKU_CHECK ( ! hasNaNs (), \"has nan\" ); return * this ; } template < ArithmeticType ... Args > requires ( sizeof ...( Args ) == S ) explicit VectorBase ( Args && ... args ) { set ( std :: forward < Args > ( args )...); } template < ArithmeticType Arg > void set ( Arg value ) { _data . fill ( static_cast < T > ( value )); } template < ArithmeticType Arg > void setByIndex ( size_t index , Arg value ) { DAKKU_CHECK ( 0 <= index && index < S , \"index out of range: {} >= {}\" , index , S ); _data [ index ] = static_cast < T > ( value ); } template < ArithmeticType ... Args , size_t ... Is > requires ( sizeof ...( Args ) == S ) void set ( std :: index_sequence < Is ... > , Args && ... args ) { ( setByIndex ( Is , std :: forward < Args > ( args )), ...); } template < ArithmeticType ... Args > requires ( sizeof ...( Args ) == S ) void set ( Args && ... args ) { set ( std :: index_sequence_for < Args ... > {}, std :: forward < Args > ( args )...); } template < ArithmeticType Other , typename OtherDerived > void set ( const VectorBase < Other , S , OtherDerived > & rhs ) { for ( size_t i = 0 ; i < S ; ++ i ) _data [ i ] = static_cast < T > ( rhs [ i ]); } [[ nodiscard ]] bool hasNaNs () const { return std :: any_of ( std :: begin ( _data ), std :: end ( _data ), []( T x ) { return isNaN ( x ); }); } const T & get ( size_t i ) const { return _data [ i ]; } [[ nodiscard ]] std :: string toString () const { std :: string ret { \"[\" }; for ( size_t i = 0 ; i < _data . size (); ++ i ) { ret += std :: to_string ( _data [ i ]); if ( i + 1 != _data . size ()) ret += \", \" ; } return ret + \"]\" ; } friend std :: ostream & operator << ( std :: ostream & os , const VectorBase & vec ) { return os << vec . toString (); } [[ nodiscard ]] size_t size () const { return S ; } const T & operator []( size_t i ) const { return _data [ i ]; } T & operator []( size_t i ) { return const_cast < T &> ( static_cast < const VectorBase &> ( * this )[ i ]); } Derived operator - () const { Derived ret = * this ; for ( size_t i = 0 ; i < S ; ++ i ) ret [ i ] = - ret [ i ]; return ret ; } const Derived & derived () const { return static_cast < const Derived &> ( * this ); } Derived & derived () { return const_cast < Derived &> ( static_cast < const VectorBase &> ( * this ). derived ()); } Derived & operator += ( const Derived & rhs ) { for ( size_t i = 0 ; i < S ; ++ i ) _data [ i ] += rhs [ i ]; return derived (); } friend Derived operator + ( const Derived & a , const Derived & b ) { Derived ret = a ; ret += b ; return ret ; } template < ArithmeticType U > friend Derived operator + ( const Derived & a , const U & b ) { return a + Derived ( b ); } template < ArithmeticType U > friend Derived operator + ( const U & a , const Derived & b ) { return Derived ( a ) + b ; } protected : std :: array < T , S > _data ; }; } // namespace dakku #endif Updated on 2022-04-06 at 09:38:39 +0000","title":"Source code"},{"location":"Modules/","text":"Modules Updated on 2022-04-06 at 09:38:39 +0000","title":"Modules"},{"location":"Modules/#modules","text":"Updated on 2022-04-06 at 09:38:39 +0000","title":"Modules"},{"location":"Namespaces/","text":"Namespaces namespace dakku dakku namespace Updated on 2022-04-06 at 09:38:39 +0000","title":"Namespaces"},{"location":"Namespaces/#namespaces","text":"namespace dakku dakku namespace Updated on 2022-04-06 at 09:38:39 +0000","title":"Namespaces"},{"location":"Namespaces/namespacedakku/","text":"dakku dakku namespace Classes Name class dakku::Logger logger class class dakku::Normal class dakku::Point class dakku::Vector class dakku::VectorBase vector base class Types Name template <ArithmeticType T> using Vector < T, 2 > Vector2 template <ArithmeticType T> using Vector < T, 3 > Vector3 using Vector2 < float > Vector2f using Vector3 < float > Vector3f template <ArithmeticType T> using Point < T, 2 > Point2 template <ArithmeticType T> using Point < T, 3 > Point3 using Point2 < float > Point2f using Point3 < float > Point3f template <ArithmeticType T> using Normal < T, 3 > Normal3 using Normal3 < float > Normal3f Functions Name template <typename T > DAKKU_INLINE bool isNaN (T x) check whether x is not a number template <typename T > DAKKU_INLINE bool isNaN (T ) check whether x is not a number DAKKU_EXPORT_MATH void testMath () Attributes Name class DAKKU_EXPORT_LOGGER Logger constexpr float INF infinity Types Documentation using Vector2 template < ArithmeticType T > using dakku :: Vector2 = typedef Vector < T , 2 > ; using Vector3 template < ArithmeticType T > using dakku :: Vector3 = typedef Vector < T , 3 > ; using Vector2f using dakku :: Vector2f = typedef Vector2 < float > ; using Vector3f using dakku :: Vector3f = typedef Vector3 < float > ; using Point2 template < ArithmeticType T > using dakku :: Point2 = typedef Point < T , 2 > ; using Point3 template < ArithmeticType T > using dakku :: Point3 = typedef Point < T , 3 > ; using Point2f using dakku :: Point2f = typedef Point2 < float > ; using Point3f using dakku :: Point3f = typedef Point3 < float > ; using Normal3 template < ArithmeticType T > using dakku :: Normal3 = typedef Normal < T , 3 > ; using Normal3f using dakku :: Normal3f = typedef Normal3 < float > ; Functions Documentation function isNaN template < typename T > DAKKU_INLINE bool isNaN ( T x ) check whether x is not a number Parameters : x given value Template Parameters : T type (floating point) Return : whether x is nan function isNaN template < typename T > DAKKU_INLINE bool isNaN ( T ) check whether x is not a number Template Parameters : T type (integer) Return : false (all integers are not nans) function testMath DAKKU_EXPORT_MATH void testMath () Attributes Documentation variable Logger class DAKKU_EXPORT_LOGGER Logger ; variable INF static constexpr float INF = std :: numeric_limits < float >:: infinity (); infinity Updated on 2022-04-06 at 09:38:39 +0000","title":"dakku"},{"location":"Namespaces/namespacedakku/#dakku","text":"dakku namespace","title":"dakku"},{"location":"Namespaces/namespacedakku/#classes","text":"Name class dakku::Logger logger class class dakku::Normal class dakku::Point class dakku::Vector class dakku::VectorBase vector base class","title":"Classes"},{"location":"Namespaces/namespacedakku/#types","text":"Name template <ArithmeticType T> using Vector < T, 2 > Vector2 template <ArithmeticType T> using Vector < T, 3 > Vector3 using Vector2 < float > Vector2f using Vector3 < float > Vector3f template <ArithmeticType T> using Point < T, 2 > Point2 template <ArithmeticType T> using Point < T, 3 > Point3 using Point2 < float > Point2f using Point3 < float > Point3f template <ArithmeticType T> using Normal < T, 3 > Normal3 using Normal3 < float > Normal3f","title":"Types"},{"location":"Namespaces/namespacedakku/#functions","text":"Name template <typename T > DAKKU_INLINE bool isNaN (T x) check whether x is not a number template <typename T > DAKKU_INLINE bool isNaN (T ) check whether x is not a number DAKKU_EXPORT_MATH void testMath ()","title":"Functions"},{"location":"Namespaces/namespacedakku/#attributes","text":"Name class DAKKU_EXPORT_LOGGER Logger constexpr float INF infinity","title":"Attributes"},{"location":"Namespaces/namespacedakku/#types-documentation","text":"","title":"Types Documentation"},{"location":"Namespaces/namespacedakku/#using-vector2","text":"template < ArithmeticType T > using dakku :: Vector2 = typedef Vector < T , 2 > ;","title":"using Vector2"},{"location":"Namespaces/namespacedakku/#using-vector3","text":"template < ArithmeticType T > using dakku :: Vector3 = typedef Vector < T , 3 > ;","title":"using Vector3"},{"location":"Namespaces/namespacedakku/#using-vector2f","text":"using dakku :: Vector2f = typedef Vector2 < float > ;","title":"using Vector2f"},{"location":"Namespaces/namespacedakku/#using-vector3f","text":"using dakku :: Vector3f = typedef Vector3 < float > ;","title":"using Vector3f"},{"location":"Namespaces/namespacedakku/#using-point2","text":"template < ArithmeticType T > using dakku :: Point2 = typedef Point < T , 2 > ;","title":"using Point2"},{"location":"Namespaces/namespacedakku/#using-point3","text":"template < ArithmeticType T > using dakku :: Point3 = typedef Point < T , 3 > ;","title":"using Point3"},{"location":"Namespaces/namespacedakku/#using-point2f","text":"using dakku :: Point2f = typedef Point2 < float > ;","title":"using Point2f"},{"location":"Namespaces/namespacedakku/#using-point3f","text":"using dakku :: Point3f = typedef Point3 < float > ;","title":"using Point3f"},{"location":"Namespaces/namespacedakku/#using-normal3","text":"template < ArithmeticType T > using dakku :: Normal3 = typedef Normal < T , 3 > ;","title":"using Normal3"},{"location":"Namespaces/namespacedakku/#using-normal3f","text":"using dakku :: Normal3f = typedef Normal3 < float > ;","title":"using Normal3f"},{"location":"Namespaces/namespacedakku/#functions-documentation","text":"","title":"Functions Documentation"},{"location":"Namespaces/namespacedakku/#function-isnan","text":"template < typename T > DAKKU_INLINE bool isNaN ( T x ) check whether x is not a number Parameters : x given value Template Parameters : T type (floating point) Return : whether x is nan","title":"function isNaN"},{"location":"Namespaces/namespacedakku/#function-isnan_1","text":"template < typename T > DAKKU_INLINE bool isNaN ( T ) check whether x is not a number Template Parameters : T type (integer) Return : false (all integers are not nans)","title":"function isNaN"},{"location":"Namespaces/namespacedakku/#function-testmath","text":"DAKKU_EXPORT_MATH void testMath ()","title":"function testMath"},{"location":"Namespaces/namespacedakku/#attributes-documentation","text":"","title":"Attributes Documentation"},{"location":"Namespaces/namespacedakku/#variable-logger","text":"class DAKKU_EXPORT_LOGGER Logger ;","title":"variable Logger"},{"location":"Namespaces/namespacedakku/#variable-inf","text":"static constexpr float INF = std :: numeric_limits < float >:: infinity (); infinity Updated on 2022-04-06 at 09:38:39 +0000","title":"variable INF"},{"location":"Pages/","text":"Pages page dakku documentation page Vector Base Updated on 2022-04-06 at 09:38:39 +0000","title":"Pages"},{"location":"Pages/#pages","text":"page dakku documentation page Vector Base Updated on 2022-04-06 at 09:38:39 +0000","title":"Pages"},{"location":"Pages/vector_base/","text":"Vector Base dakku currently use naive implementation, may use intrinsics and expression templates later. Updated on 2022-04-06 at 09:38:39 +0000","title":"Vector Base"},{"location":"Pages/vector_base/#vector-base","text":"dakku currently use naive implementation, may use intrinsics and expression templates later. Updated on 2022-04-06 at 09:38:39 +0000","title":"Vector Base"}]}