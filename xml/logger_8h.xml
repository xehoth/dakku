<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="logger_8h" kind="file" language="C++">
    <compoundname>logger.h</compoundname>
    <includes refid="fwd_8h" local="no">core/fwd.h</includes>
    <includes local="no">spdlog/spdlog.h</includes>
    <includes local="no">spdlog/fmt/ostr.h</includes>
    <includes local="no">cstdlib</includes>
    <includedby refid="vector__base_8h" local="no">src/core/vector_base.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>core/fwd.h</label>
        <link refid="fwd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/core/logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="10">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="6">
        <label>numbers</label>
      </node>
      <node id="9">
        <label>spdlog/fmt/ostr.h</label>
      </node>
      <node id="8">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="4">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="4">
        <label>src/core/bounds.h</label>
        <link refid="bounds_8h"/>
      </node>
      <node id="1">
        <label>src/core/logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/core/property.h</label>
        <link refid="property_8h"/>
      </node>
      <node id="6">
        <label>src/core/ray.h</label>
        <link refid="ray_8h"/>
      </node>
      <node id="7">
        <label>src/core/transform.h</label>
        <link refid="transform_8h"/>
      </node>
      <node id="3">
        <label>src/core/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/core/vector_base.h</label>
        <link refid="vector__base_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classdakku_1_1Logger" prot="public">dakku::Logger</innerclass>
    <innernamespace refid="namespacedakku">dakku</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="logger_8h_1a9edd762e54e3ce43a70ddfe81b6e2fc5" prot="public" static="no">
        <name>DAKKU_ERR</name>
        <param><defname>...</defname></param>
        <initializer>  SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::err, __VA_ARGS__)</initializer>
        <briefdescription>
<para>log error message </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/logger.h" line="43" column="9" bodyfile="src/core/logger.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="logger_8h_1a845073641399be84136c0143bedbde77" prot="public" static="no">
        <name>DAKKU_INFO</name>
        <param><defname>...</defname></param>
        <initializer>  SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::info, __VA_ARGS__)</initializer>
        <briefdescription>
<para>log info message </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/logger.h" line="46" column="9" bodyfile="src/core/logger.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="logger_8h_1a614d277e34773e7302c6a2cda6909867" prot="public" static="no">
        <name>DAKKU_WARN</name>
        <param><defname>...</defname></param>
        <initializer>  SPDLOG_LOGGER_CALL(Logger::get().handle(), spdlog::level::warn, __VA_ARGS__)</initializer>
        <briefdescription>
<para>log warning message </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/logger.h" line="49" column="9" bodyfile="src/core/logger.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="logger_8h_1a9c5edb9052d4e1a515276aef0afef3e3" prot="public" static="no">
        <name>DAKKU_DEBUG</name>
        <param><defname>...</defname></param>
        <initializer>static_cast&lt;void&gt;(0)</initializer>
        <briefdescription>
<para>log debug message </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/logger.h" line="57" column="9" bodyfile="src/core/logger.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" prot="public" static="no">
        <name>DAKKU_CHECK</name>
        <param><defname>...</defname></param>
        <initializer>static_cast&lt;void&gt;(0)</initializer>
        <briefdescription>
<para>check whether the condition <computeroutput>val</computeroutput> is true, if not log error messages </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/logger.h" line="71" column="9" bodyfile="src/core/logger.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DAKKU_CORE_LOGGER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DAKKU_CORE_LOGGER_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="fwd_8h" kindref="compound">core/fwd.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/spdlog.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;spdlog/fmt/ostr.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdlib&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedakku" kindref="compound">dakku</ref><sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="14" refid="classdakku_1_1Logger" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="fwd_8h_1ab23d79fec91df808d83b4f132f77eb56" kindref="member">DAKKU_EXPORT_CORE</ref><sp/><ref refid="classdakku_1_1Logger" kindref="compound">Logger</ref><sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="21" refid="classdakku_1_1Logger_1a75e95ca57e099bb7992724feec106edf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Logger" kindref="compound">Logger</ref><sp/>&amp;<ref refid="classdakku_1_1Logger_1a75e95ca57e099bb7992724feec106edf" kindref="member">get</ref>();</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="classdakku_1_1Logger_1a323f22b6d56d140abe5a41da4daff699" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>spdlog::logger<sp/>*<ref refid="classdakku_1_1Logger_1a323f22b6d56d140abe5a41da4daff699" kindref="member">handle</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_logger.get();<sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Logger" kindref="compound">Logger</ref>(std::shared_ptr&lt;spdlog::logger&gt;<sp/>_logger);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;spdlog::logger&gt;<sp/>_logger;</highlight></codeline>
<codeline lineno="40"><highlight class="normal">};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="logger_8h_1a9edd762e54e3ce43a70ddfe81b6e2fc5" refkind="member"><highlight class="preprocessor">#define<sp/>DAKKU_ERR(...)<sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/>SPDLOG_LOGGER_CALL(Logger::get().handle(),<sp/>spdlog::level::err,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="46" refid="logger_8h_1a845073641399be84136c0143bedbde77" refkind="member"><highlight class="preprocessor">#define<sp/>DAKKU_INFO(...)<sp/>\</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"><sp/><sp/>SPDLOG_LOGGER_CALL(Logger::get().handle(),<sp/>spdlog::level::info,<sp/>__VA_ARGS__)</highlight></codeline>
<codeline lineno="49" refid="logger_8h_1a614d277e34773e7302c6a2cda6909867" refkind="member"><highlight class="preprocessor">#define<sp/>DAKKU_WARN(...)<sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/>SPDLOG_LOGGER_CALL(Logger::get().handle(),<sp/>spdlog::level::warn,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DAKKU_BUILD_DEBUG</highlight></codeline>
<codeline lineno="53"><highlight class="preprocessor">#define<sp/>DAKKU_DEBUG(...)<sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/>SPDLOG_LOGGER_CALL(Logger::get().handle(),<sp/>spdlog::level::debug,<sp/>__VA_ARGS__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="57" refid="logger_8h_1a9c5edb9052d4e1a515276aef0afef3e3" refkind="member"><highlight class="preprocessor">#define<sp/>DAKKU_DEBUG(...)<sp/>static_cast&lt;void&gt;(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>DAKKU_BUILD_CHECK</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor">#define<sp/>DAKKU_CHECK(val,<sp/>...)<sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/>do<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if<sp/>(!(val))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>DAKKU_ERR(__VA_ARGS__);<sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>std::exit(-1);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/>}<sp/>while<sp/>(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="71" refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" refkind="member"><highlight class="preprocessor">#define<sp/>DAKKU_CHECK(...)<sp/>static_cast&lt;void&gt;(0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dakku</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/core/logger.h"/>
  </compounddef>
</doxygen>
