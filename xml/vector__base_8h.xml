<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="vector__base_8h" kind="file" language="C++">
    <compoundname>vector_base.h</compoundname>
    <includes refid="logger_8h" local="no">core/logger.h</includes>
    <includes refid="lua_8h" local="no">core/lua.h</includes>
    <includes local="no">array</includes>
    <includes local="no">numeric</includes>
    <includes local="no">span</includes>
    <includedby refid="vector_8h" local="no">src/core/vector.h</includedby>
    <incdepgraph>
      <node id="3">
        <label>core/fwd.h</label>
        <link refid="core_2fwd_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core/logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>core/lua.h</label>
        <link refid="lua_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/core/vector_base.h</label>
        <link refid="vector__base_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="11">
        <label>array</label>
      </node>
      <node id="6">
        <label>memory</label>
      </node>
      <node id="12">
        <label>numeric</label>
      </node>
      <node id="10">
        <label>sol/sol.hpp</label>
      </node>
      <node id="13">
        <label>span</label>
      </node>
      <node id="8">
        <label>spdlog/fmt/ostr.h</label>
      </node>
      <node id="7">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="5">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>src/core/bounds.h</label>
        <link refid="bounds_8h"/>
      </node>
      <node id="4">
        <label>src/core/filter.h</label>
        <link refid="filter_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/core/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/core/vector_base.h</label>
        <link refid="vector__base_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/filters/box.h</label>
        <link refid="box_8h"/>
      </node>
      <node id="5">
        <label>src/filters/fwd.h</label>
        <link refid="filters_2fwd_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>src/filters/triangle.h</label>
        <link refid="triangle_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classdakku_1_1VectorBase" prot="public">dakku::VectorBase</innerclass>
    <innernamespace refid="namespacedakku">dakku</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DAKKU_CORE_VECTOR_BASE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DAKKU_CORE_VECTOR_BASE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logger_8h" kindref="compound">core/logger.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="lua_8h" kindref="compound">core/lua.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;span&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedakku" kindref="compound">dakku</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D&gt;</highlight></codeline>
<codeline lineno="20" refid="classdakku_1_1VectorBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="27" refid="classdakku_1_1VectorBase_1a75875fb982e9119e088a8041633af986" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a75875fb982e9119e088a8041633af986" kindref="member">VectorBase</ref>()<sp/>:<sp/>_data()<sp/>{}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Arg&gt;</highlight></codeline>
<codeline lineno="37" refid="classdakku_1_1VectorBase_1af3bdbf112b98808eef281aca3cb82206" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase_1af3bdbf112b98808eef281aca3cb82206" kindref="member">VectorBase</ref>(Arg<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a95e25d9c0c9fba8ec21479e52fd932de" kindref="member">set</ref>(value);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" kindref="member">has_nans</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="classdakku_1_1VectorBase_1a9c402092a7e88ec0a81f0c7ee5cecc53" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a9c402092a7e88ec0a81f0c7ee5cecc53" kindref="member">VectorBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>sol::table<sp/>&amp;table)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>=<sp/>table.get_or(i<sp/>+<sp/>1,<sp/>T{0});</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" kindref="member">has_nans</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="conceptdakku_1_1ArithmeticType" kindref="compound">ArithmeticType</ref>...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>S)<sp/><ref refid="classdakku_1_1VectorBase_1a75875fb982e9119e088a8041633af986" kindref="member">VectorBase</ref>(Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a95e25d9c0c9fba8ec21479e52fd932de" kindref="member">set</ref>(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Other,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherDerived&gt;</highlight></codeline>
<codeline lineno="72" refid="classdakku_1_1VectorBase_1a702d9c09e3ad9c268125e98e50fc0f4f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a702d9c09e3ad9c268125e98e50fc0f4f" kindref="member">VectorBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase&lt;Other, S, OtherDerived&gt;</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a95e25d9c0c9fba8ec21479e52fd932de" kindref="member">set</ref>(other);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" kindref="member">has_nans</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classdakku_1_1VectorBase_1a2249aa0c050aa9a892a579252416082a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a2249aa0c050aa9a892a579252416082a" kindref="member">VectorBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;other)<sp/>:<sp/>_data(other._data)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" kindref="member">has_nans</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80" refid="classdakku_1_1VectorBase_1a538605b55d14d6a8e69195986963fc6d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a538605b55d14d6a8e69195986963fc6d" kindref="member">VectorBase</ref>(<ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/>_data(std::move(other._data))<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" kindref="member">has_nans</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83" refid="classdakku_1_1VectorBase_1a8f976fa3ab9629fe2b353acbd6fe16e6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a8f976fa3ab9629fe2b353acbd6fe16e6" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;other)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>_data<sp/>=<sp/>other._data;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" kindref="member">has_nans</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="89" refid="classdakku_1_1VectorBase_1a7c61321e47d9bf792afe038cc7a466a8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a7c61321e47d9bf792afe038cc7a466a8" kindref="member">operator=</ref>(<ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;other)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>_data<sp/>=<sp/>std::move(other._data);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" kindref="member">has_nans</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">D<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="classdakku_1_1VectorBase_1ac6c6eeb7cdf5c8075b9ef313623325e6" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1ac6c6eeb7cdf5c8075b9ef313623325e6" kindref="member">derived</ref>()<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">D<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Arg&gt;</highlight></codeline>
<codeline lineno="117" refid="classdakku_1_1VectorBase_1a95e25d9c0c9fba8ec21479e52fd932de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a95e25d9c0c9fba8ec21479e52fd932de" kindref="member">set</ref>(Arg<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>_data.fill(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value));</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Arg&gt;</highlight></codeline>
<codeline lineno="129" refid="classdakku_1_1VectorBase_1aa5e9b54dd454a15190cb47ef6dddc9af" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aa5e9b54dd454a15190cb47ef6dddc9af" kindref="member">set_by_index</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>Arg<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(0<sp/>&lt;=<sp/>index<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/>S,<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>out<sp/>of<sp/>range:<sp/>{}<sp/>&gt;=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>index,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>_data[index]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="conceptdakku_1_1ArithmeticType" kindref="compound">ArithmeticType</ref>...<sp/>Args,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="143" refid="classdakku_1_1VectorBase_1a0a45c53640e7e066f3d8043811e2e920" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>S)<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a0a45c53640e7e066f3d8043811e2e920" kindref="member">set</ref>(std::index_sequence&lt;Is...&gt;,</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="classdakku_1_1VectorBase_1aa5e9b54dd454a15190cb47ef6dddc9af" kindref="member">set_by_index</ref>(Is,<sp/>std::forward&lt;Args&gt;(args)),<sp/>...);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="conceptdakku_1_1ArithmeticType" kindref="compound">ArithmeticType</ref>...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="155" refid="classdakku_1_1VectorBase_1ace755d8042dd022c0695c531c854344f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>S)<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1ace755d8042dd022c0695c531c854344f" kindref="member">set</ref>(Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a95e25d9c0c9fba8ec21479e52fd932de" kindref="member">set</ref>(std::index_sequence_for&lt;Args...&gt;{},<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Other,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherDerived&gt;</highlight></codeline>
<codeline lineno="167" refid="classdakku_1_1VectorBase_1a458e8e62a05e6576794214a047209501" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a458e8e62a05e6576794214a047209501" kindref="member">set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase&lt;Other, S, OtherDerived&gt;</ref><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>=<sp/>static_cast&lt;T&gt;(rhs[i]);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classdakku_1_1VectorBase_1ad345b5adb85ffb7a09a1494e4cbf9cde" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1ad345b5adb85ffb7a09a1494e4cbf9cde" kindref="member">get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(0<sp/>&lt;=<sp/>i<sp/>&amp;&amp;<sp/>i<sp/>&lt;<sp/>S,<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>out<sp/>of<sp/>range<sp/>{}<sp/>&gt;=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>i,<sp/>S);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[i];</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="classdakku_1_1VectorBase_1a11976058f3dd1bc750f00d3a34a75968" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a11976058f3dd1bc750f00d3a34a75968" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S;<sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classdakku_1_1VectorBase_1a118a9c7d9ffa23805af2c2e5fb4f0a0f" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>std::string<sp/><ref refid="classdakku_1_1VectorBase_1a118a9c7d9ffa23805af2c2e5fb4f0a0f" kindref="member">to_string</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ret{</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>_data.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>std::to_string(_data[i]);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>!=<sp/>_data.size())<sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a984bee52aac6c08519e052b0a62ded44" kindref="member">has_nans</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_of(<ref refid="namespacedakku_1af0a2453f8db3eb948901c7a0aed18434" kindref="member">std::begin</ref>(_data),<sp/><ref refid="namespacedakku_1a41ae9fcb2290e6ea6f7d4b0fbca86d17" kindref="member">std::end</ref>(_data),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](T<sp/><ref refid="classdakku_1_1VectorBase_1a7c96ab9adab7789b7277cc810ccd3b46" kindref="member">x</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a08f737017abfd03bfaeb4b0c0d1d8928" kindref="member">isnan</ref>(<ref refid="classdakku_1_1VectorBase_1a7c96ab9adab7789b7277cc810ccd3b46" kindref="member">x</ref>);<sp/>});</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="classdakku_1_1VectorBase_1a85bd8a9c509a3c7149824f3bca29810f" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a85bd8a9c509a3c7149824f3bca29810f" kindref="member">clone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D{<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>()};<sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="classdakku_1_1VectorBase_1a6e532dd029e2386515b0e6047a6e6866" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a6e532dd029e2386515b0e6047a6e6866" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[i];<sp/>}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="classdakku_1_1VectorBase_1a4638de6bd39666b4a7af36f157b62261" refkind="member"><highlight class="normal"><sp/><sp/>T<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a4638de6bd39666b4a7af36f157b62261" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)[i]);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="classdakku_1_1VectorBase_1a7c41aa6431258fad65b506af8171df0c" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a7c41aa6431258fad65b506af8171df0c" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>+=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="256" refid="classdakku_1_1VectorBase_1a5c8ad5f1742dc0f2fe4b73430e90c119" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a5c8ad5f1742dc0f2fe4b73430e90c119" kindref="member">operator+=</ref>(V<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>+=<sp/>rhs;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="classdakku_1_1VectorBase_1a3ad97c8cd07eed945e3889dfaefd6c63" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a3ad97c8cd07eed945e3889dfaefd6c63" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>rhs;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="280" refid="classdakku_1_1VectorBase_1a001bb398b96aae4135cfee98ba5259b3" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a001bb398b96aae4135cfee98ba5259b3" kindref="member">operator+</ref>(V<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>rhs;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>U&gt;</highlight></codeline>
<codeline lineno="294" refid="classdakku_1_1VectorBase_1a134cfc3963f540464c94205f742b29bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a134cfc3963f540464c94205f742b29bd" kindref="member">operator+</ref>(U<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>+<sp/>a;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="304" refid="classdakku_1_1VectorBase_1a65aec7973da5728caec270d91e51e399" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a65aec7973da5728caec270d91e51e399" kindref="member">operator-=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>-=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="316" refid="classdakku_1_1VectorBase_1ab11c62c5e8c7e5dae9d64cb4a8e144f4" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1ab11c62c5e8c7e5dae9d64cb4a8e144f4" kindref="member">operator-=</ref>(V<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>-=<sp/>rhs;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>U&gt;</highlight></codeline>
<codeline lineno="329" refid="classdakku_1_1VectorBase_1a2b6a039c78a601cd7704d57ff1169d99" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a2b6a039c78a601cd7704d57ff1169d99" kindref="member">operator-</ref>(U<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>-b;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>a;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="classdakku_1_1VectorBase_1abbfbc3bb4987be30346848dfbc0372ea" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1abbfbc3bb4987be30346848dfbc0372ea" kindref="member">operator*=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>*=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="353" refid="classdakku_1_1VectorBase_1a878b656fc1b35eaa5b95e4cb673c15a3" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a878b656fc1b35eaa5b95e4cb673c15a3" kindref="member">operator*=</ref>(V<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>*=<sp/>rhs;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="364" refid="classdakku_1_1VectorBase_1a94f4b24cbd5c7feaf4066a9e894d8a72" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a94f4b24cbd5c7feaf4066a9e894d8a72" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>rhs;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="377" refid="classdakku_1_1VectorBase_1a63d725a6dddd8312eccabb215b9893a2" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a63d725a6dddd8312eccabb215b9893a2" kindref="member">operator*</ref>(V<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>*=<sp/>rhs;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>U&gt;</highlight></codeline>
<codeline lineno="391" refid="classdakku_1_1VectorBase_1ae86ea43d8aa945505be5032018751b34" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1ae86ea43d8aa945505be5032018751b34" kindref="member">operator*</ref>(U<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>b<sp/>*<sp/>a;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="401" refid="classdakku_1_1VectorBase_1a0a520b5f77010cdeef2f9beb2b053349" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a0a520b5f77010cdeef2f9beb2b053349" kindref="member">operator/=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>_data[i]<sp/>/=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="413" refid="classdakku_1_1VectorBase_1aa6a95ff2d4d223c4481873bbf3896039" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1aa6a95ff2d4d223c4481873bbf3896039" kindref="member">operator/=</ref>(V<sp/>rhs)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>()<sp/>*=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(T{1}<sp/>/<sp/>rhs);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="classdakku_1_1VectorBase_1aff2b2b32f14b1bf96bf233549bad1dca" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1aff2b2b32f14b1bf96bf233549bad1dca" kindref="member">operator/</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>/=<sp/>rhs;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>U&gt;</highlight></codeline>
<codeline lineno="436" refid="classdakku_1_1VectorBase_1aa6a930e0cb5c2acbcaaf605a8dea115e" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1aa6a930e0cb5c2acbcaaf605a8dea115e" kindref="member">operator/</ref>(U<sp/>rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/><ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>ret<sp/>/=<sp/>rhs;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>U&gt;</highlight></codeline>
<codeline lineno="450" refid="classdakku_1_1VectorBase_1a9bb674f8e431d95d1f2388d28519472b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a9bb674f8e431d95d1f2388d28519472b" kindref="member">operator/</ref>(U<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D(a)<sp/>/<sp/>b;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="classdakku_1_1VectorBase_1a531ed133257631916fc3384392b2ab7f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a531ed133257631916fc3384392b2ab7f" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;vec)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>vec.<ref refid="classdakku_1_1VectorBase_1a118a9c7d9ffa23805af2c2e5fb4f0a0f" kindref="member">to_string</ref>();</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465" refid="classdakku_1_1VectorBase_1a7b639096de4d497be959f86bb81dcb42" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a7b639096de4d497be959f86bb81dcb42" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data<sp/>==<sp/>rhs._data;<sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="classdakku_1_1VectorBase_1ad3b93aa391759a05ed093fb9a4ab7190" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1ad3b93aa391759a05ed093fb9a4ab7190" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data<sp/>!=<sp/>rhs._data;<sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="473" refid="classdakku_1_1VectorBase_1a7c96ab9adab7789b7277cc810ccd3b46" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a7c96ab9adab7789b7277cc810ccd3b46" kindref="member">x</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>&gt;=<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>size<sp/>to<sp/>get<sp/>x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[0];</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="482" refid="classdakku_1_1VectorBase_1a3ce0167e993358212dd25549459a0e2a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a3ce0167e993358212dd25549459a0e2a" kindref="member">x</ref>()<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>&gt;=<sp/>1,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>size<sp/>to<sp/>get<sp/>x&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[0];</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="classdakku_1_1VectorBase_1aeeda8f27cb03e971aecaf9fa9f3ea004" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1aeeda8f27cb03e971aecaf9fa9f3ea004" kindref="member">y</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>&gt;=<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>size<sp/>to<sp/>get<sp/>y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[1];</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="classdakku_1_1VectorBase_1a28e0bf009314c595f98c2914dd5dff90" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a28e0bf009314c595f98c2914dd5dff90" kindref="member">y</ref>()<sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>&gt;=<sp/>2,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>size<sp/>to<sp/>get<sp/>y&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[1];</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="509" refid="classdakku_1_1VectorBase_1ada16ac57afc93c1f9c6fa6f161d00b55" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1ada16ac57afc93c1f9c6fa6f161d00b55" kindref="member">z</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>&gt;=<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>size<sp/>to<sp/>get<sp/>z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[2];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="classdakku_1_1VectorBase_1a6206f62427dcaca9d8c9dbe3bf1e9f4f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a6206f62427dcaca9d8c9dbe3bf1e9f4f" kindref="member">z</ref>()<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>&gt;=<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>size<sp/>to<sp/>get<sp/>w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[2];</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="527" refid="classdakku_1_1VectorBase_1ae8cc16293f1cc603cf5eb0beccb73ebf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1ae8cc16293f1cc603cf5eb0beccb73ebf" kindref="member">w</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>&gt;=<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>size<sp/>to<sp/>get<sp/>w&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[3];</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="536" refid="classdakku_1_1VectorBase_1a3d2b826ae1bd7a56274f7b666398602f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a3d2b826ae1bd7a56274f7b666398602f" kindref="member">w</ref>()<sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>&gt;=<sp/>4,<sp/></highlight><highlight class="stringliteral">&quot;not<sp/>enough<sp/>size<sp/>to<sp/>get<sp/>z&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[3];</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="546" refid="classdakku_1_1VectorBase_1a3370bf3cdb04f7b7fe2fd4dfff99b467" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a3370bf3cdb04f7b7fe2fd4dfff99b467" kindref="member">max_element_index</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::distance(_data.begin(),</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::max_element(_data.begin(),<sp/>_data.end()));</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="classdakku_1_1VectorBase_1a6978e5a82402fefd693ba0a40350e81f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a6978e5a82402fefd693ba0a40350e81f" kindref="member">max_element</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>_data[<ref refid="classdakku_1_1VectorBase_1a3370bf3cdb04f7b7fe2fd4dfff99b467" kindref="member">max_element_index</ref>()];<sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="classdakku_1_1VectorBase_1a8e460c1cf24cea009621945ec0ebd681" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a8e460c1cf24cea009621945ec0ebd681" kindref="member">max</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v2)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>std::max(ret[i],<sp/>v2[i]);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="classdakku_1_1VectorBase_1a5faa98660f37740b64ef81284094e00d" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a5faa98660f37740b64ef81284094e00d" kindref="member">max</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a5faa98660f37740b64ef81284094e00d" kindref="member">max</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>(),<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="578" refid="classdakku_1_1VectorBase_1a6e140fd435ea0f73e62ad2ff1ab928e8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a6e140fd435ea0f73e62ad2ff1ab928e8" kindref="member">min</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v2)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>v1;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>std::min(ret[i],<sp/>v2[i]);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="classdakku_1_1VectorBase_1af6df1e7009d07c459a909de6977feb77" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1af6df1e7009d07c459a909de6977feb77" kindref="member">min</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1af6df1e7009d07c459a909de6977feb77" kindref="member">min</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>(),<sp/>rhs);<sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherDerived&gt;</highlight></codeline>
<codeline lineno="596" refid="classdakku_1_1VectorBase_1a97be0d4ece0397e7530aa6d20c4da767" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a97be0d4ece0397e7530aa6d20c4da767" kindref="member">dot</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase&lt;T, S, OtherDerived&gt;</ref><sp/>&amp;rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::inner_product(_data.begin(),<sp/>_data.end(),<sp/>rhs._data.begin(),</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T{});</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="classdakku_1_1VectorBase_1ac7f2d1336f046fb56af33c9dcbcc5d6f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1ac7f2d1336f046fb56af33c9dcbcc5d6f" kindref="member">squared_norm</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classdakku_1_1VectorBase_1a97be0d4ece0397e7530aa6d20c4da767" kindref="member">dot</ref>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">);<sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="classdakku_1_1VectorBase_1a2c7e37c52217414c026114cec751aaf5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a2c7e37c52217414c026114cec751aaf5" kindref="member">norm</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<ref refid="classdakku_1_1VectorBase_1ac7f2d1336f046fb56af33c9dcbcc5d6f" kindref="member">squared_norm</ref>());<sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="620" refid="classdakku_1_1VectorBase_1a3ed9c567c79813b05d6cf6aec8268022" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a3ed9c567c79813b05d6cf6aec8268022" kindref="member">length</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a2c7e37c52217414c026114cec751aaf5" kindref="member">norm</ref>();<sp/>}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="626" refid="classdakku_1_1VectorBase_1a70d0d10c920fee38754d600ea6037b33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a70d0d10c920fee38754d600ea6037b33" kindref="member">distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(a<sp/>-<sp/>b).length();</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="634" refid="classdakku_1_1VectorBase_1a79e4af0ff3a2c83c4a662f1f6108d533" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorBase_1a79e4af0ff3a2c83c4a662f1f6108d533" kindref="member">distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a70d0d10c920fee38754d600ea6037b33" kindref="member">distance</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>(),<sp/>rhs);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="642" refid="classdakku_1_1VectorBase_1a2db92192cedfddb5bda7029d3ebe927b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a2db92192cedfddb5bda7029d3ebe927b" kindref="member">abs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>std::abs(ret[i]);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="652" refid="classdakku_1_1VectorBase_1a1001be586e231d6dae084d4b209f8e97" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a1001be586e231d6dae084d4b209f8e97" kindref="member">abs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a1001be586e231d6dae084d4b209f8e97" kindref="member">abs</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>());<sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="658" refid="classdakku_1_1VectorBase_1ae3c08448e87e550e12a761d07d9dcc49" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1ae3c08448e87e550e12a761d07d9dcc49" kindref="member">cross</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_assert</highlight><highlight class="normal">(S<sp/>==<sp/>3,<sp/></highlight><highlight class="stringliteral">&quot;only<sp/>3d<sp/>vector<sp/>support<sp/>cross<sp/>product&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>D{(<ref refid="classdakku_1_1VectorBase_1aeeda8f27cb03e971aecaf9fa9f3ea004" kindref="member">y</ref>()<sp/>*<sp/>rhs.z())<sp/>-<sp/>(<ref refid="classdakku_1_1VectorBase_1ada16ac57afc93c1f9c6fa6f161d00b55" kindref="member">z</ref>()<sp/>*<sp/>rhs.y()),</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classdakku_1_1VectorBase_1ada16ac57afc93c1f9c6fa6f161d00b55" kindref="member">z</ref>()<sp/>*<sp/>rhs.x())<sp/>-<sp/>(<ref refid="classdakku_1_1VectorBase_1a7c96ab9adab7789b7277cc810ccd3b46" kindref="member">x</ref>()<sp/>*<sp/>rhs.z()),</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="classdakku_1_1VectorBase_1a7c96ab9adab7789b7277cc810ccd3b46" kindref="member">x</ref>()<sp/>*<sp/>rhs.y())<sp/>-<sp/>(<ref refid="classdakku_1_1VectorBase_1aeeda8f27cb03e971aecaf9fa9f3ea004" kindref="member">y</ref>()<sp/>*<sp/>rhs.x())};</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="669" refid="classdakku_1_1VectorBase_1afd5e7c493a6e1e6f6d4315ae63cf7a8c" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1afd5e7c493a6e1e6f6d4315ae63cf7a8c" kindref="member">is_zero</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::all_of(_data.begin(),<sp/>_data.end(),</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;v)<sp/>{<sp/>return<sp/>v<sp/>==<sp/>0;<sp/>});</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal"></highlight></codeline>
<codeline lineno="678" refid="classdakku_1_1VectorBase_1acfe633742ae050e594219880d8f9671e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1acfe633742ae050e594219880d8f9671e" kindref="member">sqrt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>static_cast&lt;T&gt;(std::sqrt(ret[i]));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="688" refid="classdakku_1_1VectorBase_1a6645604f639d9830941013fc71601fd6" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a6645604f639d9830941013fc71601fd6" kindref="member">sqrt</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a6645604f639d9830941013fc71601fd6" kindref="member">sqrt</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>());<sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>E&gt;</highlight></codeline>
<codeline lineno="695" refid="classdakku_1_1VectorBase_1a05239844639787f0bacd0139b408a73e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a05239844639787f0bacd0139b408a73e" kindref="member">pow</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v,<sp/>E<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>static_cast&lt;T&gt;(std::pow(ret[i],<sp/>e));</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>E&gt;</highlight></codeline>
<codeline lineno="706" refid="classdakku_1_1VectorBase_1af3c12d0c8f110a4d07f727d38c0bffd8" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1af3c12d0c8f110a4d07f727d38c0bffd8" kindref="member">pow</ref>(E<sp/>e)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a05239844639787f0bacd0139b408a73e" kindref="member">pow</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>(),<sp/>e);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="714" refid="classdakku_1_1VectorBase_1ad09c264b8f0b92419f4c77ebef41e068" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1ad09c264b8f0b92419f4c77ebef41e068" kindref="member">exp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>static_cast&lt;T&gt;(std::exp(ret[i]));</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="724" refid="classdakku_1_1VectorBase_1a8c95b56cdc03848c86835b3f710ff81c" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a8c95b56cdc03848c86835b3f710ff81c" kindref="member">exp</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a8c95b56cdc03848c86835b3f710ff81c" kindref="member">exp</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>());<sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="730" refid="classdakku_1_1VectorBase_1a202b2b4dae4f10f5222263f45773aca2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a202b2b4dae4f10f5222263f45773aca2" kindref="member">floor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>std::floor(ret[i]);</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="classdakku_1_1VectorBase_1a7789b37d2540654e0eaea2091aee12de" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a7789b37d2540654e0eaea2091aee12de" kindref="member">floor</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a7789b37d2540654e0eaea2091aee12de" kindref="member">floor</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>());<sp/>}</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="classdakku_1_1VectorBase_1a59894e45bd1ba2bb0893bb2213468607" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a59894e45bd1ba2bb0893bb2213468607" kindref="member">ceil</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret<sp/>=<sp/>v;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>std::ceil(ret[i]);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="756" refid="classdakku_1_1VectorBase_1abdd1df2e4dc893221408c1fb4ff0ef7e" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1abdd1df2e4dc893221408c1fb4ff0ef7e" kindref="member">ceil</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1abdd1df2e4dc893221408c1fb4ff0ef7e" kindref="member">ceil</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>());<sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
<codeline lineno="762" refid="classdakku_1_1VectorBase_1a69202c970f43a6faa3c931187d78d0ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a69202c970f43a6faa3c931187d78d0ad" kindref="member">lerp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;b,<sp/>T<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/>D<sp/>ret;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>std::lerp(a[i],<sp/>b[i],<sp/>t);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="772" refid="classdakku_1_1VectorBase_1a0e4bafc1510f9bd50aaf316a2b3e2cb7" refkind="member"><highlight class="normal"><sp/><sp/>D<sp/><ref refid="classdakku_1_1VectorBase_1a0e4bafc1510f9bd50aaf316a2b3e2cb7" kindref="member">lerp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>D<sp/>&amp;b,<sp/>T<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a0e4bafc1510f9bd50aaf316a2b3e2cb7" kindref="member">lerp</ref>(<ref refid="classdakku_1_1VectorBase_1aaa5d8d3dd53cf5a2bbae02fcac4cad8c" kindref="member">derived</ref>(),<sp/>b,<sp/>t);<sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774" refid="classdakku_1_1VectorBase_1adc5263e46ab511dba05f9e3154abe693" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::span&lt;T,<sp/>S&gt;()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::span{_data};<sp/>}</highlight></codeline>
<codeline lineno="775" refid="classdakku_1_1VectorBase_1adb5d42053668e7673da77b886af9e943" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>std::span&lt;const<sp/>T,<sp/>S&gt;()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::span{_data};<sp/>}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>std::array&lt;T,<sp/>S&gt;<sp/>_data;</highlight></codeline>
<codeline lineno="780"><highlight class="normal">};</highlight></codeline>
<codeline lineno="781"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dakku</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/core/vector_base.h"/>
  </compounddef>
</doxygen>
