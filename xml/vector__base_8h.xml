<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="vector__base_8h" kind="file" language="C++">
    <compoundname>vector_base.h</compoundname>
    <includes refid="math_2fwd_8h" local="no">math/fwd.h</includes>
    <includes refid="logger_8h" local="no">logger/logger.h</includes>
    <includes local="no">array</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">string</includes>
    <includes local="no">ostream</includes>
    <includedby refid="vector_8h" local="no">src/math/vector.h</includedby>
    <incdepgraph>
      <node id="9">
        <label>logger/fwd.h</label>
        <link refid="logger_2fwd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>logger/logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>math/fwd.h</label>
        <link refid="math_2fwd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/math/vector_base.h</label>
        <link refid="vector__base_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="13">
        <label>algorithm</label>
      </node>
      <node id="12">
        <label>array</label>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>cstdlib</label>
      </node>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="6">
        <label>numbers</label>
      </node>
      <node id="15">
        <label>ostream</label>
      </node>
      <node id="10">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="14">
        <label>string</label>
      </node>
      <node id="4">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>src/math/vector.h</label>
        <link refid="vector_8h"/>
      </node>
      <node id="1">
        <label>src/math/vector_base.h</label>
        <link refid="vector__base_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structdakku_1_1VectorExpression" prot="public">dakku::VectorExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorScalarExpression" prot="public">dakku::VectorScalarExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorCastExpression" prot="public">dakku::VectorCastExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorBase" prot="public">dakku::VectorBase</innerclass>
    <innerclass refid="classdakku_1_1BinaryVectorExpression" prot="public">dakku::BinaryVectorExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorAddExpression" prot="public">dakku::VectorAddExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorSubExpression" prot="public">dakku::VectorSubExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorMulExpression" prot="public">dakku::VectorMulExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorDivExpression" prot="public">dakku::VectorDivExpression</innerclass>
    <innernamespace refid="namespacedakku">dakku</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DAKKU_MATH_VECTOR_BASE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DAKKU_MATH_VECTOR_BASE_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="math_2fwd_8h" kindref="compound">math/fwd.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="logger_8h" kindref="compound">logger/logger.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedakku" kindref="compound">dakku</ref><sp/>{</highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Expr&gt;</highlight></codeline>
<codeline lineno="21" refid="structdakku_1_1VectorExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref><sp/>{</highlight></codeline>
<codeline lineno="28" refid="structdakku_1_1VectorExpression_1a134ba684029ca2e266660634597cdaa6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this)[i];</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>(std::is_lvalue_reference_v&lt;</highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(ret)&gt;)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">T<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ret);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structdakku_1_1VectorExpression_1a65239ca3cdad0963bd8364c9bf4c51f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">[](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Expr<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).get(i);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Expr<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structdakku_1_1VectorExpression_1a7c820895f26d8747183a52f908912ba8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="structdakku_1_1VectorExpression_1a7c820895f26d8747183a52f908912ba8" kindref="member">getExpression</ref>()<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Expr<sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref><sp/>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*this).<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>());</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="73" refid="classdakku_1_1VectorScalarExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression</ref></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt;T,<sp/>S,<sp/>Derived,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorScalarExpression&lt;T,<sp/>S,<sp/>Derived&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="77" refid="classdakku_1_1VectorScalarExpression_1a7f9fd9a9c34034ccaa5eba393f9f913f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorScalarExpression_1a7f9fd9a9c34034ccaa5eba393f9f913f" kindref="member">VectorScalarExpression</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value)<sp/>:<sp/>value(value)<sp/>{}</highlight></codeline>
<codeline lineno="78" refid="classdakku_1_1VectorScalarExpression_1a3f2a63050624379585c738b53f5e989d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorScalarExpression_1a3f2a63050624379585c738b53f5e989d" kindref="member">get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;<sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;value;</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Expr&gt;</highlight></codeline>
<codeline lineno="93" refid="classdakku_1_1VectorCastExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression</ref></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt;T,<sp/>S,<sp/>Derived,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorCastExpression&lt;T,<sp/>S,<sp/>Derived,<sp/>Expr&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97" refid="classdakku_1_1VectorCastExpression_1aede616bba10fc2b6394d0dc3b1da9541" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorCastExpression_1aede616bba10fc2b6394d0dc3b1da9541" kindref="member">VectorCastExpression</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expr<sp/>&amp;_e)<sp/>:<sp/>e(_e)<sp/>{}</highlight></codeline>
<codeline lineno="98" refid="classdakku_1_1VectorCastExpression_1a424c60140bcd0a365136884fc398279d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorCastExpression_1a424c60140bcd0a365136884fc398279d" kindref="member">VectorCastExpression</ref>(Expr<sp/>&amp;&amp;_e)<sp/>:<sp/>e(std::move(_e))<sp/>{}</highlight></codeline>
<codeline lineno="99" refid="classdakku_1_1VectorCastExpression_1a7471c0160b8708a2af839f1f54af30e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorCastExpression_1a7471c0160b8708a2af839f1f54af30e7" kindref="member">get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(e[i]);<sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Expr<sp/>&amp;e;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">};</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived&gt;</highlight></codeline>
<codeline lineno="113" refid="classdakku_1_1VectorBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt;T,<sp/>S,<sp/>Derived,<sp/>Derived&gt;<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="120" refid="classdakku_1_1VectorBase_1acae6683bc17650d9ff87aafa8cfb6b18" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1acae6683bc17650d9ff87aafa8cfb6b18" kindref="member">VectorBase</ref>()<sp/>:<sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Arg&gt;</highlight></codeline>
<codeline lineno="130" refid="classdakku_1_1VectorBase_1aee90251abb9484a6886f76d79091b96e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aee90251abb9484a6886f76d79091b96e" kindref="member">VectorBase</ref>(Arg<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" kindref="member">set</ref>(value);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" kindref="member">hasNaNs</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Expr&gt;</highlight></codeline>
<codeline lineno="142" refid="classdakku_1_1VectorBase_1a2eecaeb5c185651191a663c224a0ee54" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a2eecaeb5c185651191a663c224a0ee54" kindref="member">VectorBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, Derived, Expr&gt;</ref><sp/>&amp;expr)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" kindref="member">set</ref>(expr);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" kindref="member">hasNaNs</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Other,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherDerived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Expr&gt;</highlight></codeline>
<codeline lineno="156" refid="classdakku_1_1VectorBase_1a7d990e500ae3123ea20af7194bfd2337" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a7d990e500ae3123ea20af7194bfd2337" kindref="member">VectorBase</ref>(</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;Other, S, OtherDerived, Expr&gt;</ref><sp/>&amp;expr)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" kindref="member">set</ref>(expr);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" kindref="member">hasNaNs</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162" refid="classdakku_1_1VectorBase_1acb37abb2d3484b94e77ce4db959e4aa5" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase_1acb37abb2d3484b94e77ce4db959e4aa5" kindref="member">VectorBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;other)<sp/>:<sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>(other.<ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" kindref="member">hasNaNs</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="165" refid="classdakku_1_1VectorBase_1a707acaad663a7d8c53b0f31db60ad21f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a707acaad663a7d8c53b0f31db60ad21f" kindref="member">VectorBase</ref>(<ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;&amp;other)<sp/>noexcept<sp/>:<sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>(std::move(other._data))<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" kindref="member">hasNaNs</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168" refid="classdakku_1_1VectorBase_1afe4959c7c80f7ae0297325ca971cc97a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;<ref refid="classdakku_1_1VectorBase_1afe4959c7c80f7ae0297325ca971cc97a" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;other)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;other)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref><sp/>=<sp/>other.<ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" kindref="member">hasNaNs</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174" refid="classdakku_1_1VectorBase_1a9a1f1574000785aa4037f604a4fa21e2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a9a1f1574000785aa4037f604a4fa21e2" kindref="member">operator=</ref>(<ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;&amp;other)<sp/></highlight><highlight class="keyword">noexcept</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>&amp;other)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref><sp/>=<sp/>std::move(other._data);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(!<ref refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" kindref="member">hasNaNs</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;has<sp/>nan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="conceptdakku_1_1ArithmeticType" kindref="compound">ArithmeticType</ref>...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="188" refid="classdakku_1_1VectorBase_1ae369ed90f69f60064f053c5846820c6b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>S)<sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1ae369ed90f69f60064f053c5846820c6b" kindref="member">VectorBase</ref>(Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" kindref="member">set</ref>(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Arg&gt;</highlight></codeline>
<codeline lineno="199" refid="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" kindref="member">set</ref>(Arg<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>.fill(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value));</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Arg&gt;</highlight></codeline>
<codeline lineno="211" refid="classdakku_1_1VectorBase_1aa040165f6c4711d6ac753670e76e868e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aa040165f6c4711d6ac753670e76e868e" kindref="member">setByIndex</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>index,<sp/>Arg<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(0<sp/>&lt;=<sp/>index<sp/>&amp;&amp;<sp/>index<sp/>&lt;<sp/>S,<sp/></highlight><highlight class="stringliteral">&quot;index<sp/>out<sp/>of<sp/>range:<sp/>{}<sp/>&gt;=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>index,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>S);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>[index]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="conceptdakku_1_1ArithmeticType" kindref="compound">ArithmeticType</ref>...<sp/>Args,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">...<sp/>Is&gt;</highlight></codeline>
<codeline lineno="225" refid="classdakku_1_1VectorBase_1a47ce308974d85dac95130bc829603e52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>S)<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a47ce308974d85dac95130bc829603e52" kindref="member">set</ref>(std::index_sequence&lt;Is...&gt;,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>(<ref refid="classdakku_1_1VectorBase_1aa040165f6c4711d6ac753670e76e868e" kindref="member">setByIndex</ref>(Is,<sp/>std::forward&lt;Args&gt;(args)),<sp/>...);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="conceptdakku_1_1ArithmeticType" kindref="compound">ArithmeticType</ref>...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="237" refid="classdakku_1_1VectorBase_1a9ff0cd03971a94292507a01ba8852557" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">...(Args)<sp/>==<sp/>S)<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a9ff0cd03971a94292507a01ba8852557" kindref="member">set</ref>(Args<sp/>&amp;&amp;...args)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" kindref="member">set</ref>(std::index_sequence_for&lt;Args...&gt;{},<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>Other,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>OtherDerived,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Expr&gt;</highlight></codeline>
<codeline lineno="249" refid="classdakku_1_1VectorBase_1aec26469867c376f51419b2773513d6ed" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1aec26469867c376f51419b2773513d6ed" kindref="member">set</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;Other, S, OtherDerived, Expr&gt;</ref><sp/>&amp;rhs)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>[i]<sp/>=<sp/>rhs[i];</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" kindref="member">hasNaNs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::any_of(std::begin(<ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>),<sp/>std::end(<ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>),</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](T<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1af754e4967f947036a0c31c0dbb4bf6e1" kindref="member">isNaN</ref>(x);<sp/>});</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="classdakku_1_1VectorBase_1ae498067d7973072d02c9417b8b677e83" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1ae498067d7973072d02c9417b8b677e83" kindref="member">get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>[i];<sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="277" refid="classdakku_1_1VectorBase_1ad762f525bce13332abbd4b9157287ecd" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>std::string<sp/><ref refid="classdakku_1_1VectorBase_1ad762f525bce13332abbd4b9157287ecd" kindref="member">toString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>ret{</highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>+=<sp/>std::to_string(<ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>[i]);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>+<sp/>1<sp/>!=<sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>.size())<sp/>ret<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="classdakku_1_1VectorBase_1a531ed133257631916fc3384392b2ab7f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;<ref refid="classdakku_1_1VectorBase_1a531ed133257631916fc3384392b2ab7f" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref><sp/>&amp;vec)<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>vec.<ref refid="classdakku_1_1VectorBase_1ad762f525bce13332abbd4b9157287ecd" kindref="member">toString</ref>();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="classdakku_1_1VectorBase_1acc8e8a5aa7749125a4f6aa11b92f9dae" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorBase_1acc8e8a5aa7749125a4f6aa11b92f9dae" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>S;<sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="306" refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" refkind="member"><highlight class="normal"><sp/><sp/>std::array&lt;T,<sp/>S&gt;<sp/><ref refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" kindref="member">_data</ref>;</highlight></codeline>
<codeline lineno="307"><highlight class="normal">};</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;<ref refid="conceptdakku_1_1ArithmeticType" kindref="compound">ArithmeticType</ref><sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Expr&gt;</highlight></codeline>
<codeline lineno="321" refid="classdakku_1_1BinaryVectorExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt;T,<sp/>S,<sp/>D,<sp/>Expr&gt;<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="323" refid="classdakku_1_1BinaryVectorExpression_1aa711f97ec35354685683535259a98f55" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression_1aa711f97ec35354685683535259a98f55" kindref="member">BinaryVectorExpression</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E1<sp/>&amp;<ref refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" kindref="member">u</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E2<sp/>&amp;<ref refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" kindref="member">v</ref>)<sp/>:<sp/><ref refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" kindref="member">u</ref>(<ref refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" kindref="member">u</ref>),<sp/><ref refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" kindref="member">v</ref>(<ref refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" kindref="member">v</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="326" refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E1<sp/>&amp;<ref refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" kindref="member">u</ref>;</highlight></codeline>
<codeline lineno="327" refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>E2<sp/>&amp;<ref refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" kindref="member">v</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal">};</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2&gt;</highlight></codeline>
<codeline lineno="340" refid="classdakku_1_1VectorAddExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression</ref></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref>&lt;T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorAddExpression&lt;T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref>&lt;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2,</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression&lt;T, S, D, E1, E2&gt;</ref>&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1aa711f97ec35354685683535259a98f55" kindref="member">::BinaryVectorExpression</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="classdakku_1_1VectorAddExpression_1a72803695a4a6a325a8d6665cf7f2b045" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorAddExpression_1a72803695a4a6a325a8d6665cf7f2b045" kindref="member">get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" kindref="member">u</ref>[i]<sp/>+<sp/>this-&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" kindref="member">v</ref>[i];<sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal">};</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2&gt;</highlight></codeline>
<codeline lineno="364" refid="namespacedakku_1a4b6360ff704ffd1e9ec37e334d017598" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression&lt;T, S, D, E1, E2&gt;</ref><sp/><ref refid="namespacedakku_1a4b6360ff704ffd1e9ec37e334d017598" kindref="member">operator+</ref>(</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E2&gt;</ref><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression&lt;T, S, D, E1, E2&gt;</ref>{u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>(),</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>()};</highlight></codeline>
<codeline lineno="369"><highlight class="normal">}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/>ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VectorAddExpression&lt;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,<sp/>VectorCastExpression&lt;T,<sp/>S,<sp/>D,<sp/>VectorScalarExpression&lt;V,<sp/>S,<sp/>D&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="386" refid="namespacedakku_1a69f5544cd2f2b30dfdaf22f66eef9192" refkind="member"><highlight class="normal"><ref refid="namespacedakku_1a4b6360ff704ffd1e9ec37e334d017598" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression</ref>&lt;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;&gt;{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>(),</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression&lt;V, S, D&gt;</ref>{v}}};</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/>ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VectorAddExpression&lt;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>VectorCastExpression&lt;T,<sp/>S,<sp/>D,<sp/>VectorScalarExpression&lt;V,<sp/>S,<sp/>D&gt;&gt;,<sp/>E1&gt;</highlight></codeline>
<codeline lineno="410" refid="namespacedakku_1a14f899c028c71e38fe5d4a957c256108" refkind="member"><highlight class="normal"><ref refid="namespacedakku_1a4b6360ff704ffd1e9ec37e334d017598" kindref="member">operator+</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression</ref>&lt;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;,</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>E1&gt;{<ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression&lt;V, S, D&gt;</ref>{v}},</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>()};</highlight></codeline>
<codeline lineno="416"><highlight class="normal">}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2&gt;</highlight></codeline>
<codeline lineno="428" refid="classdakku_1_1VectorSubExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression</ref></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref>&lt;T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorSubExpression&lt;T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref>&lt;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2,</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression&lt;T, S, D, E1, E2&gt;</ref>&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1aa711f97ec35354685683535259a98f55" kindref="member">::BinaryVectorExpression</ref>;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="classdakku_1_1VectorSubExpression_1ab85904f948edc2521eeb729ef92efd0a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorSubExpression_1ab85904f948edc2521eeb729ef92efd0a" kindref="member">get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" kindref="member">u</ref>[i]<sp/>-<sp/>this-&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" kindref="member">v</ref>[i];<sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal">};</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2&gt;</highlight></codeline>
<codeline lineno="452" refid="namespacedakku_1a0941530b21fc4f469f76775fccb3842f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression&lt;T, S, D, E1, E2&gt;</ref><sp/><ref refid="namespacedakku_1a0941530b21fc4f469f76775fccb3842f" kindref="member">operator-</ref>(</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u,</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E2&gt;</ref><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression&lt;T, S, D, E1, E2&gt;</ref>{u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>(),</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>()};</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/>ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VectorSubExpression&lt;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,<sp/>VectorCastExpression&lt;T,<sp/>S,<sp/>D,<sp/>VectorScalarExpression&lt;V,<sp/>S,<sp/>D&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="462" refid="namespacedakku_1a2ba6b2cccead840f210517e17362d113" refkind="member"><highlight class="normal"><ref refid="namespacedakku_1a0941530b21fc4f469f76775fccb3842f" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression</ref>&lt;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;&gt;{</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>(),</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression&lt;V, S, D&gt;</ref>{v}}};</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/>ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VectorSubExpression&lt;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>VectorCastExpression&lt;T,<sp/>S,<sp/>D,<sp/>VectorScalarExpression&lt;V,<sp/>S,<sp/>D&gt;&gt;,<sp/>E1&gt;</highlight></codeline>
<codeline lineno="474" refid="namespacedakku_1ab7a7d0aaacbaff7ef207df29d2823d17" refkind="member"><highlight class="normal"><ref refid="namespacedakku_1a0941530b21fc4f469f76775fccb3842f" kindref="member">operator-</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression</ref>&lt;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;,</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>E1&gt;{<ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression&lt;V, S, D&gt;</ref>{v}},</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>()};</highlight></codeline>
<codeline lineno="480"><highlight class="normal">}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2&gt;</highlight></codeline>
<codeline lineno="492" refid="classdakku_1_1VectorMulExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression</ref></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref>&lt;T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorMulExpression&lt;T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref>&lt;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression&lt;T, S, D, E1, E2&gt;</ref>&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1aa711f97ec35354685683535259a98f55" kindref="member">::BinaryVectorExpression</ref>;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="classdakku_1_1VectorMulExpression_1a17806d0cd19961e88d715a2b476b91d4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorMulExpression_1a17806d0cd19961e88d715a2b476b91d4" kindref="member">get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" kindref="member">u</ref>[i]<sp/>*<sp/>this-&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" kindref="member">v</ref>[i];<sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal">};</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2&gt;</highlight></codeline>
<codeline lineno="516" refid="namespacedakku_1ab3f3816e505972c2da65c15749862185" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression&lt;T, S, D, E1, E2&gt;</ref><sp/><ref refid="namespacedakku_1ab3f3816e505972c2da65c15749862185" kindref="member">operator*</ref>(</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E2&gt;</ref><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression&lt;T, S, D, E1, E2&gt;</ref>{u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>(),</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>()};</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/>ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VectorMulExpression&lt;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,<sp/>VectorCastExpression&lt;T,<sp/>S,<sp/>D,<sp/>VectorScalarExpression&lt;V,<sp/>S,<sp/>D&gt;&gt;&gt;</highlight></codeline>
<codeline lineno="526" refid="namespacedakku_1afdce7a08d5d5af7a67c1ab4d50bf8d58" refkind="member"><highlight class="normal"><ref refid="namespacedakku_1ab3f3816e505972c2da65c15749862185" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression</ref>&lt;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;&gt;{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>(),</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression&lt;V, S, D&gt;</ref>{v}}};</highlight></codeline>
<codeline lineno="533"><highlight class="normal">}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/>ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VectorMulExpression&lt;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>VectorCastExpression&lt;T,<sp/>S,<sp/>D,<sp/>VectorScalarExpression&lt;V,<sp/>S,<sp/>D&gt;&gt;,<sp/>E1&gt;</highlight></codeline>
<codeline lineno="538" refid="namespacedakku_1a97c821f06ad1184d07d00eb0b431390d" refkind="member"><highlight class="normal"><ref refid="namespacedakku_1ab3f3816e505972c2da65c15749862185" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;v,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression</ref>&lt;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/><ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>E1&gt;{<ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression&lt;T, S, D, VectorScalarExpression&lt;V, S, D&gt;</ref>&gt;{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression&lt;V, S, D&gt;</ref>{v}},</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>()};</highlight></codeline>
<codeline lineno="544"><highlight class="normal">}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2&gt;</highlight></codeline>
<codeline lineno="556" refid="classdakku_1_1VectorDivExpression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1VectorDivExpression" kindref="compound">VectorDivExpression</ref></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref>&lt;T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>VectorDivExpression&lt;T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BinaryVectorExpression" kindref="compound">BinaryVectorExpression</ref>&lt;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T,<sp/>S,<sp/>D,<sp/>E1,<sp/>E2,</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1VectorDivExpression" kindref="compound">VectorDivExpression&lt;T, S, D, E1, E2&gt;</ref>&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1aa711f97ec35354685683535259a98f55" kindref="member">::BinaryVectorExpression</ref>;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564" refid="classdakku_1_1VectorDivExpression_1a7ef3091cfb903e98a7ee9402dcadf89d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1VectorDivExpression_1a7ef3091cfb903e98a7ee9402dcadf89d" kindref="member">get</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1a445888f91ca5086b6086af33c15a4dbd" kindref="member">u</ref>[i]<sp/>/<sp/>this-&gt;<ref refid="classdakku_1_1BinaryVectorExpression_1afaa096b42b476374f04f339da8b0a481" kindref="member">v</ref>[i];<sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal">};</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E2&gt;</highlight></codeline>
<codeline lineno="580" refid="namespacedakku_1aff2b84e0667f3bd979839701507fb1a9" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorDivExpression" kindref="compound">VectorDivExpression&lt;T, S, D, E1, E2&gt;</ref><sp/><ref refid="namespacedakku_1aff2b84e0667f3bd979839701507fb1a9" kindref="member">operator/</ref>(</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E2&gt;</ref><sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1VectorDivExpression" kindref="compound">VectorDivExpression&lt;T, S, D, E1, E2&gt;</ref>{u.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>(),</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v.<ref refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" kindref="member">getExpression</ref>()};</highlight></codeline>
<codeline lineno="585"><highlight class="normal">}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>E1,<sp/>ArithmeticType<sp/>V&gt;</highlight></codeline>
<codeline lineno="588" refid="namespacedakku_1a85464f4b6a2b1eb4229fb2d45412ef1f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">/(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression&lt;T, S, D, E1&gt;</ref><sp/>&amp;u,</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>V<sp/>&amp;v)<sp/>{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>u<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(T{1}<sp/>/<sp/>v);</highlight></codeline>
<codeline lineno="591"><highlight class="normal">}</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dakku</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/math/vector_base.h"/>
  </compounddef>
</doxygen>
