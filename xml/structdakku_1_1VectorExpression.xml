<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="structdakku_1_1VectorExpression" kind="struct" language="C++" prot="public">
    <compoundname>dakku::VectorExpression</compoundname>
    <derivedcompoundref refid="classdakku_1_1BinaryVectorExpression" prot="public" virt="non-virtual">dakku::BinaryVectorExpression&lt; T, S, D, E1, E2, VectorAddExpression&lt; T, S, D, E1, E2 &gt; &gt;</derivedcompoundref>
    <includes refid="vector__base_8h" local="no">vector_base.h</includes>
    <templateparamlist>
      <param>
        <type>ArithmeticType</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>size_t</type>
        <declname>S</declname>
        <defname>S</defname>
      </param>
      <param>
        <type>typename Derived</type>
      </param>
      <param>
        <type>typename Expr</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structdakku_1_1VectorExpression_1a134ba684029ca2e266660634597cdaa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorExpression&lt; T, S, Derived, Expr &gt;::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get the i&apos;th value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="28" column="12" bodyfile="src/math/vector_base.h" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="structdakku_1_1VectorExpression_1a65239ca3cdad0963bd8364c9bf4c51f8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorExpression&lt; T, S, Derived, Expr &gt;::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get the i&apos;th value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="41" column="12" bodyfile="src/math/vector_base.h" bodystart="41" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorExpression&lt; T, S, Derived, Expr &gt;::getExpression</definition>
        <argsstring>() const</argsstring>
        <name>getExpression</name>
        <briefdescription>
<para>Get the derived expression. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the derived expression </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="50" column="12" bodyfile="src/math/vector_base.h" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structdakku_1_1VectorExpression_1a7c820895f26d8747183a52f908912ba8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorExpression&lt; T, S, Derived, Expr &gt;::getExpression</definition>
        <argsstring>()</argsstring>
        <name>getExpression</name>
        <briefdescription>
<para>Get the derived expression. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the derived expression </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="59" column="12" bodyfile="src/math/vector_base.h" bodystart="59" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>expression template for vector operations </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>final vector type (point/vector/normal) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Expr</parametername>
</parameternamelist>
<parameterdescription>
<para>vector expression </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dakku::BinaryVectorExpression&lt; T, S, D, E1, E2, VectorAddExpression&lt; T, S, D, E1, E2 &gt; &gt;</label>
        <link refid="classdakku_1_1BinaryVectorExpression"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dakku::VectorAddExpression&lt; T, S, D, E1, E2 &gt;</label>
        <link refid="classdakku_1_1VectorAddExpression"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dakku::VectorExpression&lt; T, S, Derived, Expr &gt;</label>
        <link refid="structdakku_1_1VectorExpression"/>
      </node>
    </inheritancegraph>
    <location file="src/math/vector_base.h" line="21" column="1" bodyfile="src/math/vector_base.h" bodystart="21" bodyend="63"/>
    <listofallmembers>
      <member refid="structdakku_1_1VectorExpression_1aa6bb9e06a874dc4d2d53e7afeab2d776" prot="public" virt="non-virtual"><scope>dakku::VectorExpression</scope><name>getExpression</name></member>
      <member refid="structdakku_1_1VectorExpression_1a7c820895f26d8747183a52f908912ba8" prot="public" virt="non-virtual"><scope>dakku::VectorExpression</scope><name>getExpression</name></member>
      <member refid="structdakku_1_1VectorExpression_1a134ba684029ca2e266660634597cdaa6" prot="public" virt="non-virtual"><scope>dakku::VectorExpression</scope><name>operator[]</name></member>
      <member refid="structdakku_1_1VectorExpression_1a65239ca3cdad0963bd8364c9bf4c51f8" prot="public" virt="non-virtual"><scope>dakku::VectorExpression</scope><name>operator[]</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
