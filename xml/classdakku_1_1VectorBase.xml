<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classdakku_1_1VectorBase" kind="class" language="C++" prot="public">
    <compoundname>dakku::VectorBase</compoundname>
    <includes refid="vector__base_8h" local="no">vector_base.h</includes>
    <templateparamlist>
      <param>
        <type>ArithmeticType</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>size_t</type>
        <declname>S</declname>
        <defname>S</defname>
      </param>
      <param>
        <type>typename Derived</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" prot="protected" static="no" mutable="no">
        <type>std::array&lt; T, S &gt;</type>
        <definition>std::array&lt;T, S&gt; dakku::VectorBase&lt; T, S, Derived &gt;::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
<para>vector base data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="292" column="14" bodyfile="src/math/vector_base.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdakku_1_1VectorBase_1acae6683bc17650d9ff87aafa8cfb6b18" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>()</argsstring>
        <name>VectorBase</name>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with all components initialized to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="27" column="12" bodyfile="src/math/vector_base.h" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1aee90251abb9484a6886f76d79091b96e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Arg</declname>
            <defname>Arg</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(Arg value)</argsstring>
        <name>VectorBase</name>
        <param>
          <type>Arg</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with all components initialized to <computeroutput>value</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>value type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>init value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="37" column="12" bodyfile="src/math/vector_base.h" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a3992f122fe320723d8a2b08aa0f0b658" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
          <param>
            <type>typename OtherDerived</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(const VectorBase&lt; Other, S, OtherDerived &gt; &amp;other)</argsstring>
        <name>VectorBase</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref>&lt; Other, S, OtherDerived &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with a vector expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OtherDerived</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Expr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the given expression </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="51" column="12" bodyfile="src/math/vector_base.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1acb37abb2d3484b94e77ce4db959e4aa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(const VectorBase &amp;other)</argsstring>
        <name>VectorBase</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="56" column="3" bodyfile="src/math/vector_base.h" bodystart="56" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a707acaad663a7d8c53b0f31db60ad21f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(VectorBase &amp;&amp;other) noexcept</argsstring>
        <name>VectorBase</name>
        <param>
          <type><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="59" column="3" bodyfile="src/math/vector_base.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1afe4959c7c80f7ae0297325ca971cc97a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
        <definition>VectorBase &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator=</definition>
        <argsstring>(const VectorBase &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="62" column="14" bodyfile="src/math/vector_base.h" bodystart="62" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a9a1f1574000785aa4037f604a4fa21e2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
        <definition>VectorBase &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator=</definition>
        <argsstring>(VectorBase &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="68" column="14" bodyfile="src/math/vector_base.h" bodystart="68" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ae369ed90f69f60064f053c5846820c6b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>VectorBase</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
    <requiresclause>(sizeof...(Args) == S)    </requiresclause>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with given values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>value types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>init values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="82" column="13" bodyfile="src/math/vector_base.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Arg</declname>
            <defname>Arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::set</definition>
        <argsstring>(Arg value)</argsstring>
        <name>set</name>
        <param>
          <type>Arg</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set all components to <computeroutput>value</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>value type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the given value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="93" column="8" bodyfile="src/math/vector_base.h" bodystart="93" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1aa040165f6c4711d6ac753670e76e868e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Arg</declname>
            <defname>Arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::setByIndex</definition>
        <argsstring>(size_t index, Arg value)</argsstring>
        <name>setByIndex</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>Arg</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set data[index] to value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>value type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the given value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="105" column="8" bodyfile="src/math/vector_base.h" bodystart="105" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a47ce308974d85dac95130bc829603e52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::set</definition>
        <argsstring>(std::index_sequence&lt; Is... &gt;, Args &amp;&amp;...args)</argsstring>
        <name>set</name>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
    <requiresclause>(sizeof...(Args) == S)    </requiresclause>
        <briefdescription>
<para>set data to args </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>value types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Is</parametername>
</parameternamelist>
<parameterdescription>
<para>indices (generated by std::index_sequence_for) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="119" column="9" bodyfile="src/math/vector_base.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a9ff0cd03971a94292507a01ba8852557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::set</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>set</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
    <requiresclause>(sizeof...(Args) == S)    </requiresclause>
        <briefdescription>
<para>set data to args </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>value types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="131" column="9" bodyfile="src/math/vector_base.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a490cefc87b4becdd6a938140e2f8e533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
          <param>
            <type>typename OtherDerived</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::set</definition>
        <argsstring>(const VectorBase&lt; Other, S, OtherDerived &gt; &amp;rhs)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref>&lt; Other, S, OtherDerived &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>set data by <computeroutput>rhs</computeroutput>&apos;s data </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>rhs</computeroutput> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OtherDerived</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>rhs</computeroutput> derived type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the given vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="143" column="8" bodyfile="src/math/vector_base.h" bodystart="143" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dakku::VectorBase&lt; T, S, Derived &gt;::hasNaNs</definition>
        <argsstring>() const</argsstring>
        <name>hasNaNs</name>
        <briefdescription>
<para>check whether there are nan components </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true vector contains nan </para>
</simplesect>
<simplesect kind="return"><para>false vector does not contain nans </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="153" column="9" bodyfile="src/math/vector_base.h" bodystart="153" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ae498067d7973072d02c9417b8b677e83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; dakku::VectorBase&lt; T, S, Derived &gt;::get</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get i&apos;th component </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="164" column="11" bodyfile="src/math/vector_base.h" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ad762f525bce13332abbd4b9157287ecd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dakku::VectorBase&lt; T, S, Derived &gt;::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
<para>convert vector to string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the converted string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="171" column="16" bodyfile="src/math/vector_base.h" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1acc8e8a5aa7749125a4f6aa11b92f9dae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dakku::VectorBase&lt; T, S, Derived &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>size of the vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="196" column="11" bodyfile="src/math/vector_base.h" bodystart="196" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ada05b4cd2b9838400f490961dc3ac825" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get i&apos;th value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="204" column="11" bodyfile="src/math/vector_base.h" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a619efcd85e3a91770ccae7f80031e55e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get i&apos;th value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="212" column="5" bodyfile="src/math/vector_base.h" bodystart="212" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a838ade15abc3b13923aa49d191c1b796" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived dakku::VectorBase&lt; T, S, Derived &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>negation of the vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>$-\vec v$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="221" column="11" bodyfile="src/math/vector_base.h" bodystart="221" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a164c7c788c4967c1c6ebcf7ae8466ba8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Derived &amp;</type>
        <definition>const Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::derived</definition>
        <argsstring>() const</argsstring>
        <name>derived</name>
        <briefdescription>
<para>get derived class </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="231" column="17" bodyfile="src/math/vector_base.h" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1abb0f3e3fa71aaf063c3a5a6002fcbf1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::derived</definition>
        <argsstring>()</argsstring>
        <name>derived</name>
        <briefdescription>
<para>get derived class </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="237" column="11" bodyfile="src/math/vector_base.h" bodystart="237" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ae64bc6bd658a94d08f3b407fcb0e7fba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator+=</definition>
        <argsstring>(const Derived &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>another vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="248" column="11" bodyfile="src/math/vector_base.h" bodystart="248" bodyend="251"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a531ed133257631916fc3384392b2ab7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VectorBase &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>output the vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>ostream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="187" column="10" bodyfile="src/math/vector_base.h" bodystart="187" bodyend="189"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a6a604c24b1049ff1e9c3c12e9a26fff9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived operator+</definition>
        <argsstring>(const Derived &amp;a, const Derived &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>vector $\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>vector $\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>$\vec a + \vec b$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="260" column="18" bodyfile="src/math/vector_base.h" bodystart="260" bodyend="264"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1aaeb63fd4c52bae59b7e867829e8b1025" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator+</definition>
        <argsstring>(const Derived &amp;a, const U &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>b</parametertype>
<parametername>$b</parametername>
<parametertype>b</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise add b </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="274" column="18" bodyfile="src/math/vector_base.h" bodystart="274" bodyend="276"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a5de1f00d31ab772c98c21a49c30dc9f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator+</definition>
        <argsstring>(const U &amp;a, const Derived &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>a</parametertype>
<parametername>$a</parametername>
<parametertype>a</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise add a </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="286" column="18" bodyfile="src/math/vector_base.h" bodystart="286" bodyend="288"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>vector base class </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>derived class type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="src/math/vector_base.h" line="20" column="1" bodyfile="src/math/vector_base.h" bodystart="20" bodyend="293"/>
    <listofallmembers>
      <member refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" prot="protected" virt="non-virtual"><scope>dakku::VectorBase</scope><name>_data</name></member>
      <member refid="classdakku_1_1VectorBase_1a164c7c788c4967c1c6ebcf7ae8466ba8" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>derived</name></member>
      <member refid="classdakku_1_1VectorBase_1abb0f3e3fa71aaf063c3a5a6002fcbf1f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>derived</name></member>
      <member refid="classdakku_1_1VectorBase_1ae498067d7973072d02c9417b8b677e83" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>get</name></member>
      <member refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>hasNaNs</name></member>
      <member refid="classdakku_1_1VectorBase_1a6a604c24b1049ff1e9c3c12e9a26fff9" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+</name></member>
      <member refid="classdakku_1_1VectorBase_1aaeb63fd4c52bae59b7e867829e8b1025" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+</name></member>
      <member refid="classdakku_1_1VectorBase_1a5de1f00d31ab772c98c21a49c30dc9f8" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+</name></member>
      <member refid="classdakku_1_1VectorBase_1ae64bc6bd658a94d08f3b407fcb0e7fba" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+=</name></member>
      <member refid="classdakku_1_1VectorBase_1a838ade15abc3b13923aa49d191c1b796" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator-</name></member>
      <member refid="classdakku_1_1VectorBase_1a531ed133257631916fc3384392b2ab7f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator&lt;&lt;</name></member>
      <member refid="classdakku_1_1VectorBase_1afe4959c7c80f7ae0297325ca971cc97a" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator=</name></member>
      <member refid="classdakku_1_1VectorBase_1a9a1f1574000785aa4037f604a4fa21e2" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator=</name></member>
      <member refid="classdakku_1_1VectorBase_1ada05b4cd2b9838400f490961dc3ac825" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator[]</name></member>
      <member refid="classdakku_1_1VectorBase_1a619efcd85e3a91770ccae7f80031e55e" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator[]</name></member>
      <member refid="classdakku_1_1VectorBase_1a21d3d5772ff3cf0e424968a63557ddb4" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>set</name></member>
      <member refid="classdakku_1_1VectorBase_1a47ce308974d85dac95130bc829603e52" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>set</name></member>
      <member refid="classdakku_1_1VectorBase_1a9ff0cd03971a94292507a01ba8852557" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>set</name></member>
      <member refid="classdakku_1_1VectorBase_1a490cefc87b4becdd6a938140e2f8e533" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>set</name></member>
      <member refid="classdakku_1_1VectorBase_1aa040165f6c4711d6ac753670e76e868e" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>setByIndex</name></member>
      <member refid="classdakku_1_1VectorBase_1acc8e8a5aa7749125a4f6aa11b92f9dae" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>size</name></member>
      <member refid="classdakku_1_1VectorBase_1ad762f525bce13332abbd4b9157287ecd" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>toString</name></member>
      <member refid="classdakku_1_1VectorBase_1acae6683bc17650d9ff87aafa8cfb6b18" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1aee90251abb9484a6886f76d79091b96e" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1a3992f122fe320723d8a2b08aa0f0b658" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1acb37abb2d3484b94e77ce4db959e4aa5" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1a707acaad663a7d8c53b0f31db60ad21f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1ae369ed90f69f60064f053c5846820c6b" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
