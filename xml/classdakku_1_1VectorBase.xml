<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classdakku_1_1VectorBase" kind="class" language="C++" prot="public">
    <compoundname>dakku::VectorBase</compoundname>
    <derivedcompoundref refid="classdakku_1_1CoefficientSpectrum" prot="public" virt="non-virtual">dakku::CoefficientSpectrum&lt; 3, RgbSpectrum &gt;</derivedcompoundref>
    <includes refid="vector__base_8h" local="no">vector_base.h</includes>
    <templateparamlist>
      <param>
        <type>ArithmeticType</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>size_t</type>
        <declname>S</declname>
        <defname>S</defname>
      </param>
      <param>
        <type>typename Derived</type>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" prot="protected" static="no" mutable="no">
        <type>std::array&lt; T, S &gt;</type>
        <definition>std::array&lt;T, S&gt; dakku::VectorBase&lt; T, S, Derived &gt;::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
<para>vector base data </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="786" column="14" bodyfile="src/core/vector_base.h" bodystart="786" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdakku_1_1VectorBase_1acae6683bc17650d9ff87aafa8cfb6b18" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>()</argsstring>
        <name>VectorBase</name>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with all components initialized to zero. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="28" column="12" bodyfile="src/core/vector_base.h" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1aee90251abb9484a6886f76d79091b96e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Arg</declname>
            <defname>Arg</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(Arg value)</argsstring>
        <name>VectorBase</name>
        <param>
          <type>Arg</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with all components initialized to <computeroutput>value</computeroutput> </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>value type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>init value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="38" column="3" bodyfile="src/core/vector_base.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a3992f122fe320723d8a2b08aa0f0b658" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
          <param>
            <type>typename OtherDerived</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(const VectorBase&lt; Other, S, OtherDerived &gt; &amp;other)</argsstring>
        <name>VectorBase</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref>&lt; Other, S, OtherDerived &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with a vector expression. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Other</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OtherDerived</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Expr</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the given expression </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="52" column="12" bodyfile="src/core/vector_base.h" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1acb37abb2d3484b94e77ce4db959e4aa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(const VectorBase &amp;other)</argsstring>
        <name>VectorBase</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="57" column="3" bodyfile="src/core/vector_base.h" bodystart="57" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a707acaad663a7d8c53b0f31db60ad21f" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(VectorBase &amp;&amp;other) noexcept</argsstring>
        <name>VectorBase</name>
        <param>
          <type><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="60" column="3" bodyfile="src/core/vector_base.h" bodystart="60" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1afe4959c7c80f7ae0297325ca971cc97a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
        <definition>VectorBase &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator=</definition>
        <argsstring>(const VectorBase &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="63" column="14" bodyfile="src/core/vector_base.h" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a9a1f1574000785aa4037f604a4fa21e2" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
        <definition>VectorBase &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator=</definition>
        <argsstring>(VectorBase &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="69" column="14" bodyfile="src/core/vector_base.h" bodystart="69" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1afa4cd455e4e2f12a88695122e221ca13" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Arg</declname>
            <defname>Arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::set</definition>
        <argsstring>(Arg value)</argsstring>
        <name>set</name>
        <param>
          <type>Arg</type>
          <declname>value</declname>
        </param>
    <requiresclause>(sizeof...(Args) == S) VectorBase(Args &amp;&amp;...args)    </requiresclause>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with given values. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>value types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>init values</para>
</parameterdescription>
</parameteritem>
</parameterlist>
set all components to <computeroutput>value</computeroutput></para>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>value type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the given value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="94" column="8" bodyfile="src/core/vector_base.h" bodystart="94" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1aa040165f6c4711d6ac753670e76e868e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Arg</declname>
            <defname>Arg</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::setByIndex</definition>
        <argsstring>(size_t index, Arg value)</argsstring>
        <name>setByIndex</name>
        <param>
          <type>size_t</type>
          <declname>index</declname>
        </param>
        <param>
          <type>Arg</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>set data[index] to value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Arg</parametername>
</parameternamelist>
<parameterdescription>
<para>value type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the component </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the given value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="106" column="8" bodyfile="src/core/vector_base.h" bodystart="106" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a47ce308974d85dac95130bc829603e52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
          <param>
            <type>size_t...</type>
            <declname>Is</declname>
            <defname>Is</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::set</definition>
        <argsstring>(std::index_sequence&lt; Is... &gt;, Args &amp;&amp;...args)</argsstring>
        <name>set</name>
        <param>
          <type>std::index_sequence&lt; Is... &gt;</type>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
    <requiresclause>(sizeof...(Args) == S)    </requiresclause>
        <briefdescription>
<para>set data to args </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>value types </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Is</parametername>
</parameternamelist>
<parameterdescription>
<para>indices (generated by std::index_sequence_for) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="120" column="9" bodyfile="src/core/vector_base.h" bodystart="120" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a9ff0cd03971a94292507a01ba8852557" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::set</definition>
        <argsstring>(Args &amp;&amp;...args)</argsstring>
        <name>set</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
    <requiresclause>(sizeof...(Args) == S)    </requiresclause>
        <briefdescription>
<para>set data to args </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Args</parametername>
</parameternamelist>
<parameterdescription>
<para>value types </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para>values </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="132" column="9" bodyfile="src/core/vector_base.h" bodystart="132" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a490cefc87b4becdd6a938140e2f8e533" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>Other</declname>
            <defname>Other</defname>
          </param>
          <param>
            <type>typename OtherDerived</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void dakku::VectorBase&lt; T, S, Derived &gt;::set</definition>
        <argsstring>(const VectorBase&lt; Other, S, OtherDerived &gt; &amp;rhs)</argsstring>
        <name>set</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref>&lt; Other, S, OtherDerived &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>set data by <computeroutput>rhs</computeroutput>&apos;s data </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Other</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>rhs</computeroutput> type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>OtherDerived</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>rhs</computeroutput> derived type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>the given vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="144" column="8" bodyfile="src/core/vector_base.h" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dakku::VectorBase&lt; T, S, Derived &gt;::hasNaNs</definition>
        <argsstring>() const</argsstring>
        <name>hasNaNs</name>
        <briefdescription>
<para>check whether there are nan components </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true vector contains nan </para>
</simplesect>
<simplesect kind="return"><para>false vector does not contain nans </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="154" column="9" bodyfile="src/core/vector_base.h" bodystart="154" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ae498067d7973072d02c9417b8b677e83" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; dakku::VectorBase&lt; T, S, Derived &gt;::get</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>get</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get i&apos;th component </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="165" column="11" bodyfile="src/core/vector_base.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ad762f525bce13332abbd4b9157287ecd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string dakku::VectorBase&lt; T, S, Derived &gt;::toString</definition>
        <argsstring>() const</argsstring>
        <name>toString</name>
        <briefdescription>
<para>convert vector to string </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the converted string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="172" column="16" bodyfile="src/core/vector_base.h" bodystart="172" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1acc8e8a5aa7749125a4f6aa11b92f9dae" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dakku::VectorBase&lt; T, S, Derived &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>size of the vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="197" column="11" bodyfile="src/core/vector_base.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ada05b4cd2b9838400f490961dc3ac825" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator[]</definition>
        <argsstring>(size_t i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get i&apos;th value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="205" column="11" bodyfile="src/core/vector_base.h" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a619efcd85e3a91770ccae7f80031e55e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator[]</definition>
        <argsstring>(size_t i)</argsstring>
        <name>operator[]</name>
        <param>
          <type>size_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>get i&apos;th value </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="213" column="5" bodyfile="src/core/vector_base.h" bodystart="213" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a838ade15abc3b13923aa49d191c1b796" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived dakku::VectorBase&lt; T, S, Derived &gt;::operator-</definition>
        <argsstring>() const</argsstring>
        <name>operator-</name>
        <briefdescription>
<para>negation of the vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>$-\vec v$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="222" column="11" bodyfile="src/core/vector_base.h" bodystart="222" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a164c7c788c4967c1c6ebcf7ae8466ba8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Derived &amp;</type>
        <definition>const Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::derived</definition>
        <argsstring>() const</argsstring>
        <name>derived</name>
        <briefdescription>
<para>get derived class </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="232" column="17" bodyfile="src/core/vector_base.h" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1abb0f3e3fa71aaf063c3a5a6002fcbf1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::derived</definition>
        <argsstring>()</argsstring>
        <name>derived</name>
        <briefdescription>
<para>get derived class </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="238" column="11" bodyfile="src/core/vector_base.h" bodystart="238" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ae64bc6bd658a94d08f3b407fcb0e7fba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator+=</definition>
        <argsstring>(const Derived &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>another vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="249" column="11" bodyfile="src/core/vector_base.h" bodystart="249" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a3351845012fbb55d54623d8af9c44a79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator+=</definition>
        <argsstring>(const V &amp;rhs)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const V &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="261" column="11" bodyfile="src/core/vector_base.h" bodystart="261" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ad6e6b4c4275de701f79d952ed56fe9ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator-=</definition>
        <argsstring>(const Derived &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>subtraction </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>another vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="311" column="11" bodyfile="src/core/vector_base.h" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a846dad82a5cd66baba195846d3da7c9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator-=</definition>
        <argsstring>(const V &amp;rhs)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const V &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>subtraction </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="323" column="11" bodyfile="src/core/vector_base.h" bodystart="323" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a5353b2617ac5343efeee0f325632d772" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator*=</definition>
        <argsstring>(const Derived &amp;rhs)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>multiplication </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>another vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="362" column="11" bodyfile="src/core/vector_base.h" bodystart="362" bodyend="365"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ad4136ad736840507f9fc902d9d6c6dfd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator*=</definition>
        <argsstring>(const V &amp;rhs)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const V &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>multiplication </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="374" column="11" bodyfile="src/core/vector_base.h" bodystart="374" bodyend="377"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1add8d1fe3254c662f2c6bfc6beb541c9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator/=</definition>
        <argsstring>(const Derived &amp;rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>division </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>another vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="424" column="11" bodyfile="src/core/vector_base.h" bodystart="424" bodyend="427"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ad5b06200c617ca92964ad3d81787848f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::operator/=</definition>
        <argsstring>(const V &amp;rhs)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const V &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>division </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>this </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="436" column="11" bodyfile="src/core/vector_base.h" bodystart="436" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a0efbe333b29373696a0fbb9cf0f11af2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; dakku::VectorBase&lt; T, S, Derived &gt;::toFloatVector</definition>
        <argsstring>() const</argsstring>
        <name>toFloatVector</name>
        <briefdescription>
<para>convert this to float vector (Property::VECTOR) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the float vector </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="484" column="16" bodyfile="src/core/vector_base.h" bodystart="484" bodyend="488"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a3cfd9b2142d1366bc105463b24fd5149" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::VectorBase</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;v)</argsstring>
        <name>VectorBase</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref> Base object with std::vector&lt;float&gt; (Property::VECTOR) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the float vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="496" column="3" bodyfile="src/core/vector_base.h" bodystart="496" bodyend="500"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1aad720931a9787a87375de3f8d545567d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::x</definition>
        <argsstring>() const</argsstring>
        <name>x</name>
        <briefdescription>
<para>get the first element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="506" column="12" bodyfile="src/core/vector_base.h" bodystart="506" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ab937f5988070397cab4b236cda690356" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::x</definition>
        <argsstring>()</argsstring>
        <name>x</name>
        <briefdescription>
<para>get the first element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="515" column="12" bodyfile="src/core/vector_base.h" bodystart="515" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a14b6216fd55dc1cd2f321c834f6121ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::y</definition>
        <argsstring>() const</argsstring>
        <name>y</name>
        <briefdescription>
<para>get the second element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="524" column="12" bodyfile="src/core/vector_base.h" bodystart="524" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a4c537c79e56ad3b82ac56711dc774dc7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::y</definition>
        <argsstring>()</argsstring>
        <name>y</name>
        <briefdescription>
<para>get the second element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="533" column="12" bodyfile="src/core/vector_base.h" bodystart="533" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a207d3b94f85366aeb9e7773785a498ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::z</definition>
        <argsstring>() const</argsstring>
        <name>z</name>
        <briefdescription>
<para>get the third element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="542" column="12" bodyfile="src/core/vector_base.h" bodystart="542" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ad4683c184e26c7879ed8359c34162f9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::z</definition>
        <argsstring>()</argsstring>
        <name>z</name>
        <briefdescription>
<para>get the fourth element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="551" column="12" bodyfile="src/core/vector_base.h" bodystart="551" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a70ef47d449743bb4e68dba7e93a56488" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::w</definition>
        <argsstring>() const</argsstring>
        <name>w</name>
        <briefdescription>
<para>get the fourth element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="560" column="12" bodyfile="src/core/vector_base.h" bodystart="560" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a0abbcce49a53783f902e49b81b20b097" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::w</definition>
        <argsstring>()</argsstring>
        <name>w</name>
        <briefdescription>
<para>get the third element </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="569" column="12" bodyfile="src/core/vector_base.h" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a41e30926cb56189a7378f339bc175ccc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dakku::VectorBase&lt; T, S, Derived &gt;::maxElementIndex</definition>
        <argsstring>() const</argsstring>
        <name>maxElementIndex</name>
        <briefdescription>
<para>get the index of the max element </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="579" column="11" bodyfile="src/core/vector_base.h" bodystart="579" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ae42082956c30a3e7f611e421427a785f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::maxElement</definition>
        <argsstring>() const</argsstring>
        <name>maxElement</name>
        <briefdescription>
<para>get the max element in the vector </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the max value </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="588" column="12" bodyfile="src/core/vector_base.h" bodystart="588" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ae4f16b45f3696a2c75abcbe8c09120df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::begin</definition>
        <argsstring>()</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="590" column="12" bodyfile="src/core/vector_base.h" bodystart="590" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1abf676422e4f35272f97d5a9d286002b3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::begin</definition>
        <argsstring>() const</argsstring>
        <name>begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="591" column="12" bodyfile="src/core/vector_base.h" bodystart="591" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a77b079ddc174893319dbdb3bc1eb37ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::end</definition>
        <argsstring>()</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="592" column="12" bodyfile="src/core/vector_base.h" bodystart="592" bodyend="592"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a3b54e311208a4d3d90763cad329d1759" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::end</definition>
        <argsstring>() const</argsstring>
        <name>end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="593" column="12" bodyfile="src/core/vector_base.h" bodystart="593" bodyend="593"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a3c58e3c4dff9ad3a3a021c63ee8a7dfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::normalized</definition>
        <argsstring>() const</argsstring>
        <name>normalized</name>
        <briefdescription>
<para>normalized vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="641" column="12" bodyfile="src/core/vector_base.h" bodystart="641" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1aa7d5096dec8ced27b8637c43f689096c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived &amp;</type>
        <definition>Derived &amp; dakku::VectorBase&lt; T, S, Derived &gt;::normalize</definition>
        <argsstring>()</argsstring>
        <name>normalize</name>
        <briefdescription>
<para>normalize this </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="647" column="11" bodyfile="src/core/vector_base.h" bodystart="647" bodyend="650"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1ab55fd8f1a9e9835b5383189560c86973" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherDerived</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::dot</definition>
        <argsstring>(const VectorBase&lt; T, S, OtherDerived &gt; &amp;rhs) const</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref>&lt; T, S, OtherDerived &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>dot product between two vectors </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>$\vec a \cdot \vec b$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="658" column="12" bodyfile="src/core/vector_base.h" bodystart="658" bodyend="660"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a407486b0eb23a07bb98e2d5a50910695" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::squaredNorm</definition>
        <argsstring>() const</argsstring>
        <name>squaredNorm</name>
        <briefdescription>
<para>squared norm </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>$||v|| ^ 2$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="667" column="12" bodyfile="src/core/vector_base.h" bodystart="667" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a3de0043db1772cb93312cc158d00df03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::norm</definition>
        <argsstring>() const</argsstring>
        <name>norm</name>
        <briefdescription>
<para>norm </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>$||v||$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="674" column="12" bodyfile="src/core/vector_base.h" bodystart="674" bodyend="674"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a8cc945684d6dca638d46a32ca403048d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::VectorBase&lt; T, S, Derived &gt;::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
<para>length </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>$||v||$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="681" column="12" bodyfile="src/core/vector_base.h" bodystart="681" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1acb5565956ec02b69198a23c5e4046aa6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived dakku::VectorBase&lt; T, S, Derived &gt;::cross</definition>
        <argsstring>(const Derived &amp;rhs) const</argsstring>
        <name>cross</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>cross product </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="705" column="11" bodyfile="src/core/vector_base.h" bodystart="705" bodyend="710"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a3d663b309168d884b55d82b001b18ecb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dakku::VectorBase&lt; T, S, Derived &gt;::isZero</definition>
        <argsstring>() const</argsstring>
        <name>isZero</name>
        <briefdescription>
<para>check whether all components are zero </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="716" column="9" bodyfile="src/core/vector_base.h" bodystart="716" bodyend="718"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a05114dfb3499a8d0410b6b4bb8106706" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::operator std::span&lt; T, S &gt;</definition>
        <argsstring>()</argsstring>
        <name>operator std::span&lt; T, S &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="771" column="3" bodyfile="src/core/vector_base.h" bodystart="771" bodyend="771"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1VectorBase_1a4e2cdbb5d684d8b3337ebdb93d756e5b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::VectorBase&lt; T, S, Derived &gt;::operator std::span&lt; const T, S &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator std::span&lt; const T, S &gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="772" column="3" bodyfile="src/core/vector_base.h" bodystart="772" bodyend="772"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a531ed133257631916fc3384392b2ab7f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream &amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const VectorBase &amp;vec)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classdakku_1_1VectorBase" kindref="compound">VectorBase</ref> &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>output the vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>ostream </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector to output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ostream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="188" column="10" bodyfile="src/core/vector_base.h" bodystart="188" bodyend="190"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a6a604c24b1049ff1e9c3c12e9a26fff9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived operator+</definition>
        <argsstring>(const Derived &amp;a, const Derived &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>vector $\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>vector $\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>$\vec a + \vec b$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="273" column="18" bodyfile="src/core/vector_base.h" bodystart="273" bodyend="277"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1aaeb63fd4c52bae59b7e867829e8b1025" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator+</definition>
        <argsstring>(const Derived &amp;a, const U &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>b</parametertype>
<parametername>$b</parametername>
<parametertype>b</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise add b </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="287" column="18" bodyfile="src/core/vector_base.h" bodystart="287" bodyend="291"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a5de1f00d31ab772c98c21a49c30dc9f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator+</definition>
        <argsstring>(const U &amp;a, const Derived &amp;b)</argsstring>
        <name>operator+</name>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>addition </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>a</parametertype>
<parametername>$a</parametername>
<parametertype>a</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise add a </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="301" column="18" bodyfile="src/core/vector_base.h" bodystart="301" bodyend="303"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a6a6648d452714192c0f8183c3dbfa55f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator-</definition>
        <argsstring>(const Derived &amp;a, const U &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>subtraction </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>b</parametertype>
<parametername>$b</parametername>
<parametertype>b</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise sub </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="336" column="18" bodyfile="src/core/vector_base.h" bodystart="336" bodyend="340"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1ae0aaf7fd6e1e306948150d83050aff99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator-</definition>
        <argsstring>(const U &amp;a, const Derived &amp;b)</argsstring>
        <name>operator-</name>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>subtraction </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>a</parametertype>
<parametername>$a</parametername>
<parametertype>a</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise sub </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="350" column="18" bodyfile="src/core/vector_base.h" bodystart="350" bodyend="354"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a0c6afadb59bcfa664f49854936d20346" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived operator*</definition>
        <argsstring>(const Derived &amp;a, const Derived &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>multiplication </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>vector $\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>vector $\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise mul </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="386" column="18" bodyfile="src/core/vector_base.h" bodystart="386" bodyend="390"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1ad0aaef0a09d0762e9337d9646ef5fa21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator*</definition>
        <argsstring>(const Derived &amp;a, const U &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>multiplication </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>b</parametertype>
<parametername>$b</parametername>
<parametertype>b</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>$b\vec a$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="400" column="18" bodyfile="src/core/vector_base.h" bodystart="400" bodyend="404"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a0cad9fc72b0af9e62bcdfa8867e72568" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator*</definition>
        <argsstring>(const U &amp;a, const Derived &amp;b)</argsstring>
        <name>operator*</name>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>multiplication </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>a</parametertype>
<parametername>$a</parametername>
<parametertype>a</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise mul </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="414" column="18" bodyfile="src/core/vector_base.h" bodystart="414" bodyend="416"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1ab9d87c9943039f3db32f3a6c703400b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived operator/</definition>
        <argsstring>(const Derived &amp;a, const Derived &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>division </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>vector $\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>vector $\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise div </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="447" column="18" bodyfile="src/core/vector_base.h" bodystart="447" bodyend="451"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1aa48350ae3efe11576023da906438f0c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator/</definition>
        <argsstring>(const Derived &amp;a, const U &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const U &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>division </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec a$ </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametertype>b</parametertype>
<parametername>$b</parametername>
<parametertype>b</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>$\vec a / b$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="461" column="18" bodyfile="src/core/vector_base.h" bodystart="461" bodyend="465"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1ab4cd237f595d4bfe30fe64074eccd277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived operator/</definition>
        <argsstring>(const U &amp;a, const Derived &amp;b)</argsstring>
        <name>operator/</name>
        <param>
          <type>const U &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>division </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametertype>a</parametertype>
<parametername>$a</parametername>
<parametertype>a</parametertype>
<parametername>$</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>$\vec b$ </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>elementwise div (broad cast $a$) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="475" column="18" bodyfile="src/core/vector_base.h" bodystart="475" bodyend="477"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1ab4e667ac24d41b5ddcbe5cdad3698336" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Derived &amp;a, const Derived &amp;b)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a == b (element wise) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="599" column="15" bodyfile="src/core/vector_base.h" bodystart="599" bodyend="601"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1aa26d1cd14931c869845edd5b7471b498" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Derived &amp;a, const Derived &amp;b)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>a != b (element wise) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="607" column="15" bodyfile="src/core/vector_base.h" bodystart="607" bodyend="609"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a20d678a0f44b6e403a5a874227e6ee89" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived max</definition>
        <argsstring>(const Derived &amp;v1, const Derived &amp;v2)</argsstring>
        <name>max</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>element wise max </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="615" column="18" bodyfile="src/core/vector_base.h" bodystart="615" bodyend="619"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a0937015e2554ad069369c9f8b1697b06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived min</definition>
        <argsstring>(const Derived &amp;v1, const Derived &amp;v2)</argsstring>
        <name>min</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
<para>element wise min </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="625" column="18" bodyfile="src/core/vector_base.h" bodystart="625" bodyend="629"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1abc86f2d398f3082ed867b4a685720d06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived normalize</definition>
        <argsstring>(const Derived &amp;v)</argsstring>
        <name>normalize</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>normalized vector </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="635" column="18" bodyfile="src/core/vector_base.h" bodystart="635" bodyend="635"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a9ed3b83465f89ef9e216e6f70a3be3c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) distance</definition>
        <argsstring>(const Derived &amp;a, const Derived &amp;b)</argsstring>
        <name>distance</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>the distance </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="687" column="19" bodyfile="src/core/vector_base.h" bodystart="687" bodyend="689"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a0edf71c48dff606bc0173b7a8f55cf4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) abs</definition>
        <argsstring>(const Derived &amp;v)</argsstring>
        <name>abs</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>abs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="695" column="19" bodyfile="src/core/vector_base.h" bodystart="695" bodyend="699"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a4f610bf85df7ec868b857a8e1542bb4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived sqrt</definition>
        <argsstring>(const Derived &amp;v)</argsstring>
        <name>sqrt</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>element-wise sqrt </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="724" column="18" bodyfile="src/core/vector_base.h" bodystart="724" bodyend="728"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1a6d186fbf4a1071a8ae202382485dc859" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>E</declname>
            <defname>E</defname>
          </param>
        </templateparamlist>
        <type>Derived</type>
        <definition>Derived pow</definition>
        <argsstring>(const Derived &amp;v, E e)</argsstring>
        <name>pow</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>E</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>element-wise power </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="735" column="18" bodyfile="src/core/vector_base.h" bodystart="735" bodyend="739"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1afd74fa091a074a68449d1f8e493fd745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived exp</definition>
        <argsstring>(const Derived &amp;v)</argsstring>
        <name>exp</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>element-wise exp </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="745" column="18" bodyfile="src/core/vector_base.h" bodystart="745" bodyend="749"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1ac1a4a8247b5394c188dcea147def6a2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived floor</definition>
        <argsstring>(const Derived &amp;v)</argsstring>
        <name>floor</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>element-wise floor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="755" column="18" bodyfile="src/core/vector_base.h" bodystart="755" bodyend="759"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1ae6e15655167cb8377e29a6cc3198c18e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived ceil</definition>
        <argsstring>(const Derived &amp;v)</argsstring>
        <name>ceil</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>element-wise ceil </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="765" column="18" bodyfile="src/core/vector_base.h" bodystart="765" bodyend="769"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1VectorBase_1aa9cb373efabe5965e5f2f01d0c884084" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Derived</type>
        <definition>Derived lerp</definition>
        <argsstring>(const Derived &amp;a, const Derived &amp;b, T t)</argsstring>
        <name>lerp</name>
        <param>
          <type>const Derived &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Derived &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>T</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>element-wise linear interpolation </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/vector_base.h" line="778" column="18" bodyfile="src/core/vector_base.h" bodystart="778" bodyend="782"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>vector base class </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension of the vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>derived class type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>dakku::CoefficientSpectrum&lt; 3, RgbSpectrum &gt;</label>
        <link refid="classdakku_1_1CoefficientSpectrum"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>dakku::RgbSpectrum</label>
        <link refid="classdakku_1_1RgbSpectrum"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>dakku::VectorBase&lt; T, S, Derived &gt;</label>
        <link refid="classdakku_1_1VectorBase"/>
      </node>
    </inheritancegraph>
    <location file="src/core/vector_base.h" line="21" column="1" bodyfile="src/core/vector_base.h" bodystart="21" bodyend="787"/>
    <listofallmembers>
      <member refid="classdakku_1_1VectorBase_1adfeaa30c58620f0e4e8cbc9bc911c60c" prot="protected" virt="non-virtual"><scope>dakku::VectorBase</scope><name>_data</name></member>
      <member refid="classdakku_1_1VectorBase_1a0edf71c48dff606bc0173b7a8f55cf4a" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>abs</name></member>
      <member refid="classdakku_1_1VectorBase_1ae4f16b45f3696a2c75abcbe8c09120df" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>begin</name></member>
      <member refid="classdakku_1_1VectorBase_1abf676422e4f35272f97d5a9d286002b3" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>begin</name></member>
      <member refid="classdakku_1_1VectorBase_1ae6e15655167cb8377e29a6cc3198c18e" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>ceil</name></member>
      <member refid="classdakku_1_1VectorBase_1acb5565956ec02b69198a23c5e4046aa6" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>cross</name></member>
      <member refid="classdakku_1_1VectorBase_1a164c7c788c4967c1c6ebcf7ae8466ba8" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>derived</name></member>
      <member refid="classdakku_1_1VectorBase_1abb0f3e3fa71aaf063c3a5a6002fcbf1f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>derived</name></member>
      <member refid="classdakku_1_1VectorBase_1a9ed3b83465f89ef9e216e6f70a3be3c9" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>distance</name></member>
      <member refid="classdakku_1_1VectorBase_1ab55fd8f1a9e9835b5383189560c86973" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>dot</name></member>
      <member refid="classdakku_1_1VectorBase_1a77b079ddc174893319dbdb3bc1eb37ee" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>end</name></member>
      <member refid="classdakku_1_1VectorBase_1a3b54e311208a4d3d90763cad329d1759" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>end</name></member>
      <member refid="classdakku_1_1VectorBase_1afd74fa091a074a68449d1f8e493fd745" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>exp</name></member>
      <member refid="classdakku_1_1VectorBase_1ac1a4a8247b5394c188dcea147def6a2a" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>floor</name></member>
      <member refid="classdakku_1_1VectorBase_1ae498067d7973072d02c9417b8b677e83" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>get</name></member>
      <member refid="classdakku_1_1VectorBase_1a24b199ecb70deba0853e9532b888a183" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>hasNaNs</name></member>
      <member refid="classdakku_1_1VectorBase_1a3d663b309168d884b55d82b001b18ecb" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>isZero</name></member>
      <member refid="classdakku_1_1VectorBase_1a8cc945684d6dca638d46a32ca403048d" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>length</name></member>
      <member refid="classdakku_1_1VectorBase_1aa9cb373efabe5965e5f2f01d0c884084" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>lerp</name></member>
      <member refid="classdakku_1_1VectorBase_1a20d678a0f44b6e403a5a874227e6ee89" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>max</name></member>
      <member refid="classdakku_1_1VectorBase_1ae42082956c30a3e7f611e421427a785f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>maxElement</name></member>
      <member refid="classdakku_1_1VectorBase_1a41e30926cb56189a7378f339bc175ccc" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>maxElementIndex</name></member>
      <member refid="classdakku_1_1VectorBase_1a0937015e2554ad069369c9f8b1697b06" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>min</name></member>
      <member refid="classdakku_1_1VectorBase_1a3de0043db1772cb93312cc158d00df03" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>norm</name></member>
      <member refid="classdakku_1_1VectorBase_1abc86f2d398f3082ed867b4a685720d06" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>normalize</name></member>
      <member refid="classdakku_1_1VectorBase_1aa7d5096dec8ced27b8637c43f689096c" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>normalize</name></member>
      <member refid="classdakku_1_1VectorBase_1a3c58e3c4dff9ad3a3a021c63ee8a7dfe" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>normalized</name></member>
      <member refid="classdakku_1_1VectorBase_1a4e2cdbb5d684d8b3337ebdb93d756e5b" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator std::span&lt; const T, S &gt;</name></member>
      <member refid="classdakku_1_1VectorBase_1a05114dfb3499a8d0410b6b4bb8106706" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator std::span&lt; T, S &gt;</name></member>
      <member refid="classdakku_1_1VectorBase_1aa26d1cd14931c869845edd5b7471b498" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator!=</name></member>
      <member refid="classdakku_1_1VectorBase_1a0c6afadb59bcfa664f49854936d20346" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator*</name></member>
      <member refid="classdakku_1_1VectorBase_1ad0aaef0a09d0762e9337d9646ef5fa21" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator*</name></member>
      <member refid="classdakku_1_1VectorBase_1a0cad9fc72b0af9e62bcdfa8867e72568" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator*</name></member>
      <member refid="classdakku_1_1VectorBase_1a5353b2617ac5343efeee0f325632d772" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator*=</name></member>
      <member refid="classdakku_1_1VectorBase_1ad4136ad736840507f9fc902d9d6c6dfd" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator*=</name></member>
      <member refid="classdakku_1_1VectorBase_1a6a604c24b1049ff1e9c3c12e9a26fff9" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+</name></member>
      <member refid="classdakku_1_1VectorBase_1aaeb63fd4c52bae59b7e867829e8b1025" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+</name></member>
      <member refid="classdakku_1_1VectorBase_1a5de1f00d31ab772c98c21a49c30dc9f8" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+</name></member>
      <member refid="classdakku_1_1VectorBase_1ae64bc6bd658a94d08f3b407fcb0e7fba" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+=</name></member>
      <member refid="classdakku_1_1VectorBase_1a3351845012fbb55d54623d8af9c44a79" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator+=</name></member>
      <member refid="classdakku_1_1VectorBase_1a838ade15abc3b13923aa49d191c1b796" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator-</name></member>
      <member refid="classdakku_1_1VectorBase_1a6a6648d452714192c0f8183c3dbfa55f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator-</name></member>
      <member refid="classdakku_1_1VectorBase_1ae0aaf7fd6e1e306948150d83050aff99" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator-</name></member>
      <member refid="classdakku_1_1VectorBase_1ad6e6b4c4275de701f79d952ed56fe9ff" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator-=</name></member>
      <member refid="classdakku_1_1VectorBase_1a846dad82a5cd66baba195846d3da7c9d" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator-=</name></member>
      <member refid="classdakku_1_1VectorBase_1ab9d87c9943039f3db32f3a6c703400b0" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator/</name></member>
      <member refid="classdakku_1_1VectorBase_1aa48350ae3efe11576023da906438f0c8" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator/</name></member>
      <member refid="classdakku_1_1VectorBase_1ab4cd237f595d4bfe30fe64074eccd277" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator/</name></member>
      <member refid="classdakku_1_1VectorBase_1add8d1fe3254c662f2c6bfc6beb541c9e" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator/=</name></member>
      <member refid="classdakku_1_1VectorBase_1ad5b06200c617ca92964ad3d81787848f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator/=</name></member>
      <member refid="classdakku_1_1VectorBase_1a531ed133257631916fc3384392b2ab7f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator&lt;&lt;</name></member>
      <member refid="classdakku_1_1VectorBase_1afe4959c7c80f7ae0297325ca971cc97a" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator=</name></member>
      <member refid="classdakku_1_1VectorBase_1a9a1f1574000785aa4037f604a4fa21e2" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator=</name></member>
      <member refid="classdakku_1_1VectorBase_1ab4e667ac24d41b5ddcbe5cdad3698336" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator==</name></member>
      <member refid="classdakku_1_1VectorBase_1ada05b4cd2b9838400f490961dc3ac825" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator[]</name></member>
      <member refid="classdakku_1_1VectorBase_1a619efcd85e3a91770ccae7f80031e55e" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>operator[]</name></member>
      <member refid="classdakku_1_1VectorBase_1a6d186fbf4a1071a8ae202382485dc859" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>pow</name></member>
      <member refid="classdakku_1_1VectorBase_1afa4cd455e4e2f12a88695122e221ca13" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>set</name></member>
      <member refid="classdakku_1_1VectorBase_1a47ce308974d85dac95130bc829603e52" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>set</name></member>
      <member refid="classdakku_1_1VectorBase_1a9ff0cd03971a94292507a01ba8852557" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>set</name></member>
      <member refid="classdakku_1_1VectorBase_1a490cefc87b4becdd6a938140e2f8e533" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>set</name></member>
      <member refid="classdakku_1_1VectorBase_1aa040165f6c4711d6ac753670e76e868e" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>setByIndex</name></member>
      <member refid="classdakku_1_1VectorBase_1acc8e8a5aa7749125a4f6aa11b92f9dae" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>size</name></member>
      <member refid="classdakku_1_1VectorBase_1a4f610bf85df7ec868b857a8e1542bb4a" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>sqrt</name></member>
      <member refid="classdakku_1_1VectorBase_1a407486b0eb23a07bb98e2d5a50910695" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>squaredNorm</name></member>
      <member refid="classdakku_1_1VectorBase_1a0efbe333b29373696a0fbb9cf0f11af2" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>toFloatVector</name></member>
      <member refid="classdakku_1_1VectorBase_1ad762f525bce13332abbd4b9157287ecd" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>toString</name></member>
      <member refid="classdakku_1_1VectorBase_1acae6683bc17650d9ff87aafa8cfb6b18" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1aee90251abb9484a6886f76d79091b96e" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1a3992f122fe320723d8a2b08aa0f0b658" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1acb37abb2d3484b94e77ce4db959e4aa5" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1a707acaad663a7d8c53b0f31db60ad21f" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1a3cfd9b2142d1366bc105463b24fd5149" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>VectorBase</name></member>
      <member refid="classdakku_1_1VectorBase_1a70ef47d449743bb4e68dba7e93a56488" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>w</name></member>
      <member refid="classdakku_1_1VectorBase_1a0abbcce49a53783f902e49b81b20b097" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>w</name></member>
      <member refid="classdakku_1_1VectorBase_1aad720931a9787a87375de3f8d545567d" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>x</name></member>
      <member refid="classdakku_1_1VectorBase_1ab937f5988070397cab4b236cda690356" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>x</name></member>
      <member refid="classdakku_1_1VectorBase_1a14b6216fd55dc1cd2f321c834f6121ca" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>y</name></member>
      <member refid="classdakku_1_1VectorBase_1a4c537c79e56ad3b82ac56711dc774dc7" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>y</name></member>
      <member refid="classdakku_1_1VectorBase_1a207d3b94f85366aeb9e7773785a498ea" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>z</name></member>
      <member refid="classdakku_1_1VectorBase_1ad4683c184e26c7879ed8359c34162f9b" prot="public" virt="non-virtual"><scope>dakku::VectorBase</scope><name>z</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
