<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="classdakku_1_1BoundsBase" kind="class" language="C++" prot="public">
    <compoundname>dakku::BoundsBase</compoundname>
    <includes refid="bounds_8h" local="no">bounds.h</includes>
    <templateparamlist>
      <param>
        <type>ArithmeticType</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>size_t</type>
        <declname>S</declname>
        <defname>S</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" prot="public" static="no" mutable="no">
        <type><ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt;</type>
        <definition>Point&lt;T, S&gt; dakku::BoundsBase&lt; T, S &gt;::pMin</definition>
        <argsstring></argsstring>
        <name>pMin</name>
        <initializer>{std::numeric_limits&lt;T&gt;::max()}</initializer>
        <briefdescription>
<para>left bottom corner of the bounds </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="164" column="9" bodyfile="src/core/bounds.h" bodystart="164" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" prot="public" static="no" mutable="no">
        <type><ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt;</type>
        <definition>Point&lt;T, S&gt; dakku::BoundsBase&lt; T, S &gt;::pMax</definition>
        <argsstring></argsstring>
        <name>pMax</name>
        <initializer>{std::numeric_limits&lt;T&gt;::lowest()}</initializer>
        <briefdescription>
<para>right top corner of the bounds </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="166" column="9" bodyfile="src/core/bounds.h" bodystart="166" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1a4dea00502d665d2f3e6657507a9b03fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>dakku::BoundsBase&lt; T, S &gt;::BoundsBase</definition>
        <argsstring>()=default</argsstring>
        <name>BoundsBase</name>
        <briefdescription>
<para>default constructor </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="21" column="3"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1a4707e959360ddbc591c0645854575ad9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::BoundsBase&lt; T, S &gt;::BoundsBase</definition>
        <argsstring>(const Point&lt; T, S &gt; &amp;p)</argsstring>
        <name>BoundsBase</name>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2</ref> with a point. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the given point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="28" column="12" bodyfile="src/core/bounds.h" bodystart="28" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1ac2e934c9361722edb8bb081686feff62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>dakku::BoundsBase&lt; T, S &gt;::BoundsBase</definition>
        <argsstring>(const Point&lt; T, S &gt; &amp;p1, const Point&lt; T, S &gt; &amp;p2)</argsstring>
        <name>BoundsBase</name>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>p1</declname>
        </param>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>p2</declname>
        </param>
        <briefdescription>
<para>Construct a new Bounds Base object with two points (take min/max of them to pMin and pMax) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="35" column="3" bodyfile="src/core/bounds.h" bodystart="35" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1ae578a4e99b038d678ceef58b0acde222" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>U</declname>
            <defname>U</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>dakku::BoundsBase&lt; T, S &gt;::operator BoundsBase&lt; U, S &gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator BoundsBase&lt; U, S &gt;</name>
        <briefdescription>
<para>cast data type of bounds </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="43" column="12" bodyfile="src/core/bounds.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1a07b1800b4e56f7f2daf1f59785215aee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref>&lt; T, S &gt;</type>
        <definition>Vector&lt; T, S &gt; dakku::BoundsBase&lt; T, S &gt;::diagonal</definition>
        <argsstring>() const</argsstring>
        <name>diagonal</name>
        <briefdescription>
<para>get the diagonal of the bounding box </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="51" column="11" bodyfile="src/core/bounds.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1acaa8ef9b9991109e049d9409a1216518" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t dakku::BoundsBase&lt; T, S &gt;::maxExtent</definition>
        <argsstring>() const</argsstring>
        <name>maxExtent</name>
        <briefdescription>
<para>get the dimension who has the maximum extent </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the dimension </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="58" column="11" bodyfile="src/core/bounds.h" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1acd1339c39870cd9bac4a0c2ee3726d20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dakku::BoundsBase&lt; T, S &gt;::operator==</definition>
        <argsstring>(const BoundsBase &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="62" column="8" bodyfile="src/core/bounds.h" bodystart="62" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1a06fb31654a6571636ccab3b28d4edbaf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool dakku::BoundsBase&lt; T, S &gt;::operator!=</definition>
        <argsstring>(const BoundsBase &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="66" column="8" bodyfile="src/core/bounds.h" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1ac3a04d4a5ba9884d9ab2734c5c94248f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt;</type>
        <definition>Point&lt; T, S &gt; dakku::BoundsBase&lt; T, S &gt;::lerp</definition>
        <argsstring>(const Point&lt; float, S &gt; &amp;t) const</argsstring>
        <name>lerp</name>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; float, S &gt; &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>linera interpolation between pMin and pMax </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>t</parametername>
</parameternamelist>
<parameterdescription>
<para>interpolate $t$ (element wise) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="75" column="10" bodyfile="src/core/bounds.h" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1a91d113dc02fe1d57163f8b2cee408ed1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref>&lt; T, S &gt;</type>
        <definition>Vector&lt; T, S &gt; dakku::BoundsBase&lt; T, S &gt;::offset</definition>
        <argsstring>(const Point&lt; T, S &gt; &amp;p) const</argsstring>
        <name>offset</name>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
<para>get the offset $v$ of a point, p = o + v * d </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the offset </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="87" column="11" bodyfile="src/core/bounds.h" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classdakku_1_1BoundsBase_1a1533ac65725aee5fa771b9e068f1050d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void dakku::BoundsBase&lt; T, S &gt;::boundingSphere</definition>
        <argsstring>(Point&lt; T, S &gt; &amp;center, float &amp;rad)</argsstring>
        <name>boundingSphere</name>
        <param>
          <type><ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>center</declname>
        </param>
        <param>
          <type>float &amp;</type>
          <declname>rad</declname>
        </param>
        <briefdescription>
<para>get the bounding sphere of the bounds </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">center</parametername>
</parameternamelist>
<parameterdescription>
<para>the center of the sphere </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rad</parametername>
</parameternamelist>
<parameterdescription>
<para>the radius of the sphere </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="158" column="8" bodyfile="src/core/bounds.h" bodystart="158" bodyend="161"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classdakku_1_1BoundsBase_1a354b7ef9e0dc908b9eca0a47f64cd37c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool overlaps</definition>
        <argsstring>(const BoundsBase &amp;a, const BoundsBase &amp;b)</argsstring>
        <name>overlaps</name>
        <param>
          <type>const <ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>check whether two bounds overlaps </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="98" column="15" bodyfile="src/core/bounds.h" bodystart="98" bodyend="102"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1BoundsBase_1a4ba0780dc5fab304376d54affb497ae8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool inside</definition>
        <argsstring>(const Point&lt; T, S &gt; &amp;p, const BoundsBase &amp;b)</argsstring>
        <name>inside</name>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>check whether point is inside the bounds (exclusive) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="110" column="15" bodyfile="src/core/bounds.h" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1BoundsBase_1aaac97265d9f25e86e8a992a5bf5a96d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool insideExclusive</definition>
        <argsstring>(const Point&lt; T, S &gt; &amp;p, const BoundsBase &amp;b)</argsstring>
        <name>insideExclusive</name>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>check whether point is inside the bounds (inclusive) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="122" column="15" bodyfile="src/core/bounds.h" bodystart="122" bodyend="126"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1BoundsBase_1abfbe6e5a21f265e66a85a4ac6abb9083" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) distanceSquared</definition>
        <argsstring>(const Point&lt; T, S &gt; &amp;p, const BoundsBase &amp;b)</argsstring>
        <name>distanceSquared</name>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>minimum squared distance between point and bounds, if inside return 0 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the squared distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="136" column="19" bodyfile="src/core/bounds.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="friend" id="classdakku_1_1BoundsBase_1aaa212d5e2487285c3fa01207563498c8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>decltype(auto)</type>
        <definition>decltype(auto) distance</definition>
        <argsstring>(const Point&lt; T, S &gt; &amp;p, const BoundsBase &amp;b)</argsstring>
        <name>distance</name>
        <param>
          <type>const <ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, S &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>const <ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>minimum distance between point and bounds, if inside return 0 </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>p</parametername>
</parameternamelist>
<parameterdescription>
<para>the point </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the bounds </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the distance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/bounds.h" line="148" column="19" bodyfile="src/core/bounds.h" bodystart="148" bodyend="150"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>bounding box base </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>data type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>dimension </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
    </detaileddescription>
    <location file="src/core/bounds.h" line="15" column="1" bodyfile="src/core/bounds.h" bodystart="15" bodyend="167"/>
    <listofallmembers>
      <member refid="classdakku_1_1BoundsBase_1a1533ac65725aee5fa771b9e068f1050d" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>boundingSphere</name></member>
      <member refid="classdakku_1_1BoundsBase_1a4dea00502d665d2f3e6657507a9b03fb" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>BoundsBase</name></member>
      <member refid="classdakku_1_1BoundsBase_1a4707e959360ddbc591c0645854575ad9" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>BoundsBase</name></member>
      <member refid="classdakku_1_1BoundsBase_1ac2e934c9361722edb8bb081686feff62" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>BoundsBase</name></member>
      <member refid="classdakku_1_1BoundsBase_1a07b1800b4e56f7f2daf1f59785215aee" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>diagonal</name></member>
      <member refid="classdakku_1_1BoundsBase_1aaa212d5e2487285c3fa01207563498c8" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>distance</name></member>
      <member refid="classdakku_1_1BoundsBase_1abfbe6e5a21f265e66a85a4ac6abb9083" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>distanceSquared</name></member>
      <member refid="classdakku_1_1BoundsBase_1a4ba0780dc5fab304376d54affb497ae8" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>inside</name></member>
      <member refid="classdakku_1_1BoundsBase_1aaac97265d9f25e86e8a992a5bf5a96d4" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>insideExclusive</name></member>
      <member refid="classdakku_1_1BoundsBase_1ac3a04d4a5ba9884d9ab2734c5c94248f" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>lerp</name></member>
      <member refid="classdakku_1_1BoundsBase_1acaa8ef9b9991109e049d9409a1216518" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>maxExtent</name></member>
      <member refid="classdakku_1_1BoundsBase_1a91d113dc02fe1d57163f8b2cee408ed1" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>offset</name></member>
      <member refid="classdakku_1_1BoundsBase_1ae578a4e99b038d678ceef58b0acde222" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>operator BoundsBase&lt; U, S &gt;</name></member>
      <member refid="classdakku_1_1BoundsBase_1a06fb31654a6571636ccab3b28d4edbaf" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>operator!=</name></member>
      <member refid="classdakku_1_1BoundsBase_1acd1339c39870cd9bac4a0c2ee3726d20" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>operator==</name></member>
      <member refid="classdakku_1_1BoundsBase_1a354b7ef9e0dc908b9eca0a47f64cd37c" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>overlaps</name></member>
      <member refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>pMax</name></member>
      <member refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" prot="public" virt="non-virtual"><scope>dakku::BoundsBase</scope><name>pMin</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
