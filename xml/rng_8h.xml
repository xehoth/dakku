<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="rng_8h" kind="file" language="C++">
    <compoundname>rng.h</compoundname>
    <includes refid="core_2fwd_8h" local="no">core/fwd.h</includes>
    <incdepgraph>
      <node id="2">
        <label>core/fwd.h</label>
        <link refid="core_2fwd_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/core/rng.h</label>
        <link refid="rng_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="9">
        <label>bit</label>
      </node>
      <node id="7">
        <label>cmath</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="5">
        <label>limits</label>
      </node>
      <node id="6">
        <label>numbers</label>
      </node>
      <node id="4">
        <label>type_traits</label>
      </node>
    </incdepgraph>
    <innerclass refid="classdakku_1_1RNG" prot="public">dakku::RNG</innerclass>
    <innernamespace refid="namespacedakku">dakku</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DAKKU_CORE_RNG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DAKKU_CORE_RNG_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="core_2fwd_8h" kindref="compound">core/fwd.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedakku" kindref="compound">dakku</ref><sp/>{</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::uint64_t<sp/>PCG32_DEFAULT_STATE<sp/>=<sp/>0x853c49e6748fea9bull;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::uint64_t<sp/>PCG32_DEFAULT_STREAM<sp/>=<sp/>0xda3e39cb94b95bdbull;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">constexpr</highlight><highlight class="normal"><sp/>std::uint64_t<sp/>PCG32_MULT<sp/>=<sp/>0x5851f42d4c957f2dull;</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="classdakku_1_1RNG" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1RNG" kindref="compound">RNG</ref><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="17" refid="classdakku_1_1RNG_1a60a4df7bce09a12570d945cc5671ef12" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1RNG_1a60a4df7bce09a12570d945cc5671ef12" kindref="member">RNG</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="18" refid="classdakku_1_1RNG_1a91e29e4de22f6c2b40b3815828b895ef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1RNG_1a91e29e4de22f6c2b40b3815828b895ef" kindref="member">RNG</ref>(std::uint64_t<sp/>sequenceIndex)<sp/>{<sp/><ref refid="classdakku_1_1RNG_1a9882a1720e68db403e2c592954d072bf" kindref="member">setSequence</ref>(sequenceIndex);<sp/>}</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1RNG_1a9882a1720e68db403e2c592954d072bf" kindref="member">setSequence</ref>(std::uint64_t<sp/>initseq);</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::uint32_t<sp/><ref refid="classdakku_1_1RNG_1a6aee8cf23d2433e6886b5a49956969fa" kindref="member">uniformUInt32</ref>();</highlight></codeline>
<codeline lineno="21" refid="classdakku_1_1RNG_1affe6ab66ec7f8bde975e14370fbf9a8f" refkind="member"><highlight class="normal"><sp/><sp/>std::uint32_t<sp/><ref refid="classdakku_1_1RNG_1affe6ab66ec7f8bde975e14370fbf9a8f" kindref="member">uniformUInt32</ref>(std::uint32_t<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>std::uint32_t<sp/>threshold<sp/>=<sp/>(~b<sp/>+<sp/>1u)<sp/>%<sp/>b;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::uint32_t<sp/>r<sp/>=<sp/><ref refid="classdakku_1_1RNG_1a6aee8cf23d2433e6886b5a49956969fa" kindref="member">uniformUInt32</ref>();</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(r<sp/>&gt;=<sp/>threshold)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>r<sp/>%<sp/>b;</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="28" refid="classdakku_1_1RNG_1abaa85824d4779a1793a6f2d895e79549" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1RNG_1abaa85824d4779a1793a6f2d895e79549" kindref="member">uniformFloat</ref>()<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::min(ONE_MINUS_EPSILON,</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classdakku_1_1RNG_1a6aee8cf23d2433e6886b5a49956969fa" kindref="member">uniformUInt32</ref>())<sp/>*<sp/>0x1p-32f);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>std::uint64_t<sp/>state{PCG32_DEFAULT_STATE},<sp/>inc{PCG32_DEFAULT_STREAM};</highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classdakku_1_1RNG_1a9882a1720e68db403e2c592954d072bf" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1RNG_1a9882a1720e68db403e2c592954d072bf" kindref="member">RNG::setSequence</ref>(std::uint64_t<sp/>initseq)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>0u;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>inc<sp/>=<sp/>(initseq<sp/>&lt;&lt;<sp/>1u)<sp/>|<sp/>1u;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1RNG_1a6aee8cf23d2433e6886b5a49956969fa" kindref="member">uniformUInt32</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>state<sp/>+=<sp/>PCG32_DEFAULT_STATE;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1RNG_1a6aee8cf23d2433e6886b5a49956969fa" kindref="member">uniformUInt32</ref>();</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classdakku_1_1RNG_1a6aee8cf23d2433e6886b5a49956969fa" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::uint32_t<sp/><ref refid="classdakku_1_1RNG_1a6aee8cf23d2433e6886b5a49956969fa" kindref="member">RNG::uniformUInt32</ref>()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>std::uint64_t<sp/>oldstate<sp/>=<sp/>state;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>state<sp/>=<sp/>oldstate<sp/>*<sp/>PCG32_MULT<sp/>+<sp/>inc;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>xorshifted<sp/>=</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(((oldstate<sp/>&gt;&gt;<sp/>18u)<sp/>^<sp/>oldstate)<sp/>&gt;&gt;<sp/>27u);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>rot<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">std::uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oldstate<sp/>&gt;&gt;<sp/>59u);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(xorshifted<sp/>&gt;&gt;<sp/>rot)<sp/>|<sp/>(xorshifted<sp/>&lt;&lt;<sp/>((~rot<sp/>+<sp/>1u)<sp/>&amp;<sp/>31));</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dakku</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/core/rng.h"/>
  </compounddef>
</doxygen>
