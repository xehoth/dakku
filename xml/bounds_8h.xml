<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="bounds_8h" kind="file" language="C++">
    <compoundname>bounds.h</compoundname>
    <includes refid="vector_8h" local="no">core/vector.h</includes>
    <includes local="no">iterator</includes>
    <includes local="no">utility</includes>
    <includedby refid="core_2film_8h" local="no">src/core/film.h</includedby>
    <includedby refid="shape_8h" local="no">src/core/shape.h</includedby>
    <incdepgraph>
      <node id="1">
        <label>src/core/bounds.h</label>
        <link refid="bounds_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>core/fwd.h</label>
        <link refid="core_2fwd_8h"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>core/logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>core/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/vector_base.h</label>
        <link refid="vector__base_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="17">
        <label>algorithm</label>
      </node>
      <node id="16">
        <label>array</label>
      </node>
      <node id="12">
        <label>bit</label>
      </node>
      <node id="10">
        <label>cmath</label>
      </node>
      <node id="11">
        <label>cstdint</label>
      </node>
      <node id="15">
        <label>cstdlib</label>
      </node>
      <node id="22">
        <label>iterator</label>
      </node>
      <node id="8">
        <label>limits</label>
      </node>
      <node id="9">
        <label>numbers</label>
      </node>
      <node id="20">
        <label>numeric</label>
      </node>
      <node id="19">
        <label>ostream</label>
      </node>
      <node id="21">
        <label>span</label>
      </node>
      <node id="14">
        <label>spdlog/fmt/ostr.h</label>
      </node>
      <node id="13">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="18">
        <label>string</label>
      </node>
      <node id="7">
        <label>type_traits</label>
      </node>
      <node id="23">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3">
        <label>src/core/api.h</label>
        <link refid="core_2api_8h"/>
      </node>
      <node id="1">
        <label>src/core/bounds.h</label>
        <link refid="bounds_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/core/film.h</label>
        <link refid="core_2film_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>src/core/shape.h</label>
        <link refid="shape_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classdakku_1_1BoundsBase" prot="public">dakku::BoundsBase</innerclass>
    <innerclass refid="classdakku_1_1Bounds2" prot="public">dakku::Bounds2</innerclass>
    <innerclass refid="classdakku_1_1Bounds3" prot="public">dakku::Bounds3</innerclass>
    <innerclass refid="classdakku_1_1Bounds2iIterator" prot="public">dakku::Bounds2iIterator</innerclass>
    <innernamespace refid="namespacedakku">dakku</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>DAKKU_CORE_BOUNDS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DAKKU_CORE_BOUNDS_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="vector_8h" kindref="compound">core/vector.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedakku" kindref="compound">dakku</ref><sp/>{</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>S&gt;</highlight></codeline>
<codeline lineno="16" refid="classdakku_1_1BoundsBase" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="22" refid="classdakku_1_1BoundsBase_1a4dea00502d665d2f3e6657507a9b03fb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1BoundsBase_1a4dea00502d665d2f3e6657507a9b03fb" kindref="member">BoundsBase</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="classdakku_1_1BoundsBase_1a4707e959360ddbc591c0645854575ad9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1a4707e959360ddbc591c0645854575ad9" kindref="member">BoundsBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p)<sp/>:<sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>(p),<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>(p)<sp/>{}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>U&gt;</highlight></codeline>
<codeline lineno="36" refid="classdakku_1_1BoundsBase_1ab17dcf1e9998aeb07b29614aaeb42118" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1ab17dcf1e9998aeb07b29614aaeb42118" kindref="member">BoundsBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase&lt;U, S&gt;</ref><sp/>&amp;b)</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>(<ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt;T,<sp/>S&gt;(b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>)),<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>(<ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt;T,<sp/>S&gt;(b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>))<sp/>{}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="classdakku_1_1BoundsBase_1ac2e934c9361722edb8bb081686feff62" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1BoundsBase_1ac2e934c9361722edb8bb081686feff62" kindref="member">BoundsBase</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p2)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>(min(p1,<sp/>p2)),<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>(max(p1,<sp/>p2))<sp/>{}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classdakku_1_1BoundsBase_1a07b1800b4e56f7f2daf1f59785215aee" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="classdakku_1_1Vector" kindref="compound">Vector&lt;T, S&gt;</ref><sp/><ref refid="classdakku_1_1BoundsBase_1a07b1800b4e56f7f2daf1f59785215aee" kindref="member">diagonal</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref><sp/>-<sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>;<sp/>}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classdakku_1_1BoundsBase_1acaa8ef9b9991109e049d9409a1216518" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1acaa8ef9b9991109e049d9409a1216518" kindref="member">maxExtent</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="classdakku_1_1BoundsBase_1a07b1800b4e56f7f2daf1f59785215aee" kindref="member">diagonal</ref>().maxElementIndex();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classdakku_1_1BoundsBase_1acd1339c39870cd9bac4a0c2ee3726d20" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1acd1339c39870cd9bac4a0c2ee3726d20" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>==<sp/>rhs.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>&amp;&amp;<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref><sp/>==<sp/>rhs.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classdakku_1_1BoundsBase_1a06fb31654a6571636ccab3b28d4edbaf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1a06fb31654a6571636ccab3b28d4edbaf" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>!=<sp/>rhs.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>||<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref><sp/>!=<sp/>rhs.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classdakku_1_1BoundsBase_1ac3a04d4a5ba9884d9ab2734c5c94248f" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/><ref refid="classdakku_1_1BoundsBase_1ac3a04d4a5ba9884d9ab2734c5c94248f" kindref="member">lerp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;float, S&gt;</ref><sp/>&amp;t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>ret;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)<sp/>ret[i]<sp/>=<sp/>std::lerp(<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>[i],<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>[i],<sp/>t[i]);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classdakku_1_1BoundsBase_1a91d113dc02fe1d57163f8b2cee408ed1" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/><ref refid="classdakku_1_1Vector" kindref="compound">Vector&lt;T, S&gt;</ref><sp/><ref refid="classdakku_1_1BoundsBase_1a91d113dc02fe1d57163f8b2cee408ed1" kindref="member">offset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1Vector" kindref="compound">Vector&lt;T, S&gt;</ref><sp/>o<sp/>=<sp/>p<sp/>-<sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>[i]<sp/>&gt;<sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>[i])<sp/>o[i]<sp/>/=<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>[i]<sp/>-<sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>[i];</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classdakku_1_1BoundsBase_1a354b7ef9e0dc908b9eca0a47f64cd37c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1a354b7ef9e0dc908b9eca0a47f64cd37c" kindref="member">overlaps</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(a.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>[i]<sp/>&gt;=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>[i]<sp/>&amp;&amp;<sp/>a.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>[i]<sp/>&lt;=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classdakku_1_1BoundsBase_1a4ba0780dc5fab304376d54affb497ae8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1a4ba0780dc5fab304376d54affb497ae8" kindref="member">inside</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p[i]<sp/>&gt;=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>[i]<sp/>&amp;&amp;<sp/>p[i]<sp/>&lt;=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classdakku_1_1BoundsBase_1aaac97265d9f25e86e8a992a5bf5a96d4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1aaac97265d9f25e86e8a992a5bf5a96d4" kindref="member">insideExclusive</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>S;<sp/>++i)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!(p[i]<sp/>&gt;=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>[i]<sp/>&amp;&amp;<sp/>p[i]<sp/>&lt;<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>[i]))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="classdakku_1_1BoundsBase_1abfbe6e5a21f265e66a85a4ac6abb9083" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1BoundsBase_1abfbe6e5a21f265e66a85a4ac6abb9083" kindref="member">distanceSquared</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max(<ref refid="classdakku_1_1Vector" kindref="compound">Vector&lt;T, S&gt;</ref>{},<sp/>max(b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>-<sp/>p,<sp/>p<sp/>-<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>)).squaredNorm();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classdakku_1_1BoundsBase_1aaa212d5e2487285c3fa01207563498c8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1BoundsBase_1aaa212d5e2487285c3fa01207563498c8" kindref="member">distance</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::sqrt(<ref refid="classdakku_1_1BoundsBase_1abfbe6e5a21f265e66a85a4ac6abb9083" kindref="member">distanceSquared</ref>(p,<sp/>b));</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="158" refid="classdakku_1_1BoundsBase_1a1533ac65725aee5fa771b9e068f1050d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase_1a1533ac65725aee5fa771b9e068f1050d" kindref="member">boundingSphere</ref>(<ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;center,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;rad)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>center<sp/>=<sp/>(<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>+<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>)<sp/>/<sp/>2;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>rad<sp/>=<sp/><ref refid="classdakku_1_1BoundsBase_1a4ba0780dc5fab304376d54affb497ae8" kindref="member">inside</ref>(center,<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>?<sp/><ref refid="classdakku_1_1BoundsBase_1aaa212d5e2487285c3fa01207563498c8" kindref="member">distance</ref>(center,<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>)<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classdakku_1_1BoundsBase_1a911ebeb367646117e45b81b7c3fceb02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/><ref refid="classdakku_1_1BoundsBase_1a911ebeb367646117e45b81b7c3fceb02" kindref="member">operator|</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>ret;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>=<sp/>min(a.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>,<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref><sp/>=<sp/>max(a.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>,<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="178" refid="classdakku_1_1BoundsBase_1a775827382a4cfcd6d7e18741bb7236f8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/><ref refid="classdakku_1_1BoundsBase_1a775827382a4cfcd6d7e18741bb7236f8" kindref="member">operator|</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/>&amp;p)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>ret;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>=<sp/>min(b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>,<sp/>p);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref><sp/>=<sp/>max(b.Pmax,<sp/>p);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="classdakku_1_1BoundsBase_1aabca5f08125e27d64b79bcb2cd1e7704" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/><ref refid="classdakku_1_1BoundsBase_1aabca5f08125e27d64b79bcb2cd1e7704" kindref="member">operator&amp;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>ret;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>important:<sp/>assign<sp/>to<sp/>pMin/pMax<sp/>directly<sp/>and<sp/>don&apos;t<sp/>run<sp/>the<sp/>BoundsBase()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>constructor,<sp/>since<sp/>it<sp/>takes<sp/>min/max<sp/>of<sp/>the<sp/>points<sp/>passed<sp/>to<sp/>it.<sp/><sp/>In</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>turn,<sp/>that<sp/>breaks<sp/>returning<sp/>an<sp/>invalid<sp/>bound<sp/>for<sp/>the<sp/>case<sp/>where<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intersect<sp/>non-overlapping<sp/>bounds<sp/>(as<sp/>we&apos;d<sp/>like<sp/>to<sp/>happen).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref><sp/>=<sp/>max(a.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>,<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref><sp/>=<sp/>min(a.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>,<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="classdakku_1_1BoundsBase_1a1131f2fb765ed853a8623a5aa0266d5e" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/>std::string<sp/><ref refid="classdakku_1_1BoundsBase_1a1131f2fb765ed853a8623a5aa0266d5e" kindref="member">toString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;[&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>.toString()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>.toString()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;]&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="classdakku_1_1BoundsBase_1a02d61000d3d0599081a30bafc71bf758" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/>std::ostream<sp/>&amp;<ref refid="classdakku_1_1BoundsBase_1a02d61000d3d0599081a30bafc71bf758" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os<sp/>&lt;&lt;<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1131f2fb765ed853a8623a5aa0266d5e" kindref="member">toString</ref>();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/><ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>{std::numeric_limits&lt;T&gt;::max()};</highlight></codeline>
<codeline lineno="211" refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point&lt;T, S&gt;</ref><sp/><ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>{std::numeric_limits&lt;T&gt;::lowest()};</highlight></codeline>
<codeline lineno="212"><highlight class="normal">};</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T&gt;</highlight></codeline>
<codeline lineno="219" refid="classdakku_1_1Bounds2" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref>&lt;T,<sp/>2&gt;<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase&lt;T, 2&gt;::BoundsBase</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="classdakku_1_1Bounds2_1a6ae823c1ed9889a5ac8ca8a0af4da79e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Bounds2_1a6ae823c1ed9889a5ac8ca8a0af4da79e" kindref="member">Bounds2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase&lt;T, 2&gt;</ref><sp/>&amp;base)<sp/>:<sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref>&lt;T,<sp/>2&gt;(base)<sp/>{}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="classdakku_1_1Bounds2_1ae986c4aae4bed669564ea89613984356" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keyword">decltype</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">)<sp/><ref refid="classdakku_1_1Bounds2_1ae986c4aae4bed669564ea89613984356" kindref="member">area</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d<sp/>=<sp/>this-&gt;<ref refid="classdakku_1_1BoundsBase_1a07b1800b4e56f7f2daf1f59785215aee" kindref="member">diagonal</ref>();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>d.x()<sp/>*<sp/>d.y();</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal">};</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="namespacedakku_1abcc743bdeb62068a56f14ac3ef9963b7" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2f</ref><sp/>=<sp/><ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2&lt;float&gt;</ref>;</highlight></codeline>
<codeline lineno="239" refid="namespacedakku_1ae2cd423e1acf2fd91f4cdf3cc5ad50c6" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2i</ref><sp/>=<sp/><ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2&lt;int&gt;</ref>;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;ArithmeticType<sp/>T&gt;</highlight></codeline>
<codeline lineno="246" refid="classdakku_1_1Bounds3" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1Bounds3" kindref="compound">Bounds3</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref>&lt;T,<sp/>3&gt;<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase&lt;T, 3&gt;::BoundsBase</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="classdakku_1_1Bounds3_1a46c718e38bed601047044a6f1c1b7d7c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Bounds3_1a46c718e38bed601047044a6f1c1b7d7c" kindref="member">Bounds3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase&lt;T, 3&gt;</ref><sp/>&amp;base)<sp/>:<sp/><ref refid="classdakku_1_1BoundsBase" kindref="compound">BoundsBase</ref>&lt;T,<sp/>3&gt;(base)<sp/>{}</highlight></codeline>
<codeline lineno="251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="namespacedakku_1a19129587abbff965c2c15bab5723e208" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds3" kindref="compound">Bounds3f</ref><sp/>=<sp/><ref refid="classdakku_1_1Bounds3" kindref="compound">Bounds3&lt;float&gt;</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="classdakku_1_1Bounds2iIterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::forward_iterator_tag<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="262" refid="classdakku_1_1Bounds2iIterator_1a5c7da4004ef177e5726790240a2191aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator_1a5c7da4004ef177e5726790240a2191aa" kindref="member">Bounds2iIterator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2i</ref><sp/>&amp;b,<sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2i</ref><sp/>p)</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>b(b),<sp/>p(std::move(p))<sp/>{}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265" refid="classdakku_1_1Bounds2iIterator_1ad19c79cc44f5407ffedd8fee2e74b873" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref><sp/><ref refid="classdakku_1_1Bounds2iIterator_1ad19c79cc44f5407ffedd8fee2e74b873" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>advance();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270" refid="classdakku_1_1Bounds2iIterator_1abba748bffd9de14381de7393279e0ab1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref><sp/><ref refid="classdakku_1_1Bounds2iIterator_1abba748bffd9de14381de7393279e0ab1" kindref="member">operator++</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref><sp/>ret<sp/>=<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>advance();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="classdakku_1_1Bounds2iIterator_1aabbc42d3b83e2b025e1a8540ff62314b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator_1aabbc42d3b83e2b025e1a8540ff62314b" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>==<sp/>rhs.p<sp/>&amp;&amp;<sp/>(&amp;b<sp/>==<sp/>&amp;rhs.b);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="classdakku_1_1Bounds2iIterator_1aec365c1c605c7f12c463b13668a6fa5b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator_1aec365c1c605c7f12c463b13668a6fa5b" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref><sp/>&amp;rhs)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p<sp/>!=<sp/>rhs.p<sp/>||<sp/>(&amp;b<sp/>!=<sp/>&amp;rhs.b);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="classdakku_1_1Bounds2iIterator_1a6b917d1a9e146470819a369ee789c65d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2i</ref><sp/><ref refid="classdakku_1_1Bounds2iIterator_1a6b917d1a9e146470819a369ee789c65d" kindref="member">operator*</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p;<sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>advance()<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>++p.<ref refid="classdakku_1_1VectorBase_1aad720931a9787a87375de3f8d545567d" kindref="member">x</ref>();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(p.<ref refid="classdakku_1_1VectorBase_1aad720931a9787a87375de3f8d545567d" kindref="member">x</ref>()<sp/>==<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>.x())<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>p.<ref refid="classdakku_1_1VectorBase_1aad720931a9787a87375de3f8d545567d" kindref="member">x</ref>()<sp/>=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>.x();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++p.<ref refid="classdakku_1_1VectorBase_1a14b6216fd55dc1cd2f321c834f6121ca" kindref="member">y</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1ae2cd423e1acf2fd91f4cdf3cc5ad50c6" kindref="member">Bounds2i</ref><sp/>&amp;b;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><ref refid="namespacedakku_1a059653c441fcfa28e3b00de3709176e9" kindref="member">Point2i</ref><sp/>p;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">};</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="namespacedakku_1af0a2453f8db3eb948901c7a0aed18434" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref><sp/><ref refid="namespacedakku_1af0a2453f8db3eb948901c7a0aed18434" kindref="member">begin</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2i</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref>{b,<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>};</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="namespacedakku_1a41ae9fcb2290e6ea6f7d4b0fbca86d17" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref><sp/><ref refid="namespacedakku_1a41ae9fcb2290e6ea6f7d4b0fbca86d17" kindref="member">end</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2" kindref="compound">Bounds2i</ref><sp/>&amp;b)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>normally,<sp/>the<sp/>ending<sp/>point<sp/>is<sp/>at<sp/>the<sp/>minimum<sp/>x<sp/>value<sp/>and<sp/>one<sp/>past</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>valid<sp/>y<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2i</ref><sp/>pEnd(b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>.x(),<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>.y());</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>however,<sp/>if<sp/>the<sp/>bounds<sp/>are<sp/>degenerate,<sp/>override<sp/>the<sp/>end<sp/>point<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>equal<sp/>the<sp/>start<sp/>point<sp/>so<sp/>that<sp/>any<sp/>attempt<sp/>to<sp/>iterate<sp/>over<sp/>the<sp/>bounds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>exits<sp/>out<sp/>immediately.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>.x()<sp/>&gt;=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>.x()<sp/>||<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>.y()<sp/>&gt;=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1a1df49abc60c6cee7febd54aa46d04aa8" kindref="member">pMax</ref>.y())<sp/>pEnd<sp/>=<sp/>b.<ref refid="classdakku_1_1BoundsBase_1abd7c34bec0f05f1dfb494b76eed47622" kindref="member">pMin</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Bounds2iIterator" kindref="compound">Bounds2iIterator</ref>{b,<sp/>pEnd};</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dakku</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/core/bounds.h"/>
  </compounddef>
</doxygen>
