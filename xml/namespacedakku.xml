<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="namespacedakku" kind="namespace" language="C++">
    <compoundname>dakku</compoundname>
    <innerclass refid="classdakku_1_1BinaryVectorExpression" prot="public">dakku::BinaryVectorExpression</innerclass>
    <innerclass refid="classdakku_1_1Logger" prot="public">dakku::Logger</innerclass>
    <innerclass refid="classdakku_1_1VectorAddExpression" prot="public">dakku::VectorAddExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorBase" prot="public">dakku::VectorBase</innerclass>
    <innerclass refid="classdakku_1_1VectorCastExpression" prot="public">dakku::VectorCastExpression</innerclass>
    <innerclass refid="structdakku_1_1VectorExpression" prot="public">dakku::VectorExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorScalarExpression" prot="public">dakku::VectorScalarExpression</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacedakku_1aa5d538038f8e722b909be739b5828692" prot="public" static="no" mutable="no">
        <type>class <ref refid="logger_2fwd_8h_1abccce192e40efefc3c932da87c29a2da" kindref="member">DAKKU_EXPORT_LOGGER</ref></type>
        <definition>class DAKKU_EXPORT_LOGGER dakku::Logger</definition>
        <argsstring></argsstring>
        <name>Logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logger/fwd.h" line="13" column="26" bodyfile="src/logger/fwd.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedakku_1a53c476552ecb27caba955675d8efb680" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float dakku::INF</definition>
        <argsstring></argsstring>
        <name>INF</name>
        <initializer>= std::numeric_limits&lt;float&gt;::infinity()</initializer>
        <briefdescription>
<para>infinity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/fwd.h" line="21" column="24" bodyfile="src/math/fwd.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedakku_1af754e4967f947036a0c31c0dbb4bf6e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="platform_8h_1a7bc0107b6d161e4a712eee011c57792c" kindref="member">DAKKU_INLINE</ref> bool</type>
        <definition>DAKKU_INLINE bool dakku::isNaN</definition>
        <argsstring>(T x)</argsstring>
        <name>isNaN</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
    <requiresclause>std::is_floating_point_v&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>check whether <computeroutput>x</computeroutput> is not a number </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type (floating point) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>given value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <computeroutput>x</computeroutput> is nan </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/fwd.h" line="39" column="21" bodyfile="src/math/fwd.h" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1af703ca0ba560169d1daf114a07175bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="platform_8h_1a7bc0107b6d161e4a712eee011c57792c" kindref="member">DAKKU_INLINE</ref> bool</type>
        <definition>DAKKU_INLINE bool dakku::isNaN</definition>
        <argsstring>(T)</argsstring>
        <name>isNaN</name>
        <param>
          <type>T</type>
        </param>
    <requiresclause>std::is_integral_v&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>check whether <computeroutput>x</computeroutput> is not a number </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type (integer) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false (all integers are not nans) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/fwd.h" line="50" column="21" bodyfile="src/math/fwd.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a3cfef85ab03bf9f46706e55c4f75c6ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="math_2fwd_8h_1a6d67e63908b9c1cb59f8176576612b05" kindref="member">DAKKU_EXPORT_MATH</ref> void</type>
        <definition>DAKKU_EXPORT_MATH void dakku::testMath</definition>
        <argsstring>()</argsstring>
        <name>testMath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/fwd.h" line="52" column="24" declfile="src/math/fwd.h" declline="52" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a4b6360ff704ffd1e9ec37e334d017598" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression</ref>&lt; T, S, D, E1, E2 &gt;</type>
        <definition>VectorAddExpression&lt; T, S, D, E1, E2 &gt; dakku::operator+</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const VectorExpression&lt; T, S, D, E2 &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E2 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="350" column="28" bodyfile="src/math/vector_base.h" bodystart="350" bodyend="355"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>dakku namespace </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/logger/fwd.h" line="5" column="1"/>
  </compounddef>
</doxygen>
