<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="namespacedakku" kind="namespace" language="C++">
    <compoundname>dakku</compoundname>
    <innerclass refid="classdakku_1_1BinaryVectorExpression" prot="public">dakku::BinaryVectorExpression</innerclass>
    <innerclass refid="classdakku_1_1Logger" prot="public">dakku::Logger</innerclass>
    <innerclass refid="classdakku_1_1Normal" prot="public">dakku::Normal</innerclass>
    <innerclass refid="classdakku_1_1Point" prot="public">dakku::Point</innerclass>
    <innerclass refid="classdakku_1_1UnaryVectorExpression" prot="public">dakku::UnaryVectorExpression</innerclass>
    <innerclass refid="classdakku_1_1Vector" prot="public">dakku::Vector</innerclass>
    <innerclass refid="classdakku_1_1VectorAddExpression" prot="public">dakku::VectorAddExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorBase" prot="public">dakku::VectorBase</innerclass>
    <innerclass refid="classdakku_1_1VectorCastExpression" prot="public">dakku::VectorCastExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorDivExpression" prot="public">dakku::VectorDivExpression</innerclass>
    <innerclass refid="structdakku_1_1VectorExpression" prot="public">dakku::VectorExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorInverseExpression" prot="public">dakku::VectorInverseExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorMulExpression" prot="public">dakku::VectorMulExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorNegateExpression" prot="public">dakku::VectorNegateExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorScalarExpression" prot="public">dakku::VectorScalarExpression</innerclass>
    <innerclass refid="classdakku_1_1VectorSubExpression" prot="public">dakku::VectorSubExpression</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacedakku_1ae7de7b89895e76d4a3f1c653393dde69" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref>&lt; T, 2 &gt;</type>
        <definition>using dakku::Vector2 = typedef Vector&lt;T, 2&gt;</definition>
        <argsstring></argsstring>
        <name>Vector2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="26" column="1" bodyfile="src/math/vector.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1a3109ad27ee688fdd3462458714d7f1e7" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1Vector" kindref="compound">Vector</ref>&lt; T, 3 &gt;</type>
        <definition>using dakku::Vector3 = typedef Vector&lt;T, 3&gt;</definition>
        <argsstring></argsstring>
        <name>Vector3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="28" column="1" bodyfile="src/math/vector.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1abfd5a177365f8ffec7ab23d6cb6db8c0" prot="public" static="no">
        <type><ref refid="namespacedakku_1ae7de7b89895e76d4a3f1c653393dde69" kindref="member">Vector2</ref>&lt; float &gt;</type>
        <definition>using dakku::Vector2f = typedef Vector2&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Vector2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="29" column="1" bodyfile="src/math/vector.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1aa12b2f1fc9684bf8ba7fbf5b600685c6" prot="public" static="no">
        <type><ref refid="namespacedakku_1a3109ad27ee688fdd3462458714d7f1e7" kindref="member">Vector3</ref>&lt; float &gt;</type>
        <definition>using dakku::Vector3f = typedef Vector3&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Vector3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="30" column="1" bodyfile="src/math/vector.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1a56669db36360e52f7c7113768c7b35aa" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, 2 &gt;</type>
        <definition>using dakku::Point2 = typedef Point&lt;T, 2&gt;</definition>
        <argsstring></argsstring>
        <name>Point2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="33" column="1" bodyfile="src/math/vector.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1aace4734db951234de5eb4567db0d1737" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1Point" kindref="compound">Point</ref>&lt; T, 3 &gt;</type>
        <definition>using dakku::Point3 = typedef Point&lt;T, 3&gt;</definition>
        <argsstring></argsstring>
        <name>Point3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="35" column="1" bodyfile="src/math/vector.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1a9910f23501fd2ef5e9a829cdab0992be" prot="public" static="no">
        <type><ref refid="namespacedakku_1a56669db36360e52f7c7113768c7b35aa" kindref="member">Point2</ref>&lt; float &gt;</type>
        <definition>using dakku::Point2f = typedef Point2&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Point2f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="36" column="1" bodyfile="src/math/vector.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1a8323b90fda75af310a40a4e0d6bdb3f0" prot="public" static="no">
        <type><ref refid="namespacedakku_1aace4734db951234de5eb4567db0d1737" kindref="member">Point3</ref>&lt; float &gt;</type>
        <definition>using dakku::Point3f = typedef Point3&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Point3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="37" column="1" bodyfile="src/math/vector.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1ade3699e7ff88bf28ae0ea31baafab11c" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1Normal" kindref="compound">Normal</ref>&lt; T, 3 &gt;</type>
        <definition>using dakku::Normal3 = typedef Normal&lt;T, 3&gt;</definition>
        <argsstring></argsstring>
        <name>Normal3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="40" column="1" bodyfile="src/math/vector.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacedakku_1a9b64e14dceffe6ac84029f1d40d6ec41" prot="public" static="no">
        <type><ref refid="namespacedakku_1ade3699e7ff88bf28ae0ea31baafab11c" kindref="member">Normal3</ref>&lt; float &gt;</type>
        <definition>using dakku::Normal3f = typedef Normal3&lt;float&gt;</definition>
        <argsstring></argsstring>
        <name>Normal3f</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector.h" line="41" column="1" bodyfile="src/math/vector.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacedakku_1aa5d538038f8e722b909be739b5828692" prot="public" static="no" mutable="no">
        <type>class <ref refid="logger_2fwd_8h_1abccce192e40efefc3c932da87c29a2da" kindref="member">DAKKU_EXPORT_LOGGER</ref></type>
        <definition>class DAKKU_EXPORT_LOGGER dakku::Logger</definition>
        <argsstring></argsstring>
        <name>Logger</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/logger/fwd.h" line="13" column="26" bodyfile="src/logger/fwd.h" bodystart="13" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacedakku_1a53c476552ecb27caba955675d8efb680" prot="public" static="yes" constexpr="yes" mutable="no">
        <type>constexpr float</type>
        <definition>constexpr float dakku::INF</definition>
        <argsstring></argsstring>
        <name>INF</name>
        <initializer>= std::numeric_limits&lt;float&gt;::infinity()</initializer>
        <briefdescription>
<para>infinity </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/fwd.h" line="21" column="24" bodyfile="src/math/fwd.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacedakku_1af754e4967f947036a0c31c0dbb4bf6e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="platform_8h_1a7bc0107b6d161e4a712eee011c57792c" kindref="member">DAKKU_INLINE</ref> bool</type>
        <definition>DAKKU_INLINE bool dakku::isNaN</definition>
        <argsstring>(T x)</argsstring>
        <name>isNaN</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
    <requiresclause>std::is_floating_point_v&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>check whether <computeroutput>x</computeroutput> is not a number </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type (floating point) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>given value </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>whether <computeroutput>x</computeroutput> is nan </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/fwd.h" line="39" column="21" bodyfile="src/math/fwd.h" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1af703ca0ba560169d1daf114a07175bf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="platform_8h_1a7bc0107b6d161e4a712eee011c57792c" kindref="member">DAKKU_INLINE</ref> bool</type>
        <definition>DAKKU_INLINE bool dakku::isNaN</definition>
        <argsstring>(T)</argsstring>
        <name>isNaN</name>
        <param>
          <type>T</type>
        </param>
    <requiresclause>std::is_integral_v&lt;T&gt;    </requiresclause>
        <briefdescription>
<para>check whether <computeroutput>x</computeroutput> is not a number </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type (integer) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false (all integers are not nans) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/fwd.h" line="50" column="21" bodyfile="src/math/fwd.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a3cfef85ab03bf9f46706e55c4f75c6ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="math_2fwd_8h_1a6d67e63908b9c1cb59f8176576612b05" kindref="member">DAKKU_EXPORT_MATH</ref> void</type>
        <definition>DAKKU_EXPORT_MATH void dakku::testMath</definition>
        <argsstring>()</argsstring>
        <name>testMath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/fwd.h" line="52" column="24" declfile="src/math/fwd.h" declline="52" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a4b6360ff704ffd1e9ec37e334d017598" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression</ref>&lt; T, S, D, E1, E2 &gt;</type>
        <definition>VectorAddExpression&lt; T, S, D, E1, E2 &gt; dakku::operator+</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const VectorExpression&lt; T, S, D, E2 &gt; &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E2 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>operator + between vectors </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>derived type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E1</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 1 type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E2</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 2 type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>add expr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="178" column="28" bodyfile="src/math/vector_base.h" bodystart="178" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a69f5544cd2f2b30dfdaf22f66eef9192" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression</ref>&lt; T, S, D, E1, <ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression</ref>&lt; V, S, D &gt; &gt; &gt;</type>
        <definition>VectorAddExpression&lt; T, S, D, E1, VectorCastExpression&lt; T, S, D, VectorScalarExpression&lt; V, S, D &gt; &gt; &gt; dakku::operator+</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const V &amp;v)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>operator + (vector, scalar) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>derived type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E1</parametername>
</parameternamelist>
<parameterdescription>
<para>expr type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>expr </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>add expr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="200" column="1" bodyfile="src/math/vector_base.h" bodystart="200" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a14f899c028c71e38fe5d4a957c256108" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorAddExpression" kindref="compound">VectorAddExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression</ref>&lt; V, S, D &gt; &gt;, E1 &gt;</type>
        <definition>VectorAddExpression&lt; T, S, D, VectorCastExpression&lt; T, S, D, VectorScalarExpression&lt; V, S, D &gt; &gt;, E1 &gt; dakku::operator+</definition>
        <argsstring>(const V &amp;v, const VectorExpression&lt; T, S, D, E1 &gt; &amp;u)</argsstring>
        <name>operator+</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
<para>operator + (scalar, vector) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>derived type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E1</parametername>
</parameternamelist>
<parameterdescription>
<para>expr type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>V</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>scalar </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>expr </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>add expr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="224" column="1" bodyfile="src/math/vector_base.h" bodystart="224" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a0941530b21fc4f469f76775fccb3842f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression</ref>&lt; T, S, D, E1, E2 &gt;</type>
        <definition>VectorSubExpression&lt; T, S, D, E1, E2 &gt; dakku::operator-</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const VectorExpression&lt; T, S, D, E2 &gt; &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E2 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>operator - between vectors </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>derived type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E1</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 1 type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E2</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 2 type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>add expr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="266" column="28" bodyfile="src/math/vector_base.h" bodystart="266" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a2ba6b2cccead840f210517e17362d113" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression</ref>&lt; T, S, D, E1, <ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression</ref>&lt; V, S, D &gt; &gt; &gt;</type>
        <definition>VectorSubExpression&lt; T, S, D, E1, VectorCastExpression&lt; T, S, D, VectorScalarExpression&lt; V, S, D &gt; &gt; &gt; dakku::operator-</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const V &amp;v)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="276" column="1" bodyfile="src/math/vector_base.h" bodystart="276" bodyend="283"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1ab7a7d0aaacbaff7ef207df29d2823d17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorSubExpression" kindref="compound">VectorSubExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression</ref>&lt; V, S, D &gt; &gt;, E1 &gt;</type>
        <definition>VectorSubExpression&lt; T, S, D, VectorCastExpression&lt; T, S, D, VectorScalarExpression&lt; V, S, D &gt; &gt;, E1 &gt; dakku::operator-</definition>
        <argsstring>(const V &amp;v, const VectorExpression&lt; T, S, D, E1 &gt; &amp;u)</argsstring>
        <name>operator-</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="288" column="1" bodyfile="src/math/vector_base.h" bodystart="288" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1ab3f3816e505972c2da65c15749862185" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression</ref>&lt; T, S, D, E1, E2 &gt;</type>
        <definition>VectorMulExpression&lt; T, S, D, E1, E2 &gt; dakku::operator*</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const VectorExpression&lt; T, S, D, E2 &gt; &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E2 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>operator * between vectors </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>derived type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E1</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 1 type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E2</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 2 type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>add expr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="330" column="28" bodyfile="src/math/vector_base.h" bodystart="330" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1afdce7a08d5d5af7a67c1ab4d50bf8d58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression</ref>&lt; T, S, D, E1, <ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression</ref>&lt; V, S, D &gt; &gt; &gt;</type>
        <definition>VectorMulExpression&lt; T, S, D, E1, VectorCastExpression&lt; T, S, D, VectorScalarExpression&lt; V, S, D &gt; &gt; &gt; dakku::operator*</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const V &amp;v)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="340" column="1" bodyfile="src/math/vector_base.h" bodystart="340" bodyend="347"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a97c821f06ad1184d07d00eb0b431390d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorMulExpression" kindref="compound">VectorMulExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorCastExpression" kindref="compound">VectorCastExpression</ref>&lt; T, S, D, <ref refid="classdakku_1_1VectorScalarExpression" kindref="compound">VectorScalarExpression</ref>&lt; V, S, D &gt; &gt;, E1 &gt;</type>
        <definition>VectorMulExpression&lt; T, S, D, VectorCastExpression&lt; T, S, D, VectorScalarExpression&lt; V, S, D &gt; &gt;, E1 &gt; dakku::operator*</definition>
        <argsstring>(const V &amp;v, const VectorExpression&lt; T, S, D, E1 &gt; &amp;u)</argsstring>
        <name>operator*</name>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="352" column="1" bodyfile="src/math/vector_base.h" bodystart="352" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1aff2b84e0667f3bd979839701507fb1a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorDivExpression" kindref="compound">VectorDivExpression</ref>&lt; T, S, D, E1, E2 &gt;</type>
        <definition>VectorDivExpression&lt; T, S, D, E1, E2 &gt; dakku::operator/</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const VectorExpression&lt; T, S, D, E2 &gt; &amp;v)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E2 &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>operator / between vectors </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>derived type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E1</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 1 type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E2</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 2 type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>u</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>expr 2 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>add expr </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="394" column="28" bodyfile="src/math/vector_base.h" bodystart="394" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a85464f4b6a2b1eb4229fb2d45412ef1f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>ArithmeticType</type>
            <declname>V</declname>
            <defname>V</defname>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::operator/</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E1 &gt; &amp;u, const V &amp;v)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E1 &gt; &amp;</type>
          <declname>u</declname>
        </param>
        <param>
          <type>const V &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="402" column="17" bodyfile="src/math/vector_base.h" bodystart="402" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a6cbf87dd3de16523da703a86fe96ce22" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D1</type>
          </param>
          <param>
            <type>typename E1</type>
          </param>
          <param>
            <type>typename D2</type>
          </param>
          <param>
            <type>typename E2</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T dakku::dot</definition>
        <argsstring>(const VectorExpression&lt; T, S, D1, E1 &gt; &amp;a, const VectorExpression&lt; T, S, D2, E2 &gt; &amp;b)</argsstring>
        <name>dot</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D1, E1 &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D2, E2 &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>dot product of two vectors </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>vector <computeroutput>a</computeroutput> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>vector <computeroutput>b</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>$\vec a \cdot \vec b$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="416" column="10" bodyfile="src/math/vector_base.h" bodystart="416" bodyend="421"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1ae368b81abb3cac444ba039a7f74fddd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::squaredNorm</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E &gt; &amp;v)</argsstring>
        <name>squaredNorm</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>the squared norm of the vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>$||\vec v|| ^ 2$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="430" column="17" bodyfile="src/math/vector_base.h" bodystart="430" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a946bf2cb3142acf290bdb230b5757db7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>decltype(auto)</type>
        <definition>decltype(auto) dakku::norm</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E &gt; &amp;v)</argsstring>
        <name>norm</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>the norm of the vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>$||v||$ </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="441" column="17" bodyfile="src/math/vector_base.h" bodystart="441" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1a22eef6d5337f9aa57d7e32b865e184d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorInverseExpression" kindref="compound">VectorInverseExpression</ref>&lt; T, S, D, E &gt;</type>
        <definition>VectorInverseExpression&lt; T, S, D, E &gt; dakku::inverse</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E &gt; &amp;v)</argsstring>
        <name>inverse</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>inverse the vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>derived type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>expr </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the inversion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="475" column="32" bodyfile="src/math/vector_base.h" bodystart="475" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="namespacedakku_1adb43899ec1c3c87f5630fe520b2b64e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>ArithmeticType</type>
            <declname>T</declname>
            <defname>T</defname>
          </param>
          <param>
            <type>size_t</type>
            <declname>S</declname>
            <defname>S</defname>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type><ref refid="classdakku_1_1VectorNegateExpression" kindref="compound">VectorNegateExpression</ref>&lt; T, S, D, E &gt;</type>
        <definition>VectorNegateExpression&lt; T, S, D, E &gt; dakku::negate</definition>
        <argsstring>(const VectorExpression&lt; T, S, D, E &gt; &amp;v)</argsstring>
        <name>negate</name>
        <param>
          <type>const <ref refid="structdakku_1_1VectorExpression" kindref="compound">VectorExpression</ref>&lt; T, S, D, E &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>inverse the vector </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>S</parametername>
</parameternamelist>
<parameterdescription>
<para>size </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>D</parametername>
</parameternamelist>
<parameterdescription>
<para>derived type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>E</parametername>
</parameternamelist>
<parameterdescription>
<para>expr </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the inversion </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/math/vector_base.h" line="510" column="31" bodyfile="src/math/vector_base.h" bodystart="510" bodyend="513"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>dakku namespace </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/logger/fwd.h" line="5" column="1"/>
  </compounddef>
</doxygen>
