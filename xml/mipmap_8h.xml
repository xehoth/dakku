<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.2" xml:lang="en-US">
  <compounddef id="mipmap_8h" kind="file" language="C++">
    <compoundname>mipmap.h</compoundname>
    <includes refid="blocked__array_8h" local="no">core/blocked_array.h</includes>
    <includes refid="vector_8h" local="no">core/vector.h</includes>
    <includes refid="spectrum_8h" local="no">core/spectrum.h</includes>
    <includes local="no">oneapi/tbb.h</includes>
    <includes local="no">utility</includes>
    <includedby refid="image_8h" local="no">src/textures/image.h</includedby>
    <incdepgraph>
      <node id="2">
        <label>core/blocked_array.h</label>
        <link refid="blocked__array_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>core/fwd.h</label>
        <link refid="core_2fwd_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>core/logger.h</label>
        <link refid="logger_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/core/mipmap.h</label>
        <link refid="mipmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="24" relation="include">
        </childnode>
        <childnode refid="25" relation="include">
        </childnode>
        <childnode refid="26" relation="include">
        </childnode>
      </node>
      <node id="24">
        <label>core/spectrum.h</label>
        <link refid="spectrum_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>core/vector.h</label>
        <link refid="vector_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>core/vector_base.h</label>
        <link refid="vector__base_8h"/>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>platform.h</label>
        <link refid="platform_8h"/>
      </node>
      <node id="20">
        <label>algorithm</label>
      </node>
      <node id="19">
        <label>array</label>
      </node>
      <node id="10">
        <label>bit</label>
      </node>
      <node id="8">
        <label>cmath</label>
      </node>
      <node id="9">
        <label>cstdint</label>
      </node>
      <node id="18">
        <label>cstdlib</label>
      </node>
      <node id="6">
        <label>limits</label>
      </node>
      <node id="7">
        <label>numbers</label>
      </node>
      <node id="23">
        <label>numeric</label>
      </node>
      <node id="25">
        <label>oneapi/tbb.h</label>
      </node>
      <node id="12">
        <label>oneapi/tbb/cache_aligned_allocator.h</label>
      </node>
      <node id="22">
        <label>ostream</label>
      </node>
      <node id="11">
        <label>span</label>
      </node>
      <node id="17">
        <label>spdlog/fmt/ostr.h</label>
      </node>
      <node id="16">
        <label>spdlog/spdlog.h</label>
      </node>
      <node id="21">
        <label>string</label>
      </node>
      <node id="5">
        <label>type_traits</label>
      </node>
      <node id="26">
        <label>utility</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>src/core/mipmap.h</label>
        <link refid="mipmap_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>src/textures/api.h</label>
        <link refid="textures_2api_8h"/>
      </node>
      <node id="2">
        <label>src/textures/image.h</label>
        <link refid="image_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structdakku_1_1ResampleWeight" prot="public">dakku::ResampleWeight</innerclass>
    <innerclass refid="classdakku_1_1MipMap" prot="public">dakku::MipMap</innerclass>
    <innernamespace refid="namespacedakku">dakku</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1" refid="namespacedakku_1ad67fc67650e8ff59c3b25b9e9d462ee4" refkind="member"><highlight class="preprocessor">#ifndef<sp/>DAKKU_CORE_MIPMAP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DAKKU_CORE_MIPMAP_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="blocked__array_8h" kindref="compound">core/blocked_array.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="vector_8h" kindref="compound">core/vector.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="spectrum_8h" kindref="compound">core/spectrum.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;oneapi/tbb.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacedakku" kindref="compound">dakku</ref><sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="15" refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dc" kindref="member">ImageWrapMode</ref><sp/>{<sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dca5be68175be14dfaa080165456c2e9555" kindref="member">REPEAT</ref>,<sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dca08d0012388564e95c3b4a7407cf04965" kindref="member">BLACK</ref>,<sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dcaecf301fe86e23bb2bf5155bbef3b1345" kindref="member">CLAMP</ref><sp/>};</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="structdakku_1_1ResampleWeight" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structdakku_1_1ResampleWeight" kindref="compound">ResampleWeight</ref><sp/>{</highlight></codeline>
<codeline lineno="23" refid="structdakku_1_1ResampleWeight_1abc89fe6d4568cfb82e062d82898fca6f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1ResampleWeight_1abc89fe6d4568cfb82e062d82898fca6f" kindref="member">firstTexel</ref>;</highlight></codeline>
<codeline lineno="25" refid="structdakku_1_1ResampleWeight_1abe9d0c7de12b36bd2f0ac68e490cd6aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="structdakku_1_1ResampleWeight_1abe9d0c7de12b36bd2f0ac68e490cd6aa" kindref="member">weight</ref>[4];</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="34" refid="classdakku_1_1MipMap" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||<sp/>std::is_same_v&lt;T,<sp/>Spectrum&gt;)<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1MipMap" kindref="compound">MipMap</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36" refid="classdakku_1_1MipMap_1aba3ce8e11e111e692cf1eac85984ba8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1MipMap_1aba3ce8e11e111e692cf1eac85984ba8e" kindref="member">MipMap</ref>(<ref refid="classdakku_1_1Point" kindref="compound">Point2i</ref><sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>,<sp/>std::span&lt;const<sp/>T&gt;<sp/>data,</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doTrilinear<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a5dc6c62020f3cb484153c43801d71ee0" kindref="member">maxAnisotropy</ref><sp/>=<sp/>8.0f,</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dc" kindref="member">ImageWrapMode</ref><sp/><ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref><sp/>=<sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dca5be68175be14dfaa080165456c2e9555" kindref="member">ImageWrapMode::REPEAT</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="classdakku_1_1MipMap_1a6b6aaee191275ccfb13805dc1759d819" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1MipMap_1a6b6aaee191275ccfb13805dc1759d819" kindref="member">width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.x();<sp/>}</highlight></codeline>
<codeline lineno="41" refid="classdakku_1_1MipMap_1a4134445335c6d3badf60022c7b7efb7c" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1MipMap_1a4134445335c6d3badf60022c7b7efb7c" kindref="member">height</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.y();<sp/>}</highlight></codeline>
<codeline lineno="42" refid="classdakku_1_1MipMap_1a9f68ae9f89caa8b327bdb41813da2e37" refkind="member"><highlight class="normal"><sp/><sp/>[[nodiscard]]<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1MipMap_1a9f68ae9f89caa8b327bdb41813da2e37" kindref="member">levels</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(pyramid.size());<sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;texel(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>T<sp/>lookup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2f</ref><sp/>&amp;st,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>T<sp/>lookup(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2f</ref><sp/>&amp;st,<sp/><ref refid="classdakku_1_1Vector" kindref="compound">Vector2f</ref><sp/>dst0,<sp/><ref refid="classdakku_1_1Vector" kindref="compound">Vector2f</ref><sp/>dst1)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doTrilinear;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a5dc6c62020f3cb484153c43801d71ee0" kindref="member">maxAnisotropy</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dc" kindref="member">ImageWrapMode</ref><sp/><ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref>;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2i</ref><sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;BlockedArray&lt;T&gt;&gt;&gt;<sp/>pyramid;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;ResampleWeight[]&gt;<sp/>resampleWeights(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>oldRes,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>newRes)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(newRes<sp/>&gt;=<sp/>oldRes,<sp/></highlight><highlight class="stringliteral">&quot;invalid<sp/>new<sp/>resolution,<sp/>expected:<sp/>{}<sp/>&gt;=<sp/>{}&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newRes,<sp/>oldRes);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;ResampleWeight[]&gt;<sp/>wt<sp/>=</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_unique&lt;ResampleWeight[]&gt;(newRes);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>filterWidth<sp/>=<sp/>2.0f;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>newRes;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>center<sp/>=<sp/>(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(i)<sp/>+<sp/>0.5f)<sp/>/</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(newRes)<sp/>*<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(oldRes);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>wt[i].firstTexel<sp/>=</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::floor((center<sp/>-<sp/>filterWidth)<sp/>*<sp/>0.5f));</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>nearby<sp/>four<sp/>texels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(wt[i].firstTexel<sp/>+<sp/>j)<sp/>+<sp/>0.5f;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt[i].weight[j]<sp/>=<sp/><ref refid="namespacedakku_1af5b2aaaf6403e90c77a4746ff984db8b" kindref="member">evalLanczos</ref>((pos<sp/>-<sp/>center)<sp/>/<sp/>filterWidth);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normalize<sp/>filter<sp/>weights<sp/>for<sp/>texel<sp/>resampling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>inv<sp/>=<sp/>1<sp/>/<sp/>(wt[i].weight[0]<sp/>+<sp/>wt[i].weight[1]<sp/>+<sp/>wt[i].weight[2]<sp/>+</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wt[i].weight[3]);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>&amp;j<sp/>:<sp/>wt[i].weight)<sp/>j<sp/>*=<sp/>inv;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>wt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>clamp(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::clamp(v,<sp/>0.0f,<sp/>INF);<sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>T<sp/>triangle(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a9910f23501fd2ef5e9a829cdab0992be" kindref="member">Point2f</ref><sp/>&amp;st)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>RgbSpectrum<sp/>clamp(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RgbSpectrum<sp/>&amp;v)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v.clamp();<sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;T,<sp/>Spectrum&gt;)<sp/><ref refid="classdakku_1_1MipMap_1aba3ce8e11e111e692cf1eac85984ba8e" kindref="member">MipMap&lt;T&gt;::MipMap</ref>(<ref refid="namespacedakku_1a059653c441fcfa28e3b00de3709176e9" kindref="member">Point2i</ref><sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::span&lt;const<sp/>T&gt;<sp/>img,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>doTrilinear,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a5dc6c62020f3cb484153c43801d71ee0" kindref="member">maxAnisotropy</ref>,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dc" kindref="member">ImageWrapMode</ref><sp/><ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>doTrilinear(doTrilinear),</highlight></codeline>
<codeline lineno="117" refid="namespacedakku_1a5dc6c62020f3cb484153c43801d71ee0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedakku_1a5dc6c62020f3cb484153c43801d71ee0" kindref="member">maxAnisotropy</ref>(<ref refid="namespacedakku_1a5dc6c62020f3cb484153c43801d71ee0" kindref="member">maxAnisotropy</ref>),</highlight></codeline>
<codeline lineno="118" refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref>(<ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref>),</highlight></codeline>
<codeline lineno="119" refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>(std::move(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>))<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;T[]&gt;<sp/>resampledImage{};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacedakku_1a7b74e38fede77ac78a98a577ae8eff7c" kindref="member">isPowerOf2</ref>(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.x())<sp/>||<sp/>!<ref refid="namespacedakku_1a7b74e38fede77ac78a98a577ae8eff7c" kindref="member">isPowerOf2</ref>(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.y()))<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>power<sp/>of<sp/>2,<sp/>resample<sp/>image<sp/>to<sp/>the<sp/>with<sp/>the<sp/>size<sp/>to<sp/>the<sp/>nearest<sp/>2<sp/>^<sp/>k</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2i</ref><sp/>resPow2(<ref refid="namespacedakku_1a0d82bdc5016a1bcbb43a0a37c068be53" kindref="member">roundUpPow2</ref>(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.x()),<sp/><ref refid="namespacedakku_1a0d82bdc5016a1bcbb43a0a37c068be53" kindref="member">roundUpPow2</ref>(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.y()));</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="logger_8h_1a845073641399be84136c0143bedbde77" kindref="member">DAKKU_INFO</ref>(</highlight><highlight class="stringliteral">&quot;resampling<sp/>mipmap<sp/>from<sp/>{}<sp/>to<sp/>{}&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>,<sp/>resPow2);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;ResampleWeight[]&gt;<sp/>sWeights<sp/>=</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resampleWeights(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.x(),<sp/>resPow2.<ref refid="classdakku_1_1VectorBase_1aad720931a9787a87375de3f8d545567d" kindref="member">x</ref>());</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>resampledImage<sp/>=<sp/>std::make_unique&lt;T[]&gt;(resPow2.<ref refid="classdakku_1_1VectorBase_1aad720931a9787a87375de3f8d545567d" kindref="member">x</ref>()<sp/>*<sp/>resPow2.<ref refid="classdakku_1_1VectorBase_1a14b6216fd55dc1cd2f321c834f6121ca" kindref="member">y</ref>());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>sWeights<sp/>to<sp/>zoom<sp/>in<sp/>$s$<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>oneapi::tbb::parallel_for(</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{0},<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.y()),<sp/>[&amp;](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a41ae9fcb2290e6ea6f7d4b0fbca86d17" kindref="member">end</ref><sp/>=<sp/>resPow2.<ref refid="classdakku_1_1VectorBase_1aad720931a9787a87375de3f8d545567d" kindref="member">x</ref>();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/><ref refid="namespacedakku_1a41ae9fcb2290e6ea6f7d4b0fbca86d17" kindref="member">end</ref>;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>texel<sp/>$(s,<sp/>t)$<sp/>in<sp/>$s$-zoomed<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resampledImage[t<sp/>*<sp/>resPow2[0]<sp/>+<sp/>s]<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>origS<sp/>=<sp/>sWeights[s].firstTexel<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref><sp/>==<sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dca5be68175be14dfaa080165456c2e9555" kindref="member">ImageWrapMode::REPEAT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origS<sp/>=<sp/>origS<sp/>%<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[0];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref><sp/>==<sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dcaecf301fe86e23bb2bf5155bbef3b1345" kindref="member">ImageWrapMode::CLAMP</ref>)<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>origS<sp/>=<sp/>std::clamp(origS,<sp/>0,<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[0]<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(origS<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>origS<sp/>&lt;<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[0])<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resampledImage[t<sp/>*<sp/>resPow2[0]<sp/>+<sp/>s]<sp/>+=</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sWeights[s].weight[j]<sp/>*<sp/>img[t<sp/>*<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[0]<sp/>+<sp/>origS];</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>resample<sp/>image<sp/>in<sp/>$t$<sp/>direction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;ResampleWeight[]&gt;<sp/>tWeights<sp/>=</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resampleWeights(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.y(),<sp/>resPow2.<ref refid="classdakku_1_1VectorBase_1a14b6216fd55dc1cd2f321c834f6121ca" kindref="member">y</ref>());</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T<sp/>*&gt;<sp/>resampleBufs;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nThreads<sp/>=<sp/>oneapi::tbb::this_task_arena::max_concurrency();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>nThreads;<sp/>++i)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resampleBufs.push_back(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T[resPow2[1]]);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>oneapi::tbb::parallel_for(</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">{0},<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.x()),<sp/>[&amp;](</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>*workData<sp/>=<sp/>resampleBufs</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[oneapi::tbb::this_task_arena::current_thread_index()];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>resPow2[1];<sp/>++t)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workData[t]<sp/>=<sp/>0.f;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>4;<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>tWeights[t].firstTexel<sp/>+<sp/>j;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref><sp/>==<sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dca5be68175be14dfaa080165456c2e9555" kindref="member">ImageWrapMode::REPEAT</ref>)<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>offset<sp/>%<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[1];</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref><sp/>==<sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dcaecf301fe86e23bb2bf5155bbef3b1345" kindref="member">ImageWrapMode::CLAMP</ref>)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>std::clamp(offset,<sp/>0,<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[1]<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offset<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>offset<sp/>&lt;<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[1])<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>workData[t]<sp/>+=<sp/>tWeights[t].weight[j]<sp/>*</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resampledImage[offset<sp/>*<sp/>resPow2[0]<sp/>+<sp/>s];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>0;<sp/>t<sp/>&lt;<sp/>resPow2[1];<sp/>++t)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>resampledImage[t<sp/>*<sp/>resPow2[0]<sp/>+<sp/>s]<sp/>=<sp/>clamp(workData[t]);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>ptr<sp/>:<sp/>resampleBufs)<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">[]<sp/>ptr;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref><sp/>=<sp/>resPow2;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>levels<sp/>of<sp/>mipmap<sp/>from<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nLevels<sp/>=<sp/>1<sp/>+<sp/><ref refid="namespacedakku_1a08fa951dfb5b1584b36175563f648627" kindref="member">log2Int</ref>(std::max(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[0],<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[1]));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>pyramid.resize(nLevels);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>bottom<sp/>level<sp/>(most<sp/>detailed)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>pyramid[0]<sp/>=<sp/>std::make_unique&lt;BlockedArray&lt;T&gt;&gt;(</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[0],<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>[1],</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::span&lt;const<sp/>T&gt;{resampledImage<sp/>?<sp/>resampledImage.get()<sp/>:<sp/>img.data(),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.x()<sp/>*<sp/><ref refid="namespacedakku_1ad153e9f37e7a43e9abe4762557e4a187" kindref="member">resolution</ref>.y())});</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>nLevels;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>level:<sp/>/<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sRes<sp/>=<sp/>std::max(1,<sp/>pyramid[i<sp/>-<sp/>1]-&gt;uSize()<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>tRes<sp/>=<sp/>std::max(1,<sp/>pyramid[i<sp/>-<sp/>1]-&gt;vSize()<sp/>/<sp/>2);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>pyramid[i]<sp/>=<sp/>std::make_unique&lt;BlockedArray&lt;T&gt;&gt;(sRes,<sp/>tRes);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filter<sp/>four<sp/>texels<sp/>from<sp/>finer<sp/>level<sp/>of<sp/>pyramid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>oneapi::tbb::parallel_for(0,<sp/>tRes,<sp/>[&amp;](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>0;<sp/>s<sp/>&lt;<sp/>sRes;<sp/>++s)<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*pyramid[i])(s,<sp/>t)<sp/>=<sp/>0.25f<sp/>*<sp/>(texel(i<sp/>-<sp/>1,<sp/>2<sp/>*<sp/>s,<sp/>2<sp/>*<sp/>t)<sp/>+</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texel(i<sp/>-<sp/>1,<sp/>2<sp/>*<sp/>s<sp/>+<sp/>1,<sp/>2<sp/>*<sp/>t)<sp/>+</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texel(i<sp/>-<sp/>1,<sp/>2<sp/>*<sp/>s,<sp/>2<sp/>*<sp/>t<sp/>+<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>texel(i<sp/>-<sp/>1,<sp/>2<sp/>*<sp/>s<sp/>+<sp/>1,<sp/>2<sp/>*<sp/>t<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>EWA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||</highlight></codeline>
<codeline lineno="215" refid="classdakku_1_1MipMap_1ac3c0905111e2b6d7d5440fe858eb8a37" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;T,<sp/>Spectrum&gt;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>&amp;<ref refid="classdakku_1_1MipMap" kindref="compound">MipMap&lt;T&gt;::texel</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s,</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><ref refid="logger_8h_1ad7e55cac030fb7ab38ebcfce264c1b3e" kindref="member">DAKKU_CHECK</ref>(level<sp/>&lt;<sp/>pyramid.size(),<sp/></highlight><highlight class="stringliteral">&quot;level<sp/>out<sp/>of<sp/>range:<sp/>{}<sp/>&gt;=<sp/>{}&quot;</highlight><highlight class="normal">,<sp/>level,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pyramid.size());</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1BlockedArray" kindref="compound">BlockedArray&lt;T&gt;</ref><sp/>&amp;l<sp/>=<sp/>*pyramid[level];</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(<ref refid="namespacedakku_1a3daeac9348858af9dbb1a9c0415f5f84" kindref="member">wrapMode</ref>)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dca5be68175be14dfaa080165456c2e9555" kindref="member">ImageWrapMode::REPEAT</ref>:</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>%=<sp/>l.<ref refid="classdakku_1_1BlockedArray_1af9cd727849a0f2fff54bee55d0aeb41f" kindref="member">uSize</ref>();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>%=<sp/>l.<ref refid="classdakku_1_1BlockedArray_1aef7832e591051516bf31fd42ed6b446c" kindref="member">vSize</ref>();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dcaecf301fe86e23bb2bf5155bbef3b1345" kindref="member">ImageWrapMode::CLAMP</ref>:</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>s<sp/>=<sp/>std::clamp(s,<sp/>0,<sp/>l.<ref refid="classdakku_1_1BlockedArray_1af9cd727849a0f2fff54bee55d0aeb41f" kindref="member">uSize</ref>()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>std::clamp(t,<sp/>0,<sp/>l.<ref refid="classdakku_1_1BlockedArray_1aef7832e591051516bf31fd42ed6b446c" kindref="member">vSize</ref>()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a9f69e6875268e5345a38fd61108935dca08d0012388564e95c3b4a7407cf04965" kindref="member">ImageWrapMode::BLACK</ref>:<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>black{0.0f};</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(s<sp/>&lt;<sp/>0<sp/>||<sp/>s<sp/>&gt;=<sp/>l.<ref refid="classdakku_1_1BlockedArray_1af9cd727849a0f2fff54bee55d0aeb41f" kindref="member">uSize</ref>()<sp/>||<sp/>t<sp/>&lt;<sp/>0<sp/>||<sp/>t<sp/>&gt;=<sp/>l.<ref refid="classdakku_1_1BlockedArray_1aef7832e591051516bf31fd42ed6b446c" kindref="member">vSize</ref>())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>black;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l(s,<sp/>t);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||</highlight></codeline>
<codeline lineno="241" refid="classdakku_1_1MipMap_1ad25a7c8b822b665377740f296bd06a40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;T,<sp/>Spectrum&gt;)<sp/>T<sp/><ref refid="classdakku_1_1MipMap" kindref="compound">MipMap&lt;T&gt;::lookup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2f</ref><sp/>&amp;st,</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>mipmap<sp/>level<sp/>for<sp/>trilinear<sp/>filtering</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>level<sp/>=<sp/>levels()<sp/>-<sp/>1<sp/>+<sp/>std::log2(std::max(width,<sp/>1e-8f));</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>triangle(0,<sp/>st);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level<sp/>&gt;=<sp/>levels()<sp/>-<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>texel(levels()<sp/>-<sp/>1,<sp/>0,<sp/>0);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>floorLevel<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::floor(level));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>delta<sp/>=<sp/>level<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(floorLevel);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacedakku_1a837463872226179eb46dde52c558f1c1" kindref="member">lerp</ref>(triangle(floorLevel,<sp/>st),<sp/>triangle(floorLevel<sp/>+<sp/>1,<sp/>st),<sp/>delta);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;T,<sp/>Spectrum&gt;)<sp/>T<sp/><ref refid="classdakku_1_1MipMap" kindref="compound">MipMap&lt;T&gt;::triangle</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>level,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2f</ref><sp/>&amp;st)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>level<sp/>=<sp/>std::clamp(level,<sp/>0,<sp/>levels()<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>s<sp/>=<sp/>st[0]<sp/>*<sp/>pyramid[level]-&gt;uSize()<sp/>-<sp/>0.5f;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>t<sp/>=<sp/>st[1]<sp/>*<sp/>pyramid[level]-&gt;vSize()<sp/>-<sp/>0.5f;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::floor(s)),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>t0<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::floor(t));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>ds<sp/>=<sp/>s<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(s0),<sp/>dt<sp/>=<sp/>t<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">float</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(t0);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(1<sp/>-<sp/>ds)<sp/>*<sp/>(1<sp/>-<sp/>dt)<sp/>*<sp/>texel(level,<sp/>s0,<sp/>t0)<sp/>+</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1<sp/>-<sp/>ds)<sp/>*<sp/>dt<sp/>*<sp/>texel(level,<sp/>s0,<sp/>t0<sp/>+<sp/>1)<sp/>+</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ds<sp/>*<sp/>(1<sp/>-<sp/>dt)<sp/>*<sp/>texel(level,<sp/>s0<sp/>+<sp/>1,<sp/>t0)<sp/>+</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ds<sp/>*<sp/>dt<sp/>*<sp/>texel(level,<sp/>s0<sp/>+<sp/>1,<sp/>t0<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">requires</highlight><highlight class="normal">(std::is_same_v&lt;T,<sp/>float&gt;<sp/>||</highlight></codeline>
<codeline lineno="276" refid="classdakku_1_1MipMap_1a130a8b13049ca7fe2525d5b0c3882795" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same_v&lt;T,<sp/>Spectrum&gt;)<sp/>T<sp/><ref refid="classdakku_1_1MipMap" kindref="compound">MipMap&lt;T&gt;::lookup</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classdakku_1_1Point" kindref="compound">Point2f</ref><sp/>&amp;st,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1Vector" kindref="compound">Vector2f</ref><sp/>dst0,</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classdakku_1_1Vector" kindref="compound">Vector2f</ref><sp/>dst1)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(doTrilinear)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>width<sp/>=<sp/>std::max(std::max(std::abs(dst0[0]),<sp/>std::abs(dst0[1])),</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::max(std::abs(dst1[0]),<sp/>std::abs(dst1[1])));</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lookup(st,<sp/>width);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><ref refid="logger_8h_1a9edd762e54e3ce43a70ddfe81b6e2fc5" kindref="member">DAKKU_ERR</ref>(</highlight><highlight class="stringliteral">&quot;EWA<sp/>unimplemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T{};</highlight></codeline>
<codeline lineno="287"><highlight class="normal">}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dakku</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="src/core/mipmap.h"/>
  </compounddef>
</doxygen>
