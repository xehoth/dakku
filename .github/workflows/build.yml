name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: ${{ matrix.os }}-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest] #, ubuntu-latest]
        include:
          - name: windows-latest
            os: windows-latest
            triplet: x64-windows
#          - name: ubuntu-latest
#            os: ubuntu-latest
#            triplet: x64-linux

    env:
      buildDir: '${{ github.workspace }}/build/'
      buildType: Release
      vcpkgCommitId: '2a31089e777fc187f1cc05338250b8e1810cfb52'
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get GCC 11
        if: matrix.os == 'ubuntu-latest'
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64

      - name: Get latest CMake
        uses: lukka/get-cmake@latest
        
      - name: dir
        run: find $RUNNER_TEMP
        shell: bash
      - name: dir
        run: find $RUNNER_WORKSPACE
        shell: bash
      - name: Restore artifacts, or setup vcpkg (do not install any package)
        uses: lukka/run-vcpkg@main
        id: runvcpkg
        with:
          setupOnly: true
          vcpkgDirectory: '${{ github.workspace }}/vcpkg'
          vcpkgGitCommitId: '${{ env.vcpkgCommitId }}'
          # Ensure the cache key changes any time the content of the manifest file changes.
          appendedCacheKey: ${{ hashFiles( '**/vcpkg_manifest/vcpkg.json' ) }}
          # Ensure the vcpkg artifacts are cached, they are generated in the 'CMAKE_BINARY_DIR/vcpkg_installed'.
          additionalCachedPaths: ${{ env.buildDir }}/vcpkg_installed
          vcpkgTriplet: ${{ matrix.triplet }}
        
      - name: Prints output of run-vcpkg's action
        run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_TRIPLET_OUT }}'"
        
      - name: Run CMake with vcpkg.json manifest
        uses: lukka/run-cmake@main
        with:
          cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
          cmakeListsTxtPath: '${{ github.workspace }}/CMakeLists.txt'
          useVcpkgToolchainFile: true
          buildDirectory: ${{ env.buildDir }}
          cmakeAppendedArgs: '-DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_BUILD_TYPE=${{ env.buildType }}'
          buildWithCMake: true
